<File version="3.2">
  <FileID>373d466f-0843-40eb-9006-241e20fcf1fd</FileID>
  <LastExport>133227411031353429</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAHlMSURBVHhe7b1llyRLeqU7X2bdv3P/h+bOaEbT
gpZaUrfULXW3mg7VOcXMlZXMzMzMzMzMFBkRyUz72msRXhWVFQVZlRCZuZ9ce4Wngznbu83c3Py/
EUIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCHkAvD//Pf//qtr12+FxiZlhYZGJ1EU
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
irqCogGgKIqiqCsoGgCKoiiKuoKiAaAoiqKoKygaAIqiKIq6gvoqA/Dzf/h7/OIXv8C//Mu/UBRF
URR1gfSzn/0Mz549Pb4BSM8vw5/++AfcunULN2/epCiKoijqAumHH36Av78fZpb2jmEADoGUnGIE
BvijtLQUBQUFFEVRFEVdIOXl5SE7Owvj5s3jGwA/Xx+dSHZ2NkVRFEVRF0iZmZlKGTQAFEVRFHWV
RANAURRFUVdQX2QAVpQBSMwsgJenu36GYEuEoiiKoqiLovT0dKSlpR7PACzuA4UVDYiMCFMuIksl
lEFRFEVR1AVSWmoqiooKMGnd/jwDkJCaFWraAkZMm5i0bGFsYQPjC5sURVEURV0obWBCxfEhFdQn
rHufNgCRsUmJa4fAuGVHOwaKoiiKoi6uJPib1vFpA0AIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEkPPmv/23/x89ammZDqRzywAAAABJRU5ErkJggg==</Preview>
  <Form>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
Hddz83/Vv/9/4VyRQ/NaAwA=</Form>
  <Code><![CDATA[class config_customerinfo {
   [string]$customername
   [string]$logfoldertarget
   [string]$packagefolder
   [string]$tenanturl
   [string]$downloadpath
   
}

$tools_winget_label_Load = {
   $null = (Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue)
   $null = (Set-ControlTheme -Control $tools_winget_label -Theme Dark)
   
   try
   {
      $config_import_csv = (Import-Csv -Path 'config_customerinfo.csv' -ErrorAction Stop)
      
      foreach ($cis in $config_import_csv)
      {
         $null = (Update-ListBox -ListBox $config_listbox -Items $cis.customername -Append)
      }
      
   }
   catch
   {
      [void][Windows.Forms.MessageBox]::Show('See: https://github.com/rink-turksma/IntunePrepTool ', 'config_customerinfo.csv missing')
   }
   
   $rechten = [bool](([Security.Principal.WindowsIdentity]::GetCurrent()).groups -match 'S-1-5-32-544')
   
   if ($rechten -eq $false)
   {
      [void][Windows.Forms.MessageBox]::Show('Admin Rights needed!, Please run as Administrator', 'Please run as Administrator') # Casting the method to [void] suppresses the output. 
   }
   else
   {
      $winget_exe = (Resolve-Path -Path 'C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe')
      
      if ($winget_exe.count -gt 1)
      {
         $winget_exe = $winget_exe[-1].Path
      }
      
      if (!$winget_exe)
      {
         [void][Windows.Forms.MessageBox]::Show('Winget expected in C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\ ', 'Winget missing') # Casting the method to [void] suppresses the output.  }         
      }
      else
      {
         if (& $winget_exe list --id $WingetID | Select-String -Pattern '\bVersion\s+Available\b' -Quiet)
         {
            [void][Windows.Forms.MessageBox]::Show('Use button on config page to check for updates ', 'New version IntunePrepTool available')
         }
         
      }
   }
   
   $restrictionpolicy = (Get-ExecutionPolicy -ErrorAction SilentlyContinue)
   
   if ($restrictionpolicy -ne 'Unrestricted')
   {
      [void][Windows.Forms.MessageBox]::Show('Please run: "set-executionpolicy unrestricted" ', 'Powershell execution policy must me unrestricted')
   }
   
   try
   {
      # TODO: Check if get-command is the better option here
      $null = (Get-ChildItem -Path 'IntuneWinAppUtil.exe' -ErrorAction Stop)
   }
   catch
   {
      [void][Windows.Forms.MessageBox]::Show('Download Microsoft Win32 Content Prep Tool. Place EXE file in same directory as this script', 'IntuneWinAppUtil missing')
   }
   #>
   
   $config_tabcontrol2.Dock = 'Fill'
   $config_tabcontrol2.Visible = $true
   $config_tabcontrol2.Enabled = $true
}

$darkToolStripMenuItem_Click = {
   $null = (Set-ControlTheme -Control $tools_winget_label -Theme Dark)
}

$lightToolStripMenuItem_Click = {
   $null = (Set-ControlTheme -Control $tools_winget_label -Theme Light)
}

#region Control Theme Helper Function
function Set-ControlTheme
{
   <#
   .SYNOPSIS
   Applies a theme to the control and its children.

   .PARAMETER Control
   The control to theme. Usually the form itself.

   .PARAMETER Theme
   The color theme:
   Light
   Dark

   .PARAMETER CustomColor
   A hashtable that contains the color values.
   Keys:
   WindowColor
   ContainerColor
   BackColor
   ForeColor
   BorderColor
   SelectionForeColor
   SelectionBackColor
   MenuSelectionColor
   .EXAMPLE
   PS C:\> Set-ControlTheme -Control $form1 -Theme Dark

   .EXAMPLE
   PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
   .NOTES
   Created by SAPIEN Technologies, Inc.
   #>
   [CmdletBinding()]
   param
   (
      [Parameter(Mandatory = $true)]
      [ValidateNotNull()]
      [ComponentModel.Component]
      $Control,
      [ValidateSet('Light', 'Dark')]
      [string]
      $Theme = 'Dark',
      [hashtable]
      $CustomColor
   )
   
   $null = (Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue)
   $null = (Add-Type -AssemblyName System.Drawing -ErrorAction SilentlyContinue)
   $Font = [Drawing.Font]::New('Segoe UI', 9)
   
   #Initialize the colors
   if ($Theme -eq 'Dark')
   {
      $WindowColor = [Drawing.Color]::FromArgb(32, 32, 32)
      $ContainerColor = [Drawing.Color]::FromArgb(45, 45, 45)
      $BackColor = [Drawing.Color]::FromArgb(32, 32, 32)
      $ForeColor = [Drawing.Color]::White
      $BorderColor = [Drawing.Color]::DimGray
      $SelectionBackColor = [Drawing.SystemColors]::Highlight
      $SelectionForeColor = [Drawing.Color]::White
      $MenuSelectionColor = [Drawing.Color]::DimGray
   }
   else
   {
      $WindowColor = [Drawing.Color]::White
      $ContainerColor = [Drawing.Color]::WhiteSmoke
      $BackColor = [Drawing.Color]::Gainsboro
      $ForeColor = [Drawing.Color]::Black
      $BorderColor = [Drawing.Color]::DimGray
      $SelectionBackColor = [Drawing.SystemColors]::Highlight
      $SelectionForeColor = [Drawing.Color]::White
      $MenuSelectionColor = [Drawing.Color]::LightSteelBlue
   }
   
   if ($CustomColor)
   {
      #Check and Validate the custom colors:
      $Color = $CustomColor.WindowColor -as [Drawing.Color]
      
      if ($Color)
      {
         $WindowColor = $Color
      }
      
      $Color = $CustomColor.ContainerColor -as [Drawing.Color]
      
      if ($Color)
      {
         $ContainerColor = $Color
      }
      
      $Color = $CustomColor.BackColor -as [Drawing.Color]
      
      if ($Color)
      {
         $BackColor = $Color
      }
      
      $Color = $CustomColor.ForeColor -as [Drawing.Color]
      
      if ($Color)
      {
         $ForeColor = $Color
      }
      
      $Color = $CustomColor.BorderColor -as [Drawing.Color]
      
      if ($Color)
      {
         $BorderColor = $Color
      }
      
      $Color = $CustomColor.SelectionBackColor -as [Drawing.Color]
      
      if ($Color)
      {
         $SelectionBackColor = $Color
      }
      
      $Color = $CustomColor.SelectionForeColor -as [Drawing.Color]
      
      if ($Color)
      {
         $SelectionForeColor = $Color
      }
      $Color = $CustomColor.MenuSelectionColor -as [Drawing.Color]
      if ($Color)
      {
         $MenuSelectionColor = $Color
      }
   }
   
   #Define the custom renderer for the menus
   #region Add-Type definition
   try
   {
      [SAPIENTypes.SAPIENColorTable] | Out-Null
   }
   catch
   {
      if ($PSVersionTable.PSVersion.Major -ge 7)
      {
         $Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
      }
      else
      {
         $Assemblies = 'System.Windows.Forms', 'System.Drawing'
      }
      Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition '
         using System;
         using System.Windows.Forms;
         using System.Drawing;
         namespace SAPIENTypes
         {
         public class SAPIENColorTable : ProfessionalColorTable
         {
         Color ContainerBackColor;
         Color BackColor;
         Color BorderColor;
         Color SelectBackColor;

         public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
         {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
         SelectBackColor = selectBackColor;
         } 
         public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
         public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
         public override Color ToolStripBorder { get { return BorderColor; } }
         public override Color MenuItemBorder { get { return SelectBackColor; } }
         public override Color MenuItemSelected { get { return SelectBackColor; } }
         public override Color SeparatorDark { get { return BorderColor; } }
         public override Color ToolStripDropDownBackground { get { return BackColor; } }
         public override Color MenuBorder { get { return BorderColor; } }
         public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
         public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
         public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
         public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
         public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
         public override Color ImageMarginGradientBegin { get { return BackColor; } }
         public override Color ImageMarginGradientEnd { get { return BackColor; } }
         public override Color ImageMarginGradientMiddle { get { return BackColor; } }
         }
      }'
   }
   #endregion
   
   $colorTable = (New-Object -TypeName SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor)
   $render = (New-Object -TypeName System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable)
   [Windows.Forms.ToolStripManager]::Renderer = $render
   # Set up our processing queue
   $Queue = (New-Object -TypeName System.Collections.Generic.Queue[System.ComponentModel.Component])
   $Queue.Enqueue($Control)
   $null = (Add-Type -AssemblyName System.Core -ErrorAction SilentlyContinue)
   # Only process the controls once.
   $Processed = New-Object -TypeName System.Collections.Generic.HashSet[System.ComponentModel.Component]
   
   # Apply the colors to the controls
   while ($Queue.Count -gt 0)
   {
      $target = $Queue.Dequeue()
      
      # Skip controls we already processed
      if ($Processed.Contains($target))
      {
         continue
      }
      $Processed.Add($target)
      
      #Set the text color
      $target.ForeColor = $ForeColor
      
      #region Handle Controls
      #TODO: Replace with a SWITCH
      if ($target -is [Windows.Forms.Form])
      {
         #Set Font
         $target.Font = $Font
         $target.BackColor = $ContainerColor
      }
      elseif ($target -is [Windows.Forms.SplitContainer])
      {
         $target.BackColor = $BorderColor
      }
      elseif ($target -is [Windows.Forms.PropertyGrid])
      {
         $target.BackColor = $BorderColor
         $target.ViewBackColor = $BackColor
         $target.ViewForeColor = $ForeColor
         $target.ViewBorderColor = $BorderColor
         $target.CategoryForeColor = $ForeColor
         $target.CategorySplitterColor = $ContainerColor
         $target.HelpBackColor = $BackColor
         $target.HelpForeColor = $ForeColor
         $target.HelpBorderColor = $BorderColor
         $target.CommandsBackColor = $BackColor
         $target.CommandsBorderColor = $BorderColor
         $target.CommandsForeColor = $ForeColor
         $target.LineColor = $ContainerColor
      }
      elseif ($target -is [Windows.Forms.ContainerControl] -or
         $target -is [Windows.Forms.Panel])
      {
         #Set the BackColor for the container
         $target.BackColor = $ContainerColor
         
      }
      elseif ($target -is [Windows.Forms.GroupBox])
      {
         $target.FlatStyle = 'Flat'
      }
      elseif ($target -is [Windows.Forms.Button])
      {
         $target.FlatStyle = 'Flat'
         $target.FlatAppearance.BorderColor = $BorderColor
         $target.BackColor = $BackColor
      }
      elseif ($target -is [Windows.Forms.ComboBox])
      {
         $target.BackColor = $BackColor
         $target.FlatStyle = 'Flat'
      }
      elseif ($target -is [Windows.Forms.TextBox])
      {
         $target.BorderStyle = 'FixedSingle'
         $target.BackColor = $BackColor
      }
      elseif ($target -is [Windows.Forms.DataGridView])
      {
         $target.GridColor = $BorderColor
         $target.BackgroundColor = $ContainerColor
         $target.DefaultCellStyle.BackColor = $WindowColor
         $target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
         $target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
         $target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
         $target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
         $target.EnableHeadersVisualStyles = $false
         $target.ColumnHeadersBorderStyle = 'Single'
         $target.RowHeadersBorderStyle = 'Single'
         $target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
         $target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
         
      }
      elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [Windows.Forms.DataGrid])
      {
         $target.CaptionBackColor = $WindowColor
         $target.CaptionForeColor = $ForeColor
         $target.BackgroundColor = $ContainerColor
         $target.BackColor = $WindowColor
         $target.ForeColor = $ForeColor
         $target.HeaderBackColor = $ContainerColor
         $target.HeaderForeColor = $ForeColor
         $target.FlatMode = $true
         $target.BorderStyle = 'FixedSingle'
         $target.GridLineColor = $BorderColor
         $target.AlternatingBackColor = $ContainerColor
         $target.SelectionBackColor = $SelectionBackColor
         $target.SelectionForeColor = $SelectionForeColor
      }
      elseif ($target -is [Windows.Forms.ToolStrip])
      {
         
         $target.BackColor = $BackColor
         $target.Renderer = $render
         
         foreach ($item in $target.Items)
         {
            $Queue.Enqueue($item)
         }
      }
      elseif ($target -is [Windows.Forms.ToolStripMenuItem] -or
         $target -is [Windows.Forms.ToolStripDropDown] -or
         $target -is [Windows.Forms.ToolStripDropDownItem])
      {
         $target.BackColor = $BackColor
         foreach ($item in $target.DropDownItems)
         {
            $Queue.Enqueue($item)
         }
      }
      elseif ($target -is [Windows.Forms.ListBox] -or
         $target -is [Windows.Forms.ListView] -or
         $target -is [Windows.Forms.TreeView])
      {
         $target.BackColor = $WindowColor
      }
      else
      {
         $target.BackColor = $BackColor
      }
      #endregion
      
      if ($target -is [Windows.Forms.Control])
      {
         # Queue all the child controls
         foreach ($child in $target.Controls)
         {
            $Queue.Enqueue($child)
         }
      }
   }
}
#endregion

$winget_maakPackage_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $wid = $winget_WingetID_textbox1.text
   $vid = $versie_textbox2.Text
   $DisplayName = $winget_displayname_textbox1.text
   $fid = $config_packagefolder
   
   if ($winget_locale_checkbox1.Checked -eq $true)
   {
      $wlo = $Winget_locale_textbox.text
      
   }
   else
   {
      $wlo = $null
   }
   
   if ($winget_version_checkbox.Checked -eq $true)
   {
      $wve = $winget_version_textbox1.text
   }
   else
   {
      $wve = $null
   }
   
   $DisplayName = $winget_displayname_textbox1.text
   $WinGetID = $wid
   $regApp1 = $DisplayName
   $versie = $vid
   $logdir = $config_logfoldertarget
   $RegisterDetectionroot = 'Intune_' + $config_customername
   $outputDirectory = $fid
   $null = (Set-Location -Path $PSScriptRoot)
   $winget_output_textbox3.Text = "`nNew intunewin package will now be created: `r`n"
   $winget_output_textbox3.AppendText("Please wait`r`n")
   & .\IntuneWinAppUtil.exe -c "$outputDirectory\$wingetID\$versie\source" -s "$outputDirectory\$wingetID\$versie\source\install.ps1" -o "$outputDirectory\$wingetID\$versie\output" -q
   $null = (Rename-Item -Path ('{0}\{1}\{2}\output\install.intunewin' -f $outputDirectory, $wingetID, $versie) -NewName ('{0}\{1}\{2}\output\{3}.intunewin' -f $outputDirectory, $wingetID, $versie))
   $winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\$wingetID.intunewin")
   $winget_output_textbox3.AppendText("`r`n")
   $winget_output_textbox3.AppendText("Version: $Versie `r`n")
   $winget_output_textbox3.AppendText("Install command is: `r`n")
   $winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
   $winget_output_textbox3.AppendText("un-install command is: `r`n")
   $winget_output_textbox3.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
   $winget_output_textbox3.AppendText("Detection registry is: `r`n")
   $regkeyRoot = ('HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\{0}\' -f $RegisterDetectionroot)
   $regkeyApp = ('{0}{1}\' -f $regkeyRoot, $regApp1)
   $regkeyApp
   $winget_output_textbox3.AppendText("$regkeyApp `r`n")
   $winget_output_textbox3.AppendText("Detection Method is: 'String Comparison' `r`n")
   $winget_output_textbox3.AppendText("Detection Value is: 'Versie' `r`n")
   $winget_output_textbox3.AppendText("Detection Operator is: 'Equals' `r`n")
   $winget_output_textbox3.AppendText("Detection Value is: $Versie `r`n")
   $winget_output_textbox3.AppendText("Please reopen tool to make another winget package `r`n")
   
   class CSNIntuneWinPackageConfig {
      [string]$IntuneWinFile
      [string]$DisplayName
      [string]$Publisher
      [string]$AppVersion
      [string]$reglocation
      [string]$regValue
      [string]$installCMD
      [string]$uninstallCMD
   }
   $CSNIntuneWinPackageConfig = $null
   
   $CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
         IntuneWinFile = ('{0}.intunewin' -f $wingetID)
         DisplayName   = $DisplayName
         Publisher     = $config_customername_textbox.Text
         AppVersion    = $versie
         reglocation   = $regkeyApp
         regValue      = 'Versie'
         installCMD    = 'powershell -executionpolicy bypass -file install.ps1'
         uninstallCMD  = 'powershell -executionpolicy bypass -file uninstall.ps1'
      })
   
   $null = ($CSNIntuneWinPackageConfig | Export-Csv -Path ('{0}\{1}\{2}\output\config.csv' -f $outputDirectory, $wingetID, $versie) -NoTypeInformation)
   $config_csv_openfiledialog1.InitialDirectory = ('{0}\{1}\{2}\output\' -f $outputDirectory, $wingetID, $versie)
   $winget_output_textbox3.AppendText("Config.csv written to: `r`n")
   $winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\output\config.csv")
   $winget_output_textbox3.AppendText("  `r`n")
   $winget_output_textbox3.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
   $winget_output_textbox3.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
   $winget_upload_logo_button1.Visible = $true
   $winget_upload_logo_button1.Enabled = $true
}

$winget_WingetID_textbox1_TextChanged = {
   if ($config_listbox.SelectedItem -eq $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
   }
}

$winget_checkurl_button1_Click = {
   $wgid = $winget_WingetID_textbox1.text
   $showurl = winget.exe show $wgid --accept-source-agreements
   
   foreach ($l in $showurl)
   {
      if ($l -like '*Installer Url*')
      {
         $url = 'https:' + $l.Split(':')[2]
      }
   }
   
   [void][Windows.Forms.MessageBox]::Show($URL, 'Download source URL')
}

$config_save_button_Click = {
   [string]$c_customername = $config_customername_textbox.text
   [string]$c_logfoldertarget = $config_logfoldertarger_textbox.text
   [string]$c_packagefolder = $config_packagefolder_textbox.text
   [string]$c_tenanturl = $config_tenanturl_textbox.text
   [string]$c_downloadfolder = $config_download_folder_textbox3.Text
   $config_customerinfo += @([config_customerinfo]@{
         customername    = $c_customername
         logfoldertarget = $c_logfoldertarget
         packagefolder   = $c_packagefolder
         tenanturl       = $c_tenanturl
         
         downloadpath    = $c_downloadfolder
         
      })
   $null = ($config_customerinfo | Export-Csv -Path 'config_customerinfo.csv' -NoTypeInformation -Append)
   $config_listbox.ResetText()
   
   try
   {
      $config_import_csv = $null
      
      $config_import_csv = (Import-Csv -Path 'config_customerinfo.csv' -ErrorAction Stop)
      
      foreach ($cis in $config_import_csv)
      {
         if ($config_customerinfo.customername -eq $cis.customername)
         {
            $null = (Update-ListBox -ListBox $config_listbox -Items $cis.customername -Append)
         }
      }
   }
   catch
   {
      Write-Host 'Taak hier'
   }
}

$exe_openexe_button1_Click = {
   $exe_openfiledialog1.ShowDialog()
   $exe_label1.Text = $exe_openfiledialog1.SafeFileName
   $exe_label1.Visible = $true
}

$exe_maakPackageDir_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $fid = $config_packagefolder
   $outputDirectory = $fid
   $exepnaam = $exe_packagenaam_textbox1.text
   $exeversie = $exe_versie_textbox1.text
   
   if ($exepnaam -like $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
   }
   else
   {
      if ($exeversie -like $null)
      {
         [void][Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
      }
      else
      {
         if (!(Test-Path -Path ('{0}\{1}\{2}\source' -f $outputDirectory, $exepnaam, $exeversie) -ErrorAction SilentlyContinue))
         {
            $null = (New-Item -ItemType Directory -Path ('{0}\{1}\{2}\source' -f $outputDirectory, $exepnaam, $exeversie))
         }
         
         if (!(Test-Path -Path ('{0}\{1}\{2}\output' -f $outputDirectory, $exepnaam, $exeversie) -ErrorAction SilentlyContinue))
         {
            $null = (New-Item -ItemType Directory -Path ('{0}\{1}\{2}\output' -f $outputDirectory, $exepnaam, $exeversie))
         }
         
         $exe_output_textbox1.Text = "`nNew package directory created: `r`n"
         $exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\source")
         $exe_output_textbox1.AppendText("`r`n")
         $exe_output_textbox1.AppendText("`nEXE file will be copied now `r`n")
         [string]$exe_org_path = $exe_openfiledialog1.FileNames
         
         try
         {
            $null = (Unblock-File -Path $exe_org_path -Confirm:$false -ErrorAction SilentlyContinue)
            $null = (Copy-Item -Path $exe_org_path -Destination ('{0}\{1}\{2}\source' -f $outputDirectory, $exepnaam, $exeversie) -ErrorAction Stop)
            $exe_output_textbox1.AppendText("`nEXE file copy done!`r`n")
            $exe_output_textbox1.AppendText("`nIf you need any additional files please place in just created source directory `r`n")
            $exe_panel1.Enabled = $true
            $exe_panel1.Visible = $true
         }
         catch
         {
            $exe_output_textbox1.AppendText("`nEXE file copy failed. Please select EXE file first `r`n")
         }
         $exe_open_sourcedir_button1.Enabled = $true
         $exe_open_sourcedir_button1.Visible = $true
      }
   }
}

$exe_packagenaam_textbox1_TextChanged = {
   if ($config_listbox.SelectedItem -eq $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
   }
}

$exe_parsInstall_textbox1_TextChanged = {
   $argList = $exe_parsInstall_textbox1.Text
   $exebestand = $exe_openfiledialog1.SafeFileName
   $exe_output_installparameters.text = "Start-Process -FilePath $EXEbestand -ArgumentList $argList"
}

$exe_install_test_button1_Click = {
   if ([Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
   {
      $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
      $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
      $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
      $exepnaam = $exe_packagenaam_textbox1.text
      $exeversie = $exe_versie_textbox1.text
      $outputDirectory = $config_packagefolder
      & "$env:PSHome\powershell_ise.exe" -file "$outputDirectory\$exepnaam\$exeversie\source\install.ps1"
   }
}

$exe_radiobuttonUninstallEXEPath_CheckedChanged = {
   if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
   {
      $exe_uninstall_exe_path_textbox2.Enabled = $true
      $exe_uninstall_exe_path_textbox2.Visible = $true
   }
   
   if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
   {
      $exe_uninstall_exe_path_textbox2.Enabled = $false
      $exe_uninstall_exe_path_textbox2.Visible = $false
      $argList2 = $exe_parsUnInstall_textbox1.text
      
      if ($exe_openfiledialog1.SafeFileName -like '*.exe')
      {
         $exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
      }
   }
   
   if ($exe_radiobutton3.Checked -eq $true)
   {
      $exe_uninstall_exe_path_textbox2.Enabled = $false
      $exe_uninstall_exe_path_textbox2.Visible = $false
      $exe_parsUnInstall_textbox1.Enabled = $false
      $exe_parsUnInstall_textbox1.Visible = $false
      $exe_msiexecuninstall.Enabled = $true
      $exe_msiexecuninstall.Visible = $true
      $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
      $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
      $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
      $exepnaam = $exe_packagenaam_textbox1.text
      $exeversie = $exe_versie_textbox1.text
      $appNaam = $exepnaam
      $versie = $exeversie
      #$msi_openfiledialog1.SafeFileName
      #klant variabelen
      $logdir = $config_logfoldertarget
      $RegisterDetectionroot = 'Intune_' + $config_customername
      #Dyn vars
      $logfile = $(Join-Path -Path $logdir -ChildPath ('{0}{1}.txt' -f $appnaam, $versie))
      $filenaamMSILog = $appNaam + $versie + 'MSI'
      $logfileMSI = "$(Join-Path -Path $logdir -ChildPath ('{0}.txt' -f $filenaamMSILog))"
      $exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
   }
   
   $exe_parsUnInstall_textbox1.Enabled = $true
   $exe_parsUnInstall_textbox1.Visible = $true
   $exe_labelVoorbeeldUninstall.Visible = $false
   $exe_labelVoorbeeldUninstall.Enabled = $false
   $exe_test_uninstall_button1.Enabled = $true
   $exe_test_uninstall_button1.Visible = $true
   $exe_maak_uninstall_script_button1.Enabled = $true
   $exe_maak_uninstall_script_button1.Visible = $true
}

$exe_radiobuttonGebruikZelfdeEXEAlsB_CheckedChanged = {
   if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
   {
      $exe_uninstall_exe_path_textbox2.Enabled = $true
      $exe_uninstall_exe_path_textbox2.Visible = $true
      $exe_msiexecuninstall.Enabled = $false
      $exe_msiexecuninstall.Visible = $false
      $exe_parsUnInstall_textbox1.Enabled = $true
      $exe_parsUnInstall_textbox1.Visible = $true
      
   }
   
   if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
   {
      $exe_uninstall_exe_path_textbox2.Enabled = $false
      $exe_uninstall_exe_path_textbox2.Visible = $false
      $exe_msiexecuninstall.Enabled = $false
      $exe_msiexecuninstall.Visible = $false
      $exe_parsUnInstall_textbox1.Enabled = $true
      $exe_parsUnInstall_textbox1.Visible = $true
      $argList2 = $exe_parsUnInstall_textbox1.text
      
      if ($exe_openfiledialog1.SafeFileName -like '*.exe')
      {
         $exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
      }
   }
   
   if ($exe_radiobutton3.Checked -eq $true)
   {
      $exe_uninstall_exe_path_textbox2.Enabled = $false
      $exe_uninstall_exe_path_textbox2.Visible = $false
      $exe_parsUnInstall_textbox1.Enabled = $false
      $exe_parsUnInstall_textbox1.Visible = $false
      $exe_msiexecuninstall.Enabled = $true
      $exe_msiexecuninstall.Visible = $true
      $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
      $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
      $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
      $exepnaam = $exe_packagenaam_textbox1.text
      $exeversie = $exe_versie_textbox1.text
      $appNaam = $exepnaam
      $versie = $exeversie
      #$msi_openfiledialog1.SafeFileName
      #klant variabelen
      $logdir = $config_logfoldertarget
      $RegisterDetectionroot = 'Intune_' + $config_customername
      #Dyn vars
      $logfile = $(Join-Path -Path $logdir -ChildPath ('{0}{1}.txt' -f $appnaam, $versie))
      $filenaamMSILog = $appNaam + $versie + 'MSI'
      $logfileMSI = "$(Join-Path -Path $logdir -ChildPath ('{0}.txt' -f $filenaamMSILog))"
      $exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
   }
   
   $exe_labelVoorbeeldUninstall.Visible = $false
   $exe_labelVoorbeeldUninstall.Enabled = $false
   $exe_test_uninstall_button1.Enabled = $true
   $exe_test_uninstall_button1.Visible = $true
   $exe_maak_uninstall_script_button1.Enabled = $true
   $exe_maak_uninstall_script_button1.Visible = $true
}

$exe_parsUnInstall_textbox1_TextChanged = {
   if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
   {
      $exe_uninstall_exe_path_textbox2.Enabled = $true
      $exe_uninstall_exe_path_textbox2.Visible = $true
      $exebestandUninstall = $exe_uninstall_exe_path_textbox2.text
   }
   
   if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
   {
      $exe_uninstall_exe_path_textbox2.Enabled = $false
      $exe_uninstall_exe_path_textbox2.Visible = $false
      $exebestandUninstall = $exe_openfiledialog1.SafeFileName
   }
   
   if ($exe_radiobutton3.Checked -eq $true)
   {
      $exe_uninstall_exe_path_textbox2.Enabled = $false
      $exe_uninstall_exe_path_textbox2.Visible = $false
      $exe_parsUnInstall_textbox1.Enabled = $false
      $exe_parsUnInstall_textbox1.Visible = $false
      $exe_msiexecuninstall.Enabled = $true
      $exe_msiexecuninstall.Visible = $true
   }
   
   $exe_labelVoorbeeldUninstall.Visible = $true
   $exe_labelVoorbeeldUninstall.Enabled = $true
   $exe_test_uninstall_button1.Enabled = $true
   $exe_test_uninstall_button1.Visible = $true
   $exe_maak_uninstall_script_button1.Enabled = $true
   $exe_maak_uninstall_script_button1.Visible = $true
   $argList2 = $exe_parsUnInstall_textbox1.text
   
   if ($exe_openfiledialog1.SafeFileName -like '*.exe')
   {
      $exe_labelVoorbeeldUninstall.text = "Start-Process -FilePath $exebestandUninstall -ArgumentList $argList2"
   }
}

$exe_test_uninstall_button1_Click = {
   if ([Windows.Forms.MessageBox]::Show('Do you want to test deinstallation.. You can Edit in Powershell ISE. And save that file if needed.?... ', 'Test', [Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
   {
      $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
      $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
      $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
      $exepnaam = $exe_packagenaam_textbox1.text
      $exeversie = $exe_versie_textbox1.text
      $outputDirectory = $config_packagefolder
      & "$env:PSHome\powershell_ise.exe" -file "$outputDirectory\$exepnaam\$exeversie\source\uninstall.ps1"
   }
}

$exe_maakScripting_button1_Click = {
   $exe_UnlInstallParameters.Visible = $true
   $exe_UnlInstallParameters.Enabled = $true
   $exe_radiobuttonUninstallEXEPath.Visible = $true
   $exe_radiobuttonUninstallEXEPath.Enabled = $true
   $exe_install_test_button1.Enabled = $true
   $exe_install_test_button1.Visible = $true
   $exe_radiobuttonGebruikZelfdeEXEAlsB.Enabled = $true
   $exe_radiobuttonGebruikZelfdeEXEAlsB.Visible = $true
   $exe_radiobutton3.Enabled = $true
   $exe_radiobutton3.Visible = $true
   $exe_installFile = @'
<#	
      .NOTES
      ===========================================================================
      Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
      Created on:   	21-5-2023 18:02
      Created by:   	Rink Turksma
      Organization: 	
      Filename:     	install.ps1
      ===========================================================================
      .DESCRIPTION
      Parameters will be filled by IntunePrepTool.
#>
# App Parameters
$appName = '!!AppName!!'
$version = '!!Version!!'
$exeFile = '!!ExeFile!!'
$exeParameters = '!!ExeParams!!' ## Check EXE Params.. 
# Customer variables
$logDir = '!!LogDir!!'
$registerDetectionRoot = '!!RegisterDetectionRoot!!'
# Dynamic variables
$logFile = $(Join-Path -Path $logDir  -ChildPath ('{0}{1}.txt' -f $appName, $version))
$msiLogFileName = $appName + $version + 'MSI'
$msiLogFile = $(Join-Path -Path $logDir  -ChildPath ('{0}.txt' -f $msiLogFileName))
$regKeyRoot = ('HKLM:\Software\{0}' -f $registerDetectionRoot)
$regKeyApp = ('{0}\{1}' -f $regKeyRoot, $appName)
$exeCode = $null

# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logDir -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path $logDir -Force -Confirm:$false)
}

if (!(Test-Path -Path ('{0}\dll' -f $logDir) -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\dll' -f $logDir) -Force -Confirm:$false)
}
  
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regKeyRoot -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regKeyRoot -ItemType Key -Force -Confirm:$false)
}
   
# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regKeyApp -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regKeyApp -ItemType Key -Force -Confirm:$false)
}
function fDetectionInRegistry
{
   ### Function responsible for successful or unsuccessful execution.
   ### Ultimately, you will have, for example:
   ### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
   ### With a Version value and a [BOOL]Success value
   ### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
   param
   (
      [Parameter(Mandatory,HelpMessage = 'Add help message for user')]
      [bool]$Succes
   )
	
   try
   {
      $AppRegVersie = (Get-ItemProperty -Path $regKeyApp -Name Versie -ErrorAction Stop)

      if ($AppRegVersie.version -ne $version) 
      {
         $null = (Set-ItemProperty -Path $regKeyApp -Name Versie -Value $version -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regKeyApp -Name Versie -Value $version -PropertyType string -Force -Confirm:$false)
   }

   try
   {
      $AppRegSucces = (Get-ItemProperty -Path $regKeyApp -Name Succes -ErrorAction Stop)

      if ($AppRegSucces.Succes -ne $Succes) 
      {
         $null = (Set-ItemProperty -Path $regKeyApp -Name Succes -Value $Succes -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regKeyApp -Name Succes -Value $Succes -PropertyType string -Confirm:$false -Force)
   }
}

# Setup Script Location
$null = (Set-Location -Path $PSScriptRoot)

# Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -PathType Leaf -ErrorAction SilentlyContinue))
{
   $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -Confirm:$false -Force)
}

# Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' | Select-Object -ExpandProperty Name | Where-Object -Property {
      ($_ -eq 'IntunePrepTool')
} -EQ -Value $null)
{
   $null = (New-Item -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' -Name 'IntunePrepTool' -ErrorAction SilentlyContinue -Force -Confirm:$false)
}

try
{
   $TypesSupported = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -ErrorAction Stop)

   if ($TypesSupported.TypesSupported -ne '7') 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -PropertyType DWORD -Force -Confirm:$false)
}

try
{
   $EventMessageFile = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -ErrorAction Stop)

   if ($EventMessageFile.EventMessageFile -ne ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir)) 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -PropertyType string -Force -Confirm:$false)
}

# New EventLog when needed.
try
{
   $checkEventLog = (Get-EventLog -LogName 'IntunePrepTool' -Source 'IntunePrepTool' -ErrorAction Stop)
}
catch
{
   $null = (New-EventLog -MessageResourceFile ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -LogName 'IntunePrepTool' -Source 'IntunePrepTool')
   [Diagnostics.EventLog]::CreateEventSource('IntunePrepTool', 'IntunePrepTool')
}

$null = (Start-Transcript -Path $logFile)

#Start; Write Log file
try
{
   $null = (Start-Process -FilePath $exeFile -ArgumentList $exeParameters -ErrorAction Stop -Wait)
   Write-Host -Object ('Installation completed of {0}' -f $exeFile) -ForegroundColor Green
   $excode = 0
}
catch
{
   Write-Host -Object ('Error executing {0}' -f $exeFile) -ForegroundColor Yellow
   Write-Host -Object 'installation failed' -ForegroundColor Red -BackgroundColor Blue
   Write-Host -Object ('Error message: {0}' -f $_.Exception.Message) -ForegroundColor Red -BackgroundColor Blue
   $excode = 1
}

try
{
   #Searches for startmenu items created the last 10 minutes
   $startmenuItems = ((Get-ChildItem -Path 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs' -Recurse -Include *.lnk | Sort-Object -Property LastWriteTime -ErrorAction Stop | Where-Object -FilterScript {
            ($_.LastWriteTime -ge (Get-Date).AddMinutes(-10))
   }).VersionInfo.FileName)

   foreach ($startmenuI in $startmenuItems)
   {
      Write-Host -Object "`r`n"
      Write-Host -Object 'The last 10 minutes a startmenu *.lnk file was created.' -ForegroundColor Yellow
      Write-Host -Object "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
      Write-Host -Object "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
      Write-Host -Object "`r`n"
   }
}
catch
{
   Write-Host -Object 'Error looking for *.lnk files in startmenu' -ForegroundColor Yellow
}
try
{
   # Searches for Desktop items created the last 10 minutes
   $startmenuItems = ((Get-ChildItem -Path 'C:\Users\Public\Desktop' -Recurse -Include *.lnk | Sort-Object -Property LastWriteTime -ErrorAction Stop | Where-Object -FilterScript {
            ($_.LastWriteTime -ge (Get-Date).AddMinutes(-10))
   }).VersionInfo.FileName)

   foreach ($startmenuI in $startmenuItems)
   {
      Write-Host -Object "`r`n"
      Write-Host -Object 'The last 10 minutes a Desktop *.lnk file was created.' -ForegroundColor Yellow
      Write-Host -Object "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
      Write-Host -Object "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
      Write-Host -Object "`r`n"
   }
}
catch
{
   Write-Host -Object 'Error looking for *.lnk files on the Desktop' -ForegroundColor Yellow
}
### Place extra actions here:


$null = (Stop-Transcript)
$split = [regex]::Escape('**********************')
$lastRun = ((Get-Content -Path $logFile -Raw) -split ($split))[-3]

if ($lastRun.Length -gt 32600)
{
   $lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}

# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) 
{
   $warning = 'Error'
}
else 
{
   $warning = 'Information'
   fDetectionInRegistry -succes $true
}
#End; Write Log file

if ($warning -like 'Information')
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Information', 0x3)
}
Else
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Error', 0x3)
}

if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs' -ErrorAction SilentlyContinue) 
{
   if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -PathType Leaf -ErrorAction SilentlyContinue) 
   {
      $null = (Remove-Item -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Confirm:$false -Force)
   }

   $null = (Copy-Item -Path 'c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx' -Destination 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
}
'@
   
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $logdir = $config_logfoldertarget
   $RegisterDetectionroot = 'Intune_' + $config_customername
   $versie = $exe_versie_textbox1.text
   $EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
   $appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
   $EXEPARSInput = $exe_parsInstall_textbox1.Text
   $exe_installFile = $exe_installFile.Replace('"!!AppName!!"', $appnaam)
   $exe_installFile = $exe_installFile.Replace('!!LogDir!!', $logdir)
   $exe_installFile = $exe_installFile.Replace('!!RegisterDetectionRoot!!', $RegisterDetectionroot)
   $exe_installFile = $exe_installFile.Replace('!!Version!!', $versie)
   $exe_installFile = $exe_installFile.Replace('"!!ExeFile!!"', $EXEbestand)
   $exe_installFile = $exe_installFile.Replace('"!!ExeParams!!"', $EXEPARSInput)
   $exepnaam = $exe_packagenaam_textbox1.text
   $exeversie = $exe_versie_textbox1.text
   $outputDirectory = $config_packagefolder
   
   try
   {
      $null = ($exe_installFile | Out-File -FilePath ('{0}\{1}\{2}\source\install.ps1' -f $outputDirectory, $exepnaam, $exeversie) -Force -ErrorAction Stop)
      $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\{1}\{2}\source\IntunePrepTool_msgfile.dll' -f $outputDirectory, $exepnaam, $exeversie) -Confirm:$false)
      $exe_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
   }
   catch
   {
      $exe_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
   }
}

$exe_maak_intuneWIN_button1_Click = {
   $null = (Set-Location -Path $PSScriptRoot)
   [void][Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $exepnaam = $exe_packagenaam_textbox1.text
   $exeversie = $exe_versie_textbox1.text
   $outputDirectory = $config_packagefolder
   $mkiapn = $exe_packagenaam_textbox1.text
   $versie = $exe_versie_textbox1.text
   $RegisterDetectionroot = 'Intune_' + $config_customername
   & .\IntuneWinAppUtil.exe -c "$outputDirectory\$exepnaam\$exeversie\source\" -s "$outputDirectory\$exepnaam\$exeversie\source\install.ps1" -o "$outputDirectory\$exepnaam\$exeversie\output\" -q
   $null = (Rename-Item -Path ('{0}\{1}\{2}\output\install.intunewin' -f $outputDirectory, $exepnaam, $exeversie) -NewName ('{0}\{1}\{2}\output\{3}.intunewin' -f $outputDirectory, $exepnaam, $exeversie, $mkiapn))
   $exe_output_textbox1.AppendText("`nIntunewin file created: `r`n")
   $exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\$mkiapn.intunewin")
   $exe_output_textbox1.AppendText("`r`n")
   $exe_output_textbox1.AppendText("Install command is: `r`n")
   $exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
   $exe_output_textbox1.AppendText("un-install command is: `r`n")
   $exe_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
   $exe_output_textbox1.AppendText("Detection in registry is: `r`n")
   $regkeyRoot = ('HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\{0}\' -f $RegisterDetectionroot)
   $regkeyApp = ('{0}{1}\' -f $regkeyRoot, $mkiapn)
   $regkeyApp
   $exe_output_textbox1.AppendText("$regkeyApp `r`n")
   $exe_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
   $exe_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
   $exe_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
   $exe_output_textbox1.AppendText("Detection Value is: $Versie `r`n")
   $exe_output_textbox1.AppendText("Please reopen tool to make another EXE package `r`n")
   
   class CSNIntuneWinPackageConfig {
      [string]$IntuneWinFile
      [string]$DisplayName
      [string]$Publisher
      [string]$AppVersion
      [string]$reglocation
      [string]$regValue
      [string]$installCMD
      [string]$uninstallCMD
   }
   
   $CSNIntuneWinPackageConfig = $null
   
   $CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
         IntuneWinFile = ('{0}.intunewin' -f $exepnaam)
         DisplayName   = $exepnaam
         Publisher     = $config_customername
         AppVersion    = $exeversie
         
         reglocation   = $regkeyApp
         regValue      = 'Versie'
         installCMD    = 'powershell -executionpolicy bypass -file install.ps1'
         uninstallCMD  = 'powershell -executionpolicy bypass -file uninstall.ps1'
      })
   $null = ($CSNIntuneWinPackageConfig | Export-Csv -Path ('{0}\{1}\{2}\output\config.csv' -f $outputDirectory, $exepnaam, $exeversie) -NoTypeInformation)
   $config_csv_openfiledialog1.InitialDirectory = ('{0}\{1}\{2}\output\' -f $outputDirectory, $exepnaam, $exeversie)
   $exe_output_textbox1.AppendText("Config.csv written to naar: `r`n")
   $exe_output_textbox1.AppendText("$outputDirectory\$exepnaam\$exeversie\output\config.csv")
   $exe_uploadlogo_button1.Enabled = $true
   $exe_uploadlogo_button1.Visible = $true
   $exe_output_textbox1.AppendText("  `r`n")
   $exe_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
   $exe_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_buttonOpenMSIFile_Click = {
   $msi_openfiledialog1.ShowDialog()
   $msi_openmsi_label1.Text = $msi_openfiledialog1.SafeFileName
   $msi_openmsi_label1.Visible = $true
   
}

$msi_buttonCreatePackageDirecto_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $fid = $config_packagefolder
   $outputDirectory = $fid
   $msipnaam = $msi_packagenaam_textbox1.text
   $msiversie = $msi_versie_textbox1.text
   
   if ($msipnaam -like $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please fill the Package Name textbox', 'Please choose Package Name first')
   }
   else
   {
      if ($msiversie -like $null)
      {
         [void][Windows.Forms.MessageBox]::Show('Please fill the Package Version textbox', 'Please choose Package Version first')
      }
      else
      {
         if (!(Test-Path -Path ('{0}\{1}\{2}\source' -f $outputDirectory, $msipnaam, $msiversie) -ErrorAction SilentlyContinue))
         {
            $null = (New-Item -ItemType Directory -Path ('{0}\{1}\{2}\source' -f $outputDirectory, $msipnaam, $msiversie))
         }
         
         if (!(Test-Path -Path ('{0}\{1}\{2}\output' -f $outputDirectory, $msipnaam, $msiversie) -ErrorAction SilentlyContinue))
         {
            $null = (New-Item -ItemType Directory -Path ('{0}\{1}\{2}\output' -f $outputDirectory, $msipnaam, $msiversie))
         }
         
         $msi_output_textbox1.Text = "`nNew package direcotory created: `r`n"
         $msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\source")
         $msi_output_textbox1.AppendText("`r`n")
         $msi_output_textbox1.AppendText("`nMSI file will now be copied`r`n")
         [string]$msi_org_path = $msi_openfiledialog1.FileNames
         
         try
         {
            $null = (Unblock-File -Path $msi_org_path -Confirm:$false)
            $MSINewname = $msi_openfiledialog1.FileName
            $MSINewname = $MSINewname.Split('\')[$MSINewname.Split('\').Count - 1]
            $MSINewname = $MSINewname.Replace(' ', '')
            $MSIbestand = ('{0}\{1}\{2}\source\{3}' -f $outputDirectory, $msipnaam, $msiversie, $MSINewname)
            $null = (Copy-Item -Path $msi_org_path -Destination ('{0}\{1}\{2}\source\{3}' -f $outputDirectory, $msipnaam, $msiversie, $MSINewname) -ErrorAction Stop)
            $msi_output_textbox1.AppendText("`nMSI file copy done `r`n")
            $msi_output_textbox1.AppendText("`nIf you need additional files. Please use open source directory to place files `r`n")
            $msi_output_textbox1.AppendText("`nYou can use this for TRANSFORMS files `r`n")
            $msi_panel1.Enabled = $true
            $msi_panel1.Visible = $true
         }
         catch
         {
            $exe_output_textbox1.AppendText("`nfile copy failed. Please select file first  `r`n")
         }
         
         $appNaam = $msipnaam
         $versie = $msiversie
         #klant variabelen
         $logdir = $config_logfoldertarget
         $RegisterDetectionroot = 'Intune_' + $config_customername
         #Dyn vars
         $logfile = $(Join-Path -Path $logdir -ChildPath ('{0}{1}.txt' -f $appnaam, $versie))
         $filenaamMSILog = $appNaam + $versie + 'MSI'
         $logfileMSI = "$(Join-Path -Path $logdir -ChildPath ('{0}.txt' -f $filenaamMSILog))"
         $msi_install_par_textbox3.Text = "msiexec /qn, /l*v $logfileMSI /i $MSINewname"
         $msi_OpenSourceDir_button1.Enabled = $true
         $msi_OpenSourceDir_button1.Visible = $true
      }
   }
}

$msi_button1CreateInstallScript_Click = {
   $msi_installFile = @'
<#	
      .NOTES
      ===========================================================================
      Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
      Created on:   	21-5-2023 17:53
      Created by:   	Rink Turksma
      Organization: 	
      Filename:     	install.ps1
      ===========================================================================
      .DESCRIPTION
      Parameters will be filled by IntunePrepTool.
#>

$appNaam = '!!AppNaam!!'
$versie = '!!versie!!'
#$MSIbestand = "!!MSIBestand!!"
#$MSIparameters = "!!MSIPARMS!!"
#klant variabelen
$logdir = '!!logdir!!'
$RegisterDetectionroot = '!!RegisterDetectionroot!!'
#Dyn vars
$logfile = $(Join-Path -Path $logdir  -ChildPath ('{0}{1}.txt' -f $appNaam, $versie))
$filenaamMSILog = $appNaam + $versie + 'MSI'
$logfileMSI = $(Join-Path -Path $logdir  -ChildPath ('{0}.txt' -f $filenaamMSILog))
$regkeyRoot = ('HKLM:\Software\{0}' -f $RegisterDetectionroot)
$regkeyApp = ('{0}\{1}' -f $regkeyRoot, $appNaam)
$excode = $null


# Create log direcotry if needed.
if (!(Test-Path -Path $logdir -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path $logdir -Force -Confirm:$false)
}

#Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path ('{0}\dll' -f $logdir) -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\dll' -f $logdir) -Force -Confirm:$false)
}

#Create registry root if needed
if (!(Test-Path -Path $regkeyRoot -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regkeyRoot -ItemType Key -Force -Confirm:$false)
}

# Creates application Key in registry
if (!(Test-Path -Path $regkeyApp -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regkeyApp -ItemType Key -Force -Confirm:$false)
}

#region PowershellFunctions
function fDetectionInRegistry
{
   ### This function handles the detection method in the registry.
   ### It will create a key in the registry with the name of the application. 
   #### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
   ### With Versie value en een [BOOL]Succes waarde
   ### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
   param
   (
      [Parameter(Mandatory,HelpMessage = 'Add help message for user')]
      [bool]$Succes
   )
	
   try
   {
      $AppRegVersie = (Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop)
           
      if ($AppRegVersie.Versie -ne $versie) 
      {
         $null = (Set-ItemProperty -Path $regkeyApp -Name Versie -Value $versie -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regkeyApp -Name Versie -Value $versie -PropertyType string -Force -Confirm:$false)
   }

   try
   {
      $AppRegSucces = (Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop)

      if ($AppRegSucces.Succes -ne $Succes) 
      {
         $null = (Set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string -Force -Confirm:$false)
   }
}
#endregion PowershellFunctions

# Setup Script Location
$null = (Set-Location -Path $PSScriptRoot)
      
# Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -PathType Leaf -ErrorAction SilentlyContinue))
{
   $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -Confirm:$false -Force)
}

## Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' | Select-Object -ExpandProperty Name | Where-Object -Property {
      ($_ -eq 'IntunePrepTool' )
} -EQ -Value $null)
{
   $null = (New-Item -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' -Name 'IntunePrepTool' -ErrorAction SilentlyContinue -Force -Confirm:$false)
}

try
{
   $TypesSupported = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -ErrorAction Stop)

   if ($TypesSupported.TypesSupported -ne '7') 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -PropertyType DWORD -Force -Confirm:$false)
}

try
{
   $EventMessageFile = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -ErrorAction Stop)
              
   if ($EventMessageFile.EventMessageFile -ne ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir)) 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -PropertyType string -Force -Confirm:$false)
}

# New EventLog when needed.
try
{
   #TODO: Check if $null is the better option. The variable is assigned, but it is never used... Right?
   $checkEventLog = (Get-EventLog -LogName 'IntunePrepTool' -Source 'IntunePrepTool' -ErrorAction Stop)
}
catch
{
   $null = (New-EventLog -MessageResourceFile ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -LogName 'IntunePrepTool' -Source 'IntunePrepTool')
   [Diagnostics.EventLog]::CreateEventSource('IntunePrepTool', 'IntunePrepTool')
}

# Start; Write Log file
$null = (Start-Transcript -Path $logfile)
$null = (Set-Location -Path $PSScriptRoot)

try
{
   $startPMSI = (Start-Process -FilePath i.cmd -Wait -WindowStyle Hidden -ErrorAction stop)
   Write-Host -Object $startPMSI
   $msilog = (Get-Content -Path $logfileMSI)

   if ($msilog -eq $null) 
   {
      Write-Error -Message ("Can't read MSIEXEC logs Use: /l*v {0} in msiexec commando" -f $logfileMSI)
   }
   Else
   {
      foreach ($ml in $msilog)
      {
         if ($ml -like '*APPCOMPAT: looking for appcompat database entry with ProductCode*')
         {
            $msiUninstallcode = $ml.Split('{')[1].Split('}')[0]
         }
      }

      Write-Host -Object 'Script started i.cmd' -ForegroundColor Green
      Write-Host -Object 'Possible uninstall command is:' -ForegroundColor Green
      Write-Host -Object ''
      Write-Host -Object ('msiexec /x {{{0}}} /qn' -f $msiUninstallcode) -ForegroundColor Green
      Write-Host -Object ''
      Write-Host -Object 'MSIEXEC Log start:.:' -ForegroundColor Green
      Write-Host -Object $logfileMSI -ForegroundColor Green
      $MSILOGS = (Get-Content -Path $logfileMSI )
      $MSILOGS
      Write-Host -Object 'See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes' -ForegroundColor Green
   }
	
   if ($msiUninstallcode -eq $null) 
   {
      $excode = 1 
      Write-Error -Message ("Can't find uninstall code in MSIEXEC logs Use: /l*v {0} in msiexec commando" -f $logfileMSI)
   }
   Else
   {
      Write-Host -Object 'Script started i.cmd' -ForegroundColor Green
      Write-Host -Object 'Possible uninstall command is:' -ForegroundColor Green
      Write-Host -Object ''
      Write-Host -Object ('msiexec /x {{{0}}} /qn' -f $msiUninstallcode) -ForegroundColor Green
      Write-Host -Object ''
      Write-Host -Object 'MSIEXEC Log start:.:' -ForegroundColor Green
      Write-Host -Object $logfileMSI -ForegroundColor Green
      $MSILOGS = (Get-Content -Path $logfileMSI )
      $MSILOGS
      Write-Host -Object 'See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes' -ForegroundColor Green
      $excode = 0
   }
}
catch
{
   Write-Host -Object 'Installation failed' -ForegroundColor Red -BackgroundColor Blue
   Write-Host -Object ('Error message: {0}' -f $_.Exception.Message) -ForegroundColor Red -BackgroundColor Blue
   Write-Host -Object 'MSIEXEC Log start:.:' -ForegroundColor Red -BackgroundColor Blue
   Write-Host -Object $logfileMSI -ForegroundColor Red -BackgroundColor Blue
   $MSILOGS = (Get-Content -Path $logfileMSI )
   $MSILOGS
   Write-Host -Object 'See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes' -ForegroundColor Red -BackgroundColor Blue

   $excode = 1
}
try
{
   #Searches for startmenu items created the last 10 minutes
   $startmenuItems = ((Get-ChildItem -Path 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs' -Recurse -Include *.lnk | Sort-Object -Property LastWriteTime -ErrorAction Stop | Where-Object -FilterScript {
            ($_.LastWriteTime -ge (Get-Date).AddMinutes(-10) )
   }).VersionInfo.FileName)

   foreach ($startmenuI in $startmenuItems)
   {
      Write-Host -Object "`r`n"
      Write-Host -Object 'The last 10 minutes a startmenu *.lnk file was created.' -ForegroundColor Yellow
      Write-Host -Object "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
      Write-Host -Object "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
      Write-Host -Object "`r`n"
   }
}
catch
{
   Write-Host -Object 'Error looking for *.lnk files in startmenu' -ForegroundColor Yellow
}
try
{
   #Searches for Desktop items created the last 10 minutes
   $startmenuItems = ((Get-ChildItem -Path 'C:\Users\Public\Desktop' -Recurse -Include *.lnk | Sort-Object -Property LastWriteTime -ErrorAction Stop | Where-Object -FilterScript {
            ($_.LastWriteTime -ge (Get-Date).AddMinutes(-10) )
   }).VersionInfo.FileName)

   foreach ($startmenuI in $startmenuItems)
   {
      Write-Host -Object "`r`n"
      Write-Host -Object 'The last 10 minutes a Desktop *.lnk file was created.' -ForegroundColor Yellow
      Write-Host -Object "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
      Write-Host -Object "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
      Write-Host -Object "`r`n"
   }
}
catch
{
   Write-Host -Object 'Error looking for *.lnk files on the Desktop' -ForegroundColor Yellow
}

Write-Host -Object 'Possible uninstall command is:' -ForegroundColor Green
Write-Host -Object ''
Write-Host -Object ('msiexec /x {{{0}}} /qn' -f $msiUninstallcode) -ForegroundColor Green
Write-Host -Object ''

### Place extra actions here:

<#----Enf of extra actions--#>

# Stop; Write Log file
$null = (Stop-Transcript -ErrorAction SilentlyContinue)
$split = [regex]::Escape('**********************')
$lastRun = ((Get-Content -Path $logfile -Raw) -split ($split))[-3]

if ($lastRun.Length -gt 30000)
{
   $lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) 
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Error', 0x3)
}
else 
{
   fDetectionInRegistry -succes $true 
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Information', 0x3)
}

# Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs') 
{
   if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -PathType Leaf -ErrorAction SilentlyContinue) 
   {
      $null = (Remove-Item -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Confirm:$false -Force)
   } 

   $null = (Copy-Item -Path 'c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx' -Destination 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
}
'@
   
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $logdir = $config_logfoldertarget
   $RegisterDetectionroot = 'Intune_' + $config_customername
   $versie = $msi_versie_textbox1.text
   $MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
   $appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
   $MSIPARSInput = '"' + $msi_install_par_textbox3.Text + '"'
   $msi_installFile = $msi_installFile.Replace('"!!AppNaam!!"', $appnaam)
   $msi_installFile = $msi_installFile.Replace('!!logdir!!', $logdir)
   $msi_installFile = $msi_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
   $msi_installFile = $msi_installFile.Replace('!!versie!!', $versie)
   $msi_installFile = $msi_installFile.Replace('"!!MSIBestand!!"', $MSIbestand)
   #$msi_installFile = $msi_installFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
   $exepnaam = $msi_packagenaam_textbox1.text
   $exeversie = $versie
   $outputDirectory = $config_packagefolder
   
   try
   {
      $jjmsii = $msi_install_par_textbox3.Text
      $null = ($jjmsii | Out-File -FilePath ('{0}\{1}\{2}\source\i.cmd' -f $outputDirectory, $exepnaam, $exeversie) -Encoding ascii -Force -ErrorAction Stop)
      $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\{1}\{2}\source\IntunePrepTool_msgfile.dll' -f $outputDirectory, $exepnaam, $exeversie) -Confirm:$false)
      $null = ($msi_installFile | Out-File -FilePath ('{0}\{1}\{2}\source\install.ps1' -f $outputDirectory, $exepnaam, $exeversie) -Force -ErrorAction Stop)
      $msi_output_textbox1.AppendText("`nInstall.ps1 created `r`n")
      $msi_output_textbox1.AppendText("`ni.cmd created `r`n")
      $msi_output_textbox1.AppendText("`nTest your script. If needed, save in Powershell_ISE directly. `r`n")
      $msi_output_textbox1.AppendText("`nAfter succesvol installation you can see the uninstall string in Powershell_ISE `r`n")
      $msi_output_textbox1.AppendText("`nIf this is not working. Check Tab Tools for uninstall strings `r`n")
   }
   catch
   {
      $msi_output_textbox1.AppendText("`nInstall.ps1 NOT created `r`n")
   }
   
   $msi_test_install_button1.Enabled = $true
   $msi_test_install_button1.Visible = $true
}

$msi_packagenaam_textbox1_TextChanged = {
   if ($config_listbox.SelectedItem -eq $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
   }
}

$msi_test_install_button1_Click = {
   if ([Windows.Forms.MessageBox]::Show('Do you want to test?... ', 'Test', [Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
   {
      $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
      $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
      $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
      $fid = $config_packagefolder
      $outputDirectory = $fid
      $msipnaam = $msi_packagenaam_textbox1.text
      $msiversie = $msi_versie_textbox1.text
      & "$env:PSHome\powershell_ise.exe" -file "$outputDirectory\$msipnaam\$msiversie\source\install.ps1"
   }
}

$Tools_Uninstall_String_button_Click = {
   $tools_datagridview1.Enabled = $false
   $tools_datagridview1.Visible = $false
   $tools_Output_textbox1.Enabled = $true
   $tools_Output_textbox1.Visible = $true
   $tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
   $InstallsUninstallString = (Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*' | Select-Object -Property DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object -Property InstallDate)
   
   foreach ($ius in $InstallsUninstallString)
   {
      $tools_uninstallstring_textbox2.AppendText("`r`n")
      $tools_uninstallstring_textbox2.AppendText('DisplayName: ' + $ius.DisplayName + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('DisplayVersion: ' + $ius.DisplayVersion + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('InstallDate: ' + $ius.InstallDate + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('Uninstallstring: ' + $ius.UninstallString + "`r`n")
   }
}

$tools_uninstallstring_Syswow_button_Click = {
   $tools_datagridview1.Enabled = $false
   $tools_datagridview1.Visible = $false
   $tools_Output_textbox1.Enabled = $true
   $tools_Output_textbox1.Visible = $true
   $tools_uninstallstring_textbox2.Text = "Here are alle the uninstall strings on your computer. Sorted by date `r`n"
   $InstallsUninstallString = (Get-ItemProperty -Path 'HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*' | Select-Object -Property DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object -Property InstallDate)
   
   foreach ($ius in $InstallsUninstallString)
   {
      $tools_uninstallstring_textbox2.AppendText("`r`n")
      $tools_uninstallstring_textbox2.AppendText('DisplayName: ' + $ius.DisplayName + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('DisplayVersion: ' + $ius.DisplayVersion + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('InstallDate: ' + $ius.InstallDate + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('Uninstallstring: ' + $ius.UninstallString + "`r`n")
   }
}

$buttonUninstallstringWowAA32Node_Click = {
   $tools_uninstallstring_textbox2.Text = "Hier volgen alle uninstallString sort by datum WowAA32Node `r`n"
   $InstallsUninstallString = (Get-ItemProperty -Path 'HKLM:\Software\WowAA32Node\Microsoft\Windows\CurrentVersion\Uninstall\*' | Select-Object -Property DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object -Property InstallDate)
   
   foreach ($ius in $InstallsUninstallString)
   {
      $tools_uninstallstring_textbox2.AppendText("`r`n")
      $tools_uninstallstring_textbox2.AppendText('DisplayName: ' + $ius.DisplayName + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('DisplayVersion: ' + $ius.DisplayVersion + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('InstallDate: ' + $ius.InstallDate + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('Uninstallstring: ' + $ius.UninstallString + "`r`n")
   }
}

$msi_button5CreateIntunewinFile_Click = {
   Set-Location -Path $PSScriptRoot
   [void][Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $msipnaam = $msi_packagenaam_textbox1.text
   $msiversie = $msi_versie_textbox1.text
   $outputDirectory = $config_packagefolder
   $RegisterDetectionroot = 'Intune_' + $config_customername
   $msi_output_textbox1.Text = 'Creation of Intunewin file has started. Please wait.'
   & .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
   $null = (Rename-Item -Path ('{0}\{1}\{2}\output\install.intunewin' -f $outputDirectory, $msipnaam, $msiversie) -NewName ('{0}\{1}\{2}\output\{3}.intunewin' -f $outputDirectory, $msipnaam, $msiversie))
   $msi_output_textbox1.AppendText("`nIntunewin file created: `r`n")
   $msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
   $msi_output_textbox1.AppendText("`r`n")
   $msi_output_textbox1.AppendText("Install command is: `r`n")
   $msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
   $msi_output_textbox1.AppendText("un-install command is: `r`n")
   $msi_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
   $msi_output_textbox1.AppendText("Detection registry is: `r`n")
   $regkeyRoot = ('HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\{0}\' -f $RegisterDetectionroot)
   $regkeyApp = ('{0}{1}\' -f $regkeyRoot, $msipnaam)
   $regkeyApp
   $msi_output_textbox1.AppendText("$regkeyApp `r`n")
   $msi_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
   $msi_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
   $msi_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
   $msi_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
   $msi_output_textbox1.AppendText("Please reopen tool to make another MSI package `r`n")
   
   class CSNIntuneWinPackageConfig {
      [string]$IntuneWinFile
      [string]$DisplayName
      [string]$Publisher
      [string]$AppVersion
      [string]$reglocation
      [string]$regValue
      [string]$installCMD
      [string]$uninstallCMD
   }
   $CSNIntuneWinPackageConfig = $null
   
   $CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
         IntuneWinFile = ('{0}.intunewin' -f $msipnaam)
         DisplayName   = $msipnaam
         Publisher     = $config_customername
         AppVersion    = $msiversie
         
         reglocation   = $regkeyApp
         regValue      = 'Versie'
         installCMD    = 'powershell -executionpolicy bypass -file install.ps1'
         uninstallCMD  = 'powershell -executionpolicy bypass -file uninstall.ps1'
      })
   $null = ($CSNIntuneWinPackageConfig | Export-Csv -Path ('{0}\{1}\{2}\output\config.csv' -f $outputDirectory, $msipnaam, $msiversie) -NoTypeInformation)
   $config_csv_openfiledialog1.InitialDirectory = ('{0}\{1}\{2}\output\' -f $outputDirectory, $msipnaam, $msiversie)
   $msi_output_textbox1.AppendText("Config.csv written to: `r`n")
   $msi_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
   $msi_output_textbox1.AppendText("  `r`n")
   $msi_buttonUploadLogoPNG.Enabled = $true
   $msi_buttonUploadLogoPNG.Visible = $true
   $msi_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
   $msi_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$msi_OpenSourceDir_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $msipnaam = $msi_packagenaam_textbox1.text
   $msiversie = $msi_versie_textbox1.text
   Invoke-Item -Path ('{0}\{1}\{2}\source\' -f $config_packagefolder, $msipnaam, $msiversie)
}

$msi_button3CreateUninstallScri_Click = {
   $msi_uninstallFile = @'
<#	
      .NOTES
      ===========================================================================
      Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
      Created on:   	21-5-2023 17:57
      Created by:   	Rink Turksma
      Organization: 	
      Filename:     	uninstall.ps1
      ===========================================================================
      .DESCRIPTION
      Parameters will be filled by IntunePrepTool.
#>

$appNaam = '!!AppNaam!!'
$versie = '!!versie!!'
<#

      #$MSIbestand = "!!MSIBestand!!"
      #$MSIparameters = "!!MSIPARMS!!"
      Please see u.cmd for MSI parameters used by this script.

#>
$logdir = '!!logdir!!'
$RegisterDetectionroot = '!!RegisterDetectionroot!!'
#Dyn vars
$logfile = $(Join-Path -Path $logdir  -ChildPath ('{0}{1}.txt' -f $appNaam, $versie))
$filenaamMSILog = $appNaam + $versie + 'MSI'
$logfileMSI = $(Join-Path -Path $logdir  -ChildPath ('{0}.txt' -f $filenaamMSILog))
$regkeyRoot = ('HKLM:\Software\{0}' -f $RegisterDetectionroot)
$regkeyApp = ('{0}\{1}' -f $regkeyRoot, $appNaam)
$excode = $null

# Creates Log directory if needed.
if (!(Test-Path -Path $logdir -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path $logdir -Confirm:$false)
}

# Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path ('{0}\dll' -f $logdir) -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\dll' -f $logdir) -Confirm:$false)
}

# Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot))
{
   $null = (New-Item -Path $regkeyRoot -ItemType Key -Confirm:$false)
}

# Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp))
{
   $null = (New-Item -Path $regkeyApp -ItemType Key -Force -Confirm:$false)
}

#Function for Detection in Registry
function fDetectionInRegistry
{
   param
   (
      [Parameter(Mandatory,HelpMessage = 'Add help message for user')]
      [bool]$Succes
   )
	
   try
   {
      $AppRegVersie = (Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop)

      if ($AppRegVersie.Versie -ne $versie) 
      {
         $null = (Set-ItemProperty -Path $regkeyApp -Name Versie -Value $versie -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regkeyApp -Name Versie -Value $versie -PropertyType string -Force -Confirm:$false)
   }

   try
   {
      $AppRegSucces = (Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop)

      if ($AppRegSucces.Succes -ne $Succes) 
      {
         $null = (Set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string -Force -Confirm:$false)
   }
}

# Setup Script Location
$null = (Set-Location -Path $PSScriptRoot)

# Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -PathType Leaf))
{
   $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -Confirm:$false)
}

# Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' | Select-Object -ExpandProperty Name | Where-Object -Property {
      ($_ -eq 'IntunePrepTool' )
} -EQ -Value $null)
{
   $null = (New-Item -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' -Name 'IntunePrepTool' -ErrorAction SilentlyContinue -Force -Confirm:$false)
}

try
{
   $TypesSupported = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -ErrorAction Stop)

   if ($TypesSupported.TypesSupported -ne '7') 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -PropertyType DWORD -Force -Confirm:$false)
}

try
{
   $EventMessageFile = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -ErrorAction Stop)
   if ($EventMessageFile.EventMessageFile -ne ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir)) 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -PropertyType string -Force -Confirm:$false)
}

# New EventLog when needed.
try
{
   # Variable is assigned, but never used! Is $null the better option here?
   $checkEventLog = (Get-EventLog -LogName 'IntunePrepTool' -Source 'IntunePrepTool' -ErrorAction Stop)
}
catch
{
   $null = (New-EventLog -MessageResourceFile ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -LogName 'IntunePrepTool' -Source 'IntunePrepTool')
   [Diagnostics.EventLog]::CreateEventSource('IntunePrepTool', 'IntunePrepTool')
}

# Start Script
$null = (Start-Transcript -Path $logfile)

try
{
   $startPMSI = (Start-Process -FilePath u.cmd -Wait -ErrorAction stop -WindowStyle Hidden)
   Write-Host -Object $startPMSI
   Write-Host -Object 'Uninstall done!' -ForegroundColor Green
   Write-Host -Object 'Please check MSIEXEC log below' -ForegroundColor Green
   Write-Host -Object $logfileMSI -ForegroundColor Green
   $MSILOGS = (Get-Content -Path $logfileMSI )
   $MSILOGS
   Write-Host -Object 'See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes' -ForegroundColor Green
   $excode = 0
}
catch
{
   Write-Host 'Uninstall failed' --ForegroundColor Red -BackgroundColor Blue
   Write-Host -Object "Error message: $($_.Exception.Message)" -ForegroundColor Red -BackgroundColor Blue
   Write-Host -Object 'See log file from MSI why this is not working.:' -ForegroundColor Red -BackgroundColor Blue
   Write-Host -Object $logfileMSI -ForegroundColor Red -BackgroundColor Blue
   $MSILOGS = (Get-Content -Path $logfileMSI )
   $MSILOGS
   Write-Host -Object 'See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes' -ForegroundColor Red -BackgroundColor Blue
   $excode = 1


   $startPMSI
   $excode = 1
}


# End Script
$null = (Stop-Transcript -ErrorAction SilentlyContinue)
$split = [regex]::Escape('**********************')
$lastRun = ((Get-Content -Path $logfile -Raw) -split ($split))[-3]

if ($lastRun.Length -gt 30000)
{
   $lastRun = $lastRun.Substring(0, 30000) + "`n`n MSIEXEC log complete: $logfileMSI"
}

if ($excode -eq 1) 
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Error', 0x3)
}
else 
{
   $null = (Remove-Item -Path $regkeyApp -Force -Confirm:$false)
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Information', 0x3)
}

# Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs') 
{
   if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -PathType Leaf) 
   {
      $null = (Remove-Item -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
   } 

   $null = (Copy-Item -Path 'c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx' -Destination 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
}
'@
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $logdir = $config_logfoldertarget
   $RegisterDetectionroot = 'Intune_' + $config_customername
   $versie = $msi_versie_textbox1.text
   $MSIbestand = '"' + $msi_openfiledialog1.SafeFileName + '"'
   $appnaam = '"' + $MSI_packagenaam_textbox1.text + '"'
   $MSIPARSInput = '"' + $msi_uninstall_par_textbox1.Text + '"'
   $msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
   $msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
   $msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
   $msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
   $msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
   $msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
   $exepnaam = $msi_packagenaam_textbox1.text
   $exeversie = $versie
   $outputDirectory = $config_packagefolder
   
   try
   {
      $jjmsii = $msi_uninstall_par_textbox1.text
      $null = ($jjmsii | Out-File -FilePath ('{0}\{1}\{2}\source\u.cmd' -f $outputDirectory, $exepnaam, $exeversie) -Encoding ascii -Force -ErrorAction Stop)
      $null = ($msi_uninstallFile | Out-File -FilePath ('{0}\{1}\{2}\source\uninstall.ps1' -f $outputDirectory, $exepnaam, $exeversie) -Force -ErrorAction Stop)
      $msi_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
      $msi_output_textbox1.AppendText("`nu.cmd created `r`n")
      $msi_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
   }
   catch
   {
      $msi_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
   }
   
   $msi_button4TestUninstallPowers.Enabled = $true
   $msi_button4TestUninstallPowers.Visible = $true
   $msi_button5CreateIntunewinFile.Enabled = $true
   $msi_button5CreateIntunewinFile.Visible = $true
}

$msi_button4TestUninstallPowers_Click = {
   if ([Windows.Forms.MessageBox]::Show('Do you want to test deinstallation?... ', 'Test', [Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
   {
      $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
      $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
      $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
      $fid = $config_packagefolder
      $outputDirectory = $fid
      $msipnaam = $msi_packagenaam_textbox1.text
      $msiversie = $msi_versie_textbox1.text
      & "$env:PSHome\powershell_ise.exe" -file "$outputDirectory\$msipnaam\$msiversie\source\uninstall.ps1"
   }
}

$Reset_button1_Click = {
   Clear-Host
}

$upload_LoadConfig_button1_Click = {
   if ($config_listbox.SelectedItem -eq $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
   }
   else
   {
      $config_csv_openfiledialog1.ShowDialog()
      [string]$config_csv_path = $config_csv_openfiledialog1.FileNames
      $ConfigCSVImport = (Import-Csv -Path $config_csv_path)
      $itwnf = $ConfigCSVImport.IntuneWinFile
      $filepath = $config_csv_path.TrimEnd('config.csv')
      $itwnffilepath = $filepath + $itwnf
      $upload_IntuneWinFile_textbox1.Text = $itwnffilepath
      $upload_DisplayName_textbox1.Text = $ConfigCSVImport.DisplayName
      $upload_Publisher_textbox1.Text = $ConfigCSVImport.Publisher
      $upload_AppVersion_textbox1.Text = $ConfigCSVImport.AppVersion
      $upload_reglocation_textbox1.Text = $ConfigCSVImport.reglocation
      $upload_regValue_textbox1.Text = $ConfigCSVImport.regValue
      $upload_installCMD_textbox1.Text = $ConfigCSVImport.installCMD
      $upload_uninstallCMD_textbox1.Text = $ConfigCSVImport.uninstallCMD
      
      if (!(test-path -Path ('{0}\Logo.png' -f $filepath) -PathType Leaf -ErrorAction SilentlyContinue))
      {
         [void][Windows.Forms.MessageBox]::Show('Please use the button: Upload Logo after creating Intunewin file', 'Upload Logo first')
         $upload_logo_button2.Enabled = $true
         $upload_logo_button2.Visible = $true
      }
   }
}

$upload_upload_button1_Click = {
   $uploadIntuneFile = @'

<#	
      .NOTES
      ===========================================================================
      Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2022 v5.8.210
      Created on:   	26/02/2023 14:05
      Created by:   	Rink Turksma
      Organization: 	
      Filename:     	UploadIntune.ps1
      ===========================================================================
      .DESCRIPTION
      Params are used from IntunePrepTool
      Uses Powershell modules MSAL.PS from Jason Thompson and IntuneWin32App from Nickolaj Andersen
		
#>

#Requires -RunAsAdministrator
#Installatie Powershell Modules
Write-Host -Object 'Script will install IntuneWin32App powershell module from the Powershell Galery if needed.' -ForegroundColor Green

if (Get-Module -ListAvailable -Name IntuneWin32App -ErrorAction SilentlyContinue) 
{
   $null = (Import-Module -Name IntuneWin32App -Force -NoClobber)
}
else 
{
   $null = (Install-Module -Name IntuneWin32App -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -MinimumVersion '1.4.4' -AllowClobber -Repository PSGallery)
   $null = (Import-Module -Name IntuneWin32App -Force -NoClobber)
}
  
Write-Host -Object 'Script will update IntuneWin32App when needed' -ForegroundColor Green
   
if ((Get-Module -ListAvailable -Name IntuneWin32App -ErrorAction SilentlyContinue).Version -lt '1.4.4') 
{
   $null = (Update-Module -Name IntuneWin32App -Confirm:$False -Force -MinimumVersion '1.4.4')
}
else 
{
   Write-Host -Object 'IntuneWin32App module already on version 1.4.4' -ForegroundColor Green
}
     
Write-Host -Object 'Script will install MSAL.PS powershell module from the Powershell Galery if needed.' -ForegroundColor Green

# Mind the Gap: MSAL.PS is depricated.
if (Get-Module -ListAvailable -Name MSAL.PS -ErrorAction SilentlyContinue) 
{
   $null = (Import-Module -Name MSAL.PS -Force -NoClobber)
}
else 
{
   $null = (Install-Module -Name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -AllowClobber -Repository PSGallery)
   $null = (Import-Module -Name MSAL.PS -Force -NoClobber)
}
        
[string]$config_csv_path = '!!CONFIGCSV!!'
$tenantURL = '!!TENANTURL!!'
$dep = '!!DEPENDENCY!!'
$AvailableAllUsers = '!!AvailableAllUsers!!'
$RequiredAllDevices = '!!RequiredAllDevices!!'
$SetupLikeOldVersion = '!!SetupLikeOldVersion!!'
Write-Host -Object 'First logon with the Microsoft Tenant'
Write-Host -Object "`r`n"
Write-Host -Object "`r`n"
Connect-MSIntuneGraph -TenantID $tenantURL -Interactive
$ConfigCSVImport = (Import-Csv -Path $config_csv_path)
$itwnf = $ConfigCSVImport.IntuneWinFile
$filepath = $config_csv_path.TrimEnd('config.csv')
$itwnffilepath = $filepath + $itwnf
$regKeyApp = $ConfigCSVImport.regLocation
$versie = $ConfigCSVImport.AppVersion
$dnam = $ConfigCSVImport.DisplayName
$publ = $ConfigCSVImport.Publisher
$icmd = $ConfigCSVImport.installCMD
$ucmd = $ConfigCSVImport.uninstallCMD
$logoaanwezig = (Get-ChildItem -Path ('{0}\logo.png' -f $filepath))

if ($null -eq $logoaanwezig) 
{
   Write-Host -Object 'No Logo.PNG found in Output Directory' -ForegroundColor Green
   Write-Host -Object "`r`n"
   Write-Host -Object "`r`n"
}
else
{
   $icon = (New-IntuneWin32AppIcon -FilePath ('{0}\logo.png' -f $filepath))
   $DetectionRule = (New-IntuneWin32AppDetectionRuleRegistry -StringComparison -KeyPath $regKeyApp -ValueName 'Versie' -StringComparisonOperator equal -StringComparisonValue $versie)
   $RequirementRule = (New-IntuneWin32AppRequirementRule -Architecture 'All' -MinimumSupportedWindowsRelease 'W10_20H2')
   Write-Host -Object 'We will first check if there are any apps already available in Intune with the same DisplayName' -ForegroundColor Green
   Write-Host -Object "`r`n"
   Write-Host -Object "`r`n"
   $Win32AppEvtVorigeVersies = (Get-IntuneWin32App -DisplayName $dnam)
              
   if ($Win32AppEvtVorigeVersies -ne $null)
   {
      Write-Host -Object 'Already version(s) found ' -ForegroundColor Green
      Write-Host -Object "`r`n"
      Write-Host -Object "`r`n"
      $evtvversie = $Win32AppEvtVorigeVersies.DisplayVersion
      Write-Host -Object $evtvversie
      $alversieAppAanwezig = $true
      Write-Host -Object 'After uploading new version you can choose Superseedence in this script' -ForegroundColor Green
      Write-Host -Object "`r`n"
      Write-Host -Object "`r`n"
   }
   else
   {
      $alversieAppAanwezig = $False
   }
	
   Write-Host -Object 'We will upload to Intune now' -ForegroundColor Green
   Write-Host -Object "`r`n"
   Write-Host -Object "`r`n"
   # TODO: How about the Owner, Developer and URI parameters?
   $Win32App = (Add-IntuneWin32App -FilePath $itwnffilepath -DisplayName $dnam -Description 'Upload package by IntunePrepTool' -Publisher $publ -AppVersion $versie -Icon $icon -InstallExperience 'system' -RestartBehavior 'suppress' -DetectionRule $DetectionRule -InstallCommandLine $icmd -UninstallCommandLine $ucmd -RequirementRule $RequirementRule)
   Write-Host -Object 'If all is good the app will now be available in Intune' -ForegroundColor Green
   Write-Host -Object "`r`n"
   Write-Host -Object "`r`n"
	
   if ($SetupLikeOldVersion -eq $true)
   {
      <#
            $response = read-host "Press q to do nothing, Any other key for setting up dependencies. Dependency will be the same if older version. (When exists)"
            $niksdoen = $response -eq "q"
            if ($niksdoen -eq $true) { write-host "Ok.. We won't do this" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
            else
            {
            if ($dep -notlike $null)
            {
            $dependency = Get-IntuneWin32App | Where-Object { $_.Displayname -like $dep }
            $dep2 = New-IntuneWin32AppDependency -DependencyType AutoInstall -ID $dependency.Id
            Add-IntuneWin32AppDependency -ID $Win32App.Id -Dependency $dep2 -Confirm:$false
            write-host "Dependency done"; Write-host "`r`n"; Write-host "`r`n";
            }
            else { write-host "No dependency found in older version" -ForegroundColor Green; Write-host "`r`n"; Write-host "`r`n"; }
            }
      #>
		
      if ($alversieAppAanwezig -eq $False) 
      {
         Write-Host -Object 'Because there where no older versions of this software in Intune you have to do the assingments in the Intune portal' -ForegroundColor Green
         Write-Host -Object "`r`n"
         Write-Host -Object "`r`n"
      }
      else
      {
         foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
         {
            Write-Host -Object 'We will now try to setup assignments ' -ForegroundColor Green
            Write-Host -Object "`r`n"
            Write-Host -Object "`r`n"
            $assinmentVorigeVersie = (Get-IntuneWin32AppAssignment -ID $vorigeversie.id -ErrorAction SilentlyContinue)
            $evtvversie = $vorigeversie.DisplayVersion
				
            if ($assinmentVorigeVersie -eq $null) 
            {
               Write-Host -Object ('Older version: {0} has no assignments' -f $evtvversie) -ForegroundColor Green
               Write-Host -Object "`r`n"
               Write-Host -Object "`r`n"
            }
            else
            {
               Write-Host -Object ''
               Write-Host -Object "`r`n"
               Write-Host -Object "`r`n"
               $response = (Read-Host -Prompt ('Press q to do nothing, Any other key to setup assignments like: {0}' -f $evtvversie))
               $niksdoen = $response -eq 'q'

               if ($niksdoen -eq $true) 
               {
                  Write-Host -Object 'Ok.. Then you have to setup the assignments in Intune' -ForegroundColor Green
                  Write-Host -Object "`r`n"
                  Write-Host -Object "`r`n"
               }
               else
               {
                  Write-Host -Object 'Ok .. We will fix the assignments for you!' -ForegroundColor Green
                  Write-Host -Object "`r`n"
                  Write-Host -Object "`r`n"
                  $null = (Remove-IntuneWin32AppAssignment -ID $vorigeversie.ID -Confirm:$False)

                  try
                  {
                     $null = (Add-IntuneWin32AppAssignmentGroup -Intent $assinmentVorigeVersie.intent -Include -ID $Win32App.id -GroupID $assinmentVorigeVersie.Target.groupId -ErrorAction Stop)
                  }
                  catch
                  {
                     Write-Host -Object 'Something went wrong. You will have to do this in Intune' -ForegroundColor Green
                  }
               }
            }
         }
			
         foreach ($vorigeversie in $Win32AppEvtVorigeVersies)
         {
            $response = (Read-Host -Prompt 'Press q to do nothing, Any other key to setup Supersedence  ')
            $niksdoen = $response -eq 'q'

            if ($niksdoen -eq $true) 
            {
               Write-Host -Object 'Ok.. We are doing nothing here' -ForegroundColor Green
               Write-Host -Object "`r`n"
               Write-Host -Object "`r`n"
            }
            else
            {
               Write-Host -Object 'Ok .. We will try to fix superseedence' -ForegroundColor Green
               Write-Host -Object "`r`n"
               Write-Host -Object "`r`n"
               Write-Host -Object 'We will fix superseedence for:' -ForegroundColor Green
               $vorigeversie.displayVersion
               $superseede = (New-IntuneWin32AppSupersedence -ID $vorigeversie.id -SupersedenceType Replace -Confirm:$False)
               $bestaandeSuperSedence = $null
               $bestaandeSuperSedence = (Get-IntuneWin32AppSupersedence -ID $vorigeversie.id)
               if ($bestaandeSuperSedence -ne $null) 
               {
                  $null = (Remove-IntuneWin32AppSupersedence -ID $bestaandeSuperSedence -Confirm:$False)
               }

               $null = (Add-IntuneWin32AppSupersedence -ID $Win32App.id -Supersedence $superseede -Confirm:$False)
            }
         }
      }
   }
              
   if ($AvailableAllUsers -eq $true)
   {
      Write-Host -Object 'We will now setup assignment' -ForegroundColor Green
      Write-Host -Object "`r`n"
      Write-Host -Object "`r`n"
      $null = (Add-IntuneWin32AppAssignmentAllUsers -ID $Win32App.Id -Intent available -Notification showAll -Confirm:$False)
   }
	
   if ($RequiredAllDevices -eq $true)
   {
      Write-Host -Object 'We will now setup assignment' -ForegroundColor Green
      Write-Host -Object "`r`n"
      Write-Host -Object "`r`n"
      $null = (Add-IntuneWin32AppAssignmentAllDevices -ID $Win32App.Id -Intent required -Notification hideAll -Confirm:$False)
   }
}
'@
   [string]$config_csv_path = $config_csv_openfiledialog1.FileNames
   $tenanturl = $upload_tenantURL_textbox.text
   $depWin = $upload_dep_textbox1.Text
   $uploadIntuneFile = $uploadIntuneFile.Replace('!!CONFIGCSV!!', $config_csv_path)
   $uploadIntuneFile = $uploadIntuneFile.Replace('!!TENANTURL!!', $tenanturl)
   $uploadIntuneFile = $uploadIntuneFile.Replace('!!DEPENDENCY!!', $depWin)
   
   if ($Upload_beschikbaar_all_users_checkbox1.Checked -eq $true)
   {
      $uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $true)
   }
   else
   {
      $uploadIntuneFile = $uploadIntuneFile.Replace('!!AvailableAllUsers!!', $false)
   }
   
   if ($upload_checkboxRequiredForAllDevice.Checked -eq $true)
   {
      $uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $true)
   }
   else
   {
      $uploadIntuneFile = $uploadIntuneFile.Replace('!!RequiredAllDevices!!', $false)
   }
   
   if ($upload_checkboxSetupAssignmentLikeP.Checked -eq $true)
   {
      $uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $true)
   }
   else
   {
      $uploadIntuneFile = $uploadIntuneFile.Replace('!!SetupLikeOldVersion!!', $false)
   }
   
   $filepath = $config_csv_path.TrimEnd('config.csv')
   $null = ($uploadIntuneFile | Out-File -FilePath ('{0}\uploadIntune.ps1' -f $filepath) -Force)
   
   if ([Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE?; After uploading: Please reopen IntunePrepTool to create another package ', 'Upload to Intune', [Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
   {
      & "$env:PSHome\powershell_ise.exe" -file ('{0}\uploadIntune.ps1' -f $filepath)
   }
}

$winget_upload_logo_button1_Click = {
   $UploadLogo_openfiledialog1.ShowDialog()
   [string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
   $wid = $winget_WingetID_textbox1.text
   $vid = $versie_textbox2.Text
   $fid = $config_packagefolder_textbox.text
   $null = (Copy-Item -Path $logo_org_path -Destination ('{0}\{1}\{2}\Output\logo.png' -f $fid, $wid, $vid) -ErrorAction Stop)
   $winget_output_textbox3.AppendText("`r`n")
   $winget_output_textbox3.AppendText("Logo.PNG now available in Output Directory`r`n")
}

$msi_buttonUploadLogoPNG_Click = {
   $UploadLogo_openfiledialog1.ShowDialog()
   [string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
   $msipnaam = $msi_packagenaam_textbox1.text
   $msiversie = $msi_versie_textbox1.text
   $outputDirectory = $config_packagefolder_textbox.text
   $null = (Copy-Item -Path $logo_org_path -Destination ('{0}\{1}\{2}\output\logo.png' -f $outputDirectory, $msipnaam, $msiversie) -ErrorAction Stop)
   $msi_output_textbox1.AppendText("`r`n")
   $msi_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}

$exe_uploadlogo_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $UploadLogo_openfiledialog1.ShowDialog()
   [string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
   $exepnaam = $exe_packagenaam_textbox1.text
   $exeversie = $exe_versie_textbox1.text
   $outputDirectory = $config_packagefolder
   $null = (Copy-Item -Path $logo_org_path -Destination ('{0}\{1}\{2}\output\logo.png' -f $outputDirectory, $exepnaam, $exeversie) -ErrorAction Stop)
   $exe_output_textbox1.AppendText("`r`n")
   $exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
}

#region Control Helper Functions
<#
	.SYNOPSIS
		Sets the emulation of the WebBrowser control for the application.
	
	.DESCRIPTION
		Sets the emulation of the WebBrowser control for the application using the installed version of IE.
		This improves the WebBrowser control compatibility with newer html features.
	
	.PARAMETER ExecutableName
		The name of the executable E.g. PowerShellStudio.exe.
		Default Value: The running executable name.
	
	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation

	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation PowerShell.exe
#>
function Set-WebBrowserEmulation
{
   [CmdletBinding()]
   param
   (
      [ValidateNotNullOrEmpty()]
      [string]
      $ExecutableName = [IO.Path]::GetFileName([Diagnostics.Process]::GetCurrentProcess().MainModule.FileName)
   )
   
   #region Get IE Version
   $valueNames = 'svcVersion', 'svcUpdateVersion', 'Version', 'W2kVersion'
   
   $version = 0
   
   for ($i = 0; $i -lt $valueNames.Length; $i++)
   {
      $objVal = [Microsoft.Win32.Registry]::GetValue('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer', $valueNames[$i], '0')
      $strVal = [Convert]::ToString($objVal)
      
      if ($strVal)
      {
         $iPos = $strVal.IndexOf('.')
         
         if ($iPos -gt 0)
         {
            $strVal = $strVal.Substring(0, $iPos)
         }
         
         $res = 0;
         
         if ([int]::TryParse($strVal, [ref]$res))
         {
            $version = [Math]::Max($version, $res)
         }
      }
   }
   
   if ($version -lt 7)
   {
      $version = 7000
   }
   else
   {
      $version = $version * 1000
   }
   #endregion
   
   [Microsoft.Win32.Registry]::SetValue('HKEY_CURRENT_USER\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION', $ExecutableName, $version)
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
   param
   (
      [Parameter(Mandatory, HelpMessage = 'Add help message for user')]
      [ValidateNotNull()]
      [Windows.Forms.ComboBox]
      $ComboBox,
      [Parameter(Mandatory, HelpMessage = 'Add help message for user')]
      [ValidateNotNull()]
      $Items,
      [string]
      $DisplayMember,
      [string]
      $ValueMember,
      [switch]
      $Append
   )
   
   if (-not $Append)
   {
      $ComboBox.Items.Clear()
   }
   
   if ($Items -is [Object[]])
   {
      $ComboBox.Items.AddRange($Items)
   }
   elseif ($Items -is [Collections.IEnumerable])
   {
      $ComboBox.BeginUpdate()
      foreach ($obj in $Items)
      {
         $ComboBox.Items.Add($obj)
      }
      $ComboBox.EndUpdate()
   }
   else
   {
      $ComboBox.Items.Add($Items)
   }
   
   if ($DisplayMember)
   {
      $ComboBox.DisplayMember = $DisplayMember
   }
   
   if ($ValueMember)
   {
      $ComboBox.ValueMember = $ValueMember
   }
}

function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
   [CmdletBinding()]
   param (
      [ValidateNotNull()]
      [Windows.Forms.TreeNodeCollection]
      $NodeCollection,
      [ValidateNotNull()]
      [Collections.ArrayList]
      $CheckedNodes
   )
   
   foreach ($Node in $NodeCollection)
   {
      if ($Node.Checked)
      {
         $null = $CheckedNodes.Add($Node)
      }
      Get-CheckedNode -NodeCollection $Node.Nodes -CheckedNodes $CheckedNodes
   }
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
   param (
      [ValidateNotNull()]
      [Parameter(Mandatory, HelpMessage = 'Add help message for user')]
      [Windows.Forms.DataGridView]
      $DataGridView,
      [ValidateNotNull()]
      [Parameter(Mandatory, HelpMessage = 'Add help message for user')]
      $Item,
      [string]
      $DataMember,
      [Windows.Forms.DataGridViewAutoSizeColumnsMode]
      $AutoSizeColumns = 'None'
   )
   $DataGridView.SuspendLayout()
   $DataGridView.DataMember = $DataMember
   
   if ($null -eq $Item)
   {
      $DataGridView.DataSource = $null
   }
   elseif ($Item -is [Data.DataSet] -and $Item.Tables.Count -gt 0)
   {
      $DataGridView.DataSource = $Item.Tables[0]
   }
   elseif ($Item -is [ComponentModel.IListSource]`
      -or $Item -is [ComponentModel.IBindingList] -or $Item -is [ComponentModel.IBindingListView])
   {
      $DataGridView.DataSource = $Item
   }
   else
   {
      $array = New-Object -TypeName System.Collections.ArrayList
      
      if ($Item -is [Collections.IList])
      {
         $array.AddRange($Item)
      }
      else
      {
         $array.Add($Item)
      }
      $DataGridView.DataSource = $array
   }
   
   if ($AutoSizeColumns -ne 'None')
   {
      $DataGridView.AutoResizeColumns($AutoSizeColumns)
   }
   
   $DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
   [OutputType([Data.DataTable])]
   [CmdletBinding()]
   param (
      $InputObject,
      [ValidateNotNull()]
      [Data.DataTable]
      $Table,
      [switch]
      $RetainColumns,
      [switch]
      $FilterCIMProperties)
   
   if ($null -eq $Table)
   {
      $Table = New-Object -TypeName System.Data.DataTable
   }
   
   if ($null -eq $InputObject)
   {
      $Table.Clear()
      return @( ,$Table)
   }
   
   if ($InputObject -is [Data.DataTable])
   {
      $Table = $InputObject
   }
   elseif ($InputObject -is [Data.DataSet] -and $InputObject.Tables.Count -gt 0)
   {
      $Table = $InputObject.Tables[0]
   }
   else
   {
      if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
      {
         #Clear out the Table Contents
         $Table.Clear()
         
         if ($null -eq $InputObject)
         {
            return
         } #Empty Data
         
         $object = $null
         #find the first non null value
         foreach ($item in $InputObject)
         {
            if ($null -ne $item)
            {
               $object = $item
               break
            }
         }
         
         if ($null -eq $object)
         {
            return
         } #All null then empty
         
         #Get all the properties in order to create the columns
         foreach ($prop in $object.PSObject.Get_Properties())
         {
            if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
            {
               #Get the type from the Definition string
               $type = $null
               
               if ($null -ne $prop.Value)
               {
                  try
                  {
                     $type = $prop.Value.GetType()
                  }
                  catch
                  {
                     Out-Null
                  }
               }
               
               if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
               {
                  $null = $table.Columns.Add($prop.Name, $type)
               }
               else #Type info not found
               {
                  $null = $table.Columns.Add($prop.Name)
               }
            }
         }
         
         if ($object -is [Data.DataRow])
         {
            foreach ($item in $InputObject)
            {
               $Table.Rows.Add($item)
            }
            return @( ,$Table)
         }
      }
      else
      {
         $Table.Rows.Clear()
      }
      
      foreach ($item in $InputObject)
      {
         $row = $table.NewRow()
         
         if ($item)
         {
            foreach ($prop in $item.PSObject.Get_Properties())
            {
               if ($table.Columns.Contains($prop.Name))
               {
                  $row.Item($prop.Name) = $prop.Value
               }
            }
         }
         $null = $table.Rows.Add($row)
      }
   }
   
   return @( ,$Table)
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
   
   param
   (
      [Parameter(Mandatory, HelpMessage = 'Add help message for user')]
      [ValidateNotNull()]
      [Windows.Forms.ListBox]
      $ListBox,
      [Parameter(Mandatory, HelpMessage = 'Add help message for user')]
      [ValidateNotNull()]
      $Items,
      [string]
      $DisplayMember,
      [string]
      $ValueMember,
      [switch]
      $Append
   )
   
   $null = (Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue)
   
   if (-not $Append)
   {
      $ListBox.Items.Clear()
   }
   
   if ($Items -is [Windows.Forms.ListBox+ObjectCollection] -or $Items -is [Collections.ICollection])
   {
      $ListBox.Items.AddRange($Items)
   }
   elseif ($Items -is [Collections.IEnumerable])
   {
      $ListBox.BeginUpdate()
      foreach ($obj in $Items)
      {
         $ListBox.Items.Add($obj)
      }
      $ListBox.EndUpdate()
   }
   else
   {
      $ListBox.Items.Add($Items)
   }
   
   if ($DisplayMember)
   {
      $ListBox.DisplayMember = $DisplayMember
   }
   if ($ValueMember)
   {
      $ListBox.ValueMember = $ValueMember
   }
}
#endregion

$config_listbox_SelectedIndexChanged = {
   try
   {
      $config_import_csv = (Import-Csv -Path 'config_customerinfo.csv' -ErrorAction Stop)
   }
   catch
   {
      [Management.Automation.ErrorRecord]$e = $_
      $info = [PSCustomObject]@{
         Exception = $e.Exception.Message
         Reason    = $e.CategoryInfo.Reason
         Target    = $e.CategoryInfo.TargetName
         Script    = $e.InvocationInfo.ScriptName
         Line      = $e.InvocationInfo.ScriptLineNumber
         Column    = $e.InvocationInfo.OffsetInLine
      }
      $info | Write-Verbose
   }
   
   foreach ($cis in $config_import_csv)
   {
      if ($cis.customername -eq $config_listbox.SelectedItem)
      {
         $config_customername_textbox.text = $cis.customername
         $config_logfoldertarger_textbox.text = $cis.logfoldertarget
         $config_packagefolder_textbox.text = $cis.packagefolder
         $config_tenanturl_textbox.text = $cis.tenanturl
         $upload_tenantURL_textbox.text = $cis.tenanturl
         $config_download_folder_textbox3.Text = $cis.downloadpath
         
         if ($cis.downloadpath -like 'Enter UNC or local path for the download Package folder. (Evergreen / Winget)')
         {
            [void][Windows.Forms.MessageBox]::Show('Download folder was added to config. Please use this tool or edit "C:\Program Files\IntunePrepTool\config_customerinfo.csv" ', 'Please add Download folder') # Casting the method to [void] suppresses the output. 
         }
         
         # With the -FORCE we should be able to avoid all the TRY/CATCH stuff. FORCE will just set it, anyway.
         try
         {
            $null = (New-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -ErrorAction Stop -Force -Confirm:$false)
         }
         catch
         {
            $null = (Set-Variable -Name 'config_customername' -Value $cis.customername -Scope Script -Force -Confirm:$false)
         }
         
         try
         {
            $null = (New-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -ErrorAction Stop -Force -Confirm:$false)
         }
         catch
         {
            $null = (Set-Variable -Name 'config_logfoldertarget' -Value $cis.logfoldertarget -Scope Script -Force -Confirm:$false)
         }
         
         try
         {
            $null = (New-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -ErrorAction Stop -Force -Confirm:$false)
         }
         catch
         {
            $null = (Set-Variable -Name 'config_packagefolder' -Value $cis.packagefolder -Scope Script -Force -Confirm:$false)
         }
         
         try
         {
            $null = (New-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script -ErrorAction Stop -Force -Confirm:$false)
         }
         catch
         {
            $null = (Set-Variable -Name 'config_downloadpath' -Value $cis.downloadpath -Scope Script -Force -Confirm:$false)
         }
      }
   }
}

$config_new_button_Click = {
   $config_customername_textbox.text = 'Enter Customer name here'
   $config_logfoldertarger_textbox.text = 'Enter log directory used by scripting on target; Example c:\ProgramData\customername\logs'
   $config_packagefolder_textbox.text = 'Enter local path where packages & scripts will be stored; Example c:\sources\'
   $config_tenanturl_textbox.text = 'Enter Intune Tenant Url; Example CSNtestRink.onmicrosoft.com'
   $config_download_folder_textbox3.Text = 'Enter UNC or local path for the download Package folder. (Evergreen / Winget)'
}

$tools_winget_search_button_Click = {
   $tools_datagridview1.Enabled = $true
   $tools_datagridview1.Visible = $true
   $tools_Output_textbox1.Enabled = $false
   $tools_Output_textbox1.Visible = $false
   ## - [ Section to initialize DataTable objects] - ##
   ## - Create DataTable:
   $table = (New-Object -TypeName System.Data.DataTable)
   ## - Defining DataTable object columns and rows properties:
   # - Column1 = "ID".
   $column = (New-Object -TypeName System.Data.DataColumn)
   $column.DataType = [type]::GetType('System.String')
   $column.ColumnName = 'ID'
   $table.Columns.Add($column)
   # - Column2 = "Name".
   $column = (New-Object -TypeName System.Data.DataColumn)
   $column.DataType = [type]::GetType('System.String')
   $column.ColumnName = 'Name'
   $table.Columns.Add($column)
   $tools_wsearchstring = $tools_search_winget_textbox.text
   $wsearch__winget_search_output = winget.exe search $tools_wsearchstring --accept-source-agreements
   $wsearch__winget_search_output = winget.exe search $tools_wsearchstring --accept-source-agreements
   
   foreach ($wsearch_l in $wsearch__winget_search_output)
   {
      if ($wsearch_l -like 'Name*')
      {
         $wsearch_IdStart = $wsearch_l.IndexOf('Id')
         $wsearch_VersionStart = $wsearch_l.IndexOf('Version')
         $wsearch_MatchStart = $wsearch_l.IndexOf('Match')
         $wsearch_SourceStart = $wsearch_l.IndexOf('Source')
      }
      
      if (($wsearch_l -notlike 'Name*') -and ($wsearch_l -notlike '---*') -and ($wsearch_l -notlike '   -*'))
      {
         $row = $table.NewRow()
         $row['Name'] = $wsearch_l.substring(0, $wsearch_IdStart)
         $split = $wsearch_VersionStart - $wsearch_IdStart
         $row['ID'] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [StringSplitOptions]::RemoveEmptyEntries) -join ''
         $table.Rows.Add($row)
         ## - Save changes to the table:
         $table.AcceptChanges()
         $tools_datagridview1.DataSource = $table
      }
   }
}

$tools_show_winget_button_Click = {
   $tools_datagridview1.Enabled = $false
   $tools_datagridview1.Visible = $false
   $tools_Output_textbox1.Enabled = $true
   $tools_Output_textbox1.Visible = $true
   $tools_winget_show_string = $tools_show_winget.text
   $tools_winget_id = winget.exe show $tools_winget_show_string --accept-source-agreements
   $tools_Output_textbox1.Text = "Search results: `r`n"
   
   foreach ($twi in $tools_winget_id)
   {
      $tools_Output_textbox1.AppendText("$twi `r`n")
   }
}

$winget_locale_checkbox1_CheckedChanged = {
   if ($winget_locale_checkbox1.Checked -eq $true)
   {
      $winget_locale_label.Enabled = $true
      $winget_locale_label.Visible = $true
      $Winget_locale_textbox.Enabled = $true
      $Winget_locale_textbox.Visible = $true
   }
   else
   {
      $winget_locale_label.Enabled = $false
      $winget_locale_label.Visible = $false
      $Winget_locale_textbox.Enabled = $false
      $Winget_locale_textbox.Visible = $false
   }
}

$winget_version_checkbox_CheckedChanged = {
   if ($winget_version_checkbox.Checked -eq $true)
   {
      $winget_version_label1.Enabled = $true
      $winget_version_label1.Visible = $true
      $winget_version_textbox1.Enabled = $true
      $winget_version_textbox1.Visible = $true
   }
   else
   {
      $winget_version_label1.Enabled = $false
      $winget_version_label1.Visible = $false
      $winget_version_textbox1.Enabled = $false
      $winget_version_textbox1.Visible = $false
   }
}

$tools_winget_show_versions_button_Click = {
   $tools_datagridview1.Enabled = $false
   $tools_datagridview1.Visible = $false
   $tools_Output_textbox1.Enabled = $true
   $tools_Output_textbox1.Visible = $true
   $tools_winget_show_string = $tools_versions_winget_textbox.text
   $tools_winget_id = winget.exe show $tools_winget_show_string --versions --accept-source-agreements
   $tools_Output_textbox1.Text = "Search results: `r`n"
   
   foreach ($twi in $tools_winget_id)
   {
      $tools_Output_textbox1.AppendText("$twi `r`n")
   }
   
}

$exe_open_sourcedir_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $exepnaam = $exe_packagenaam_textbox1.text
   $exeversie = $exe_versie_textbox1.text
   $null = (Invoke-Item -Path ('{0}\{1}\{2}\source' -f $config_packagefolder, $exepnaam, $exeversie))
}

$weblink_ico_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $shortcut_openfiledialog1.ShowDialog()
   [string]$ICO_org_path = $shortcut_openfiledialog1.FileNames
   $weblinkPackageName = $weblink_packagename.Text
   $weblinkName = $weblink_Name.text
   $weblinkUrl = $weblink_url_textbox1.Text
   $weblinkLocation = $weblink_location_textbox1.Text
   $weblinkBrowser = $weblink_browser_textbox1.Text
   $weblinkVersion = $weblink_version_textbox1.Text
   $null = (Copy-Item -Path $ICO_org_path -Destination ('{0}\{1}\{2}\source\{3}.ico' -f $config_packagefolder, $weblinkPackageName, $weblinkVersion, $weblinkName) -ErrorAction Stop)
   $weblink_output_textbox1.AppendText("*.ICO now available in source directory `r`n")
   $weblink_ico_label1.text = $shortcut_openfiledialog1.SafeFileName
   $weblink_ico_label1.Visible = $true
   $weblink_ico_label1.Enabled = $true
   $weblink_logo_png_button1.Visible = $true
   $weblink_logo_png_button1.Enabled = $true
   $weblink_output_textbox1.AppendText("Now upload *.png file `r`n")
}

$weblink_create_intunewin_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $weblinkPackageName = $weblink_packagename.Text
   $weblinkName = $weblink_Name.Text
   $weblinkUrl = $weblink_url_textbox1.Text
   $weblinkLocation = $weblink_location_textbox1.Text
   $weblinkBrowser = $weblink_browser_textbox1.Text
   $weblinkVersion = $weblink_version_textbox1.Text
   $RegisterDetectionroot = 'Intune_' + $config_customername
   $weblink_output_textbox1.Text = 'Creation of Intunewin file has started. Please wait.'
   & .\IntuneWinAppUtil.exe -c "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\" -s "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1" -o "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\" -q
   $null = (Rename-Item -Path ('{0}\{1}\{2}\Output\install.intunewin' -f $config_packagefolder, $weblinkPackageName, $weblinkVersion) -NewName ('{0}\{1}\{2}\Output\{3}.intunewin' -f $config_packagefolder, $weblinkPackageName, $weblinkVersion))
   $config_csv_openfiledialog1.InitialDirectory = "$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\"
   $weblink_output_textbox1.AppendText("`nIntunewin file created: `r`n")
   $weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\$weblinkName.intunewin")
   $weblink_output_textbox1.AppendText("`r`n")
   $weblink_output_textbox1.AppendText("Install command is: `r`n")
   $weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
   $weblink_output_textbox1.AppendText("un-install command is: `r`n")
   $weblink_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
   $weblink_output_textbox1.AppendText("Detection registry is: `r`n")
   $regkeyRoot = ('HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\{0}\' -f $RegisterDetectionroot)
   $regkeyApp = ('{0}{1}\' -f $regkeyRoot, $weblinkPackageName)
   $regkeyApp
   $weblink_output_textbox1.AppendText("$regkeyApp `r`n")
   $weblink_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
   $weblink_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
   $weblink_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
   $weblink_output_textbox1.AppendText("Detection Value is: $weblinkVersion `r`n")
   $weblink_output_textbox1.AppendText("Please reopen tool to make another Weblink package `r`n")
   
   class CSNIntuneWinPackageConfig {
      [string]$IntuneWinFile
      [string]$DisplayName
      [string]$Publisher
      [string]$AppVersion
      [string]$reglocation
      [string]$regValue
      [string]$installCMD
      [string]$uninstallCMD
   }
   
   $CSNIntuneWinPackageConfig = $null
   
   $CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
         IntuneWinFile = ('{0}.intunewin' -f $weblinkPackageName)
         DisplayName   = $weblinkPackageName
         Publisher     = $config_customername
         AppVersion    = $weblinkVersion
         
         reglocation   = $regkeyApp
         regValue      = 'Versie'
         installCMD    = 'powershell -executionpolicy bypass -file install.ps1'
         uninstallCMD  = 'powershell -executionpolicy bypass -file uninstall.ps1'
      })
   $null = ($CSNIntuneWinPackageConfig | Export-Csv -Path ('{0}\{1}\{2}\Output\config.csv' -f $config_packagefolder, $weblinkPackageName, $weblinkVersion) -NoTypeInformation)
   $weblink_output_textbox1.AppendText("Config.csv written to: `r`n")
   $weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkPackageName\$weblinkVersion\Output\\config.csv")
   $weblink_output_textbox1.AppendText("  `r`n")
   $weblink_output_textbox1.AppendText("Use config file to upload package to Intune. `r`n")
}

$config_delete_button1_Click = {
   $config_import_csv = (Import-Csv -Path 'config_customerinfo.csv')
   $config_customerinfo = $null
   
   $null = (Remove-Item -Path 'config_customerinfo.csv' -Confirm:$false -Force)
   
   foreach ($cis in $config_import_csv)
   {
      if ($cis.customername -ne $config_listbox.SelectedItem)
      {
         $config_customerinfo += @([config_customerinfo]@{
               customername    = $cis.customername
               logfoldertarget = $cis.logfoldertarget
               packagefolder   = $cis.packagefolder
               tenanturl       = $cis.tenanturl
               
            })
      }
   }
   
   $null = ($config_customerinfo | Export-Csv -Path 'config_customerinfo.csv' -NoTypeInformation)
   $config_listbox.Items.Clear()
   
   try
   {
      $config_import_csv = (Import-Csv -Path 'config_customerinfo.csv' -ErrorAction Stop)
      
      foreach ($cis in $config_import_csv)
      {
         $null = (Update-ListBox -ListBox $config_listbox -Items $cis.customername -Append)
      }
   }
   catch
   {
      Write-Host 'Taak hier'
   }
}

$weblink_logo_png_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $weblink_logo_openfiledialog1.ShowDialog()
   [string]$weblinkLogo_org_path = $weblink_logo_openfiledialog1.FileNames
   $weblinkPackageName = $weblink_packagename.Text
   $weblinkName = $weblink_Name.Text
   $weblinkUrl = $weblink_url_textbox1.Text
   $weblinkLocation = $weblink_location_textbox1.Text
   $weblinkBrowser = $weblink_browser_textbox1.Text
   $weblinkVersion = $weblink_version_textbox1.Text
   $null = (Copy-Item -Path $weblinkLogo_org_path -Destination ('{0}\{1}\{2}\output\logo.png' -f $config_packagefolder, $weblinkPackageName, $weblinkVersion) -ErrorAction Stop)
   $weblink_output_textbox1.AppendText("Logo.PNG now available in Output directory `r`n")
   $weblink_png_label1.text = $weblink_logo_openfiledialog1.SafeFileName
   $weblink_png_label1.Enabled = $true
   $weblink_png_label1.Visible = $true
   $weblink_create_scripts_button1.Enabled = $true
   $weblink_create_scripts_button1.Visible = $true
   $weblink_output_textbox1.AppendText("Click Create scripts to create install.ps1 and uninstall.ps1 `r`n")
}

$weblink_test_install_button1_Click = {
   if ([Windows.Forms.MessageBox]::Show('Do you want to test installation using Powershell_ISE?. ', 'Test', [Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
   {
      $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
      $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
      $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
      $weblinkName = $weblink_Name.Text
      $weblinkVersion = $weblink_version_textbox1.Text
      $weblinkPackageName = $weblink_packagename.Text
      & "$env:PSHome\powershell_ise.exe" -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\install.ps1"
   }
}

$weblink_create_scripts_button1_Click = {
   $weblink_installFile = @'
<#	
      .NOTES
      ===========================================================================
      Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
      Created on:   	27/04/2023 13:14
      Created by:   	Rink Turksma
      Organization: 	
      Filename:     	install.ps1
      ===========================================================================
      .DESCRIPTION
      Script genererated with:
      https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = '!!packagename!!'
$Name = '!!Name!!'
$version = '!!Version!!'
$URL = '!!URL!!'
$location = '!!Location!!'
$browser = '!!Browser!!'
$ICOFile = '!!ICOFile!!'
# klant variabelen
$logdir = '!!logdir!!'
$RegisterDetectionroot = '!!RegisterDetectionroot!!'
# Dyn vars
$logfile = $(Join-Path -Path $logdir  -ChildPath ('{0}{1}.txt' -f $packagename, $version))
$regkeyRoot = ('HKLM:\Software\{0}' -f $RegisterDetectionroot)
$regkeyApp = ('{0}\{1}' -f $regkeyRoot, $packagename)
$excode = $null

# Create log direcotry if needed.
if (!(Test-Path -Path $logdir -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path $logdir)
}

if (!(Test-Path -Path ('{0}\dll' -f $logdir) -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\dll' -f $logdir) -Force -Confirm:$false)
}

#Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path "$logdir\ico" -Force -Confirm:$false)
}

#Create registry root if needed
if (!(Test-Path -Path $regkeyRoot -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regkeyRoot -ItemType Key -Force -Confirm:$false)
}

# Creates application Key in registry
if (!(Test-Path -Path $regkeyApp -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regkeyApp -ItemType Key -Force -Confirm:$false)
}

#region PowershellFuncties
function fDetectionInRegistry
{
   ### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
   ### Uiteindelijk heb je dan bijvoorbeeld:
   #### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
   ### Met een Versie waarde en een [BOOL]Succes waarde
   ### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
   param
   (
      [Parameter(Mandatory,HelpMessage = 'Add help message for user')]
      [bool]$Succes
   )
	
   try
   {
      $AppRegVersie = (Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop)

      if ($AppRegVersie.Versie -ne $version) 
      {
         $null = (Set-ItemProperty -Path $regkeyApp -Name Versie -Value $version -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType string -Force -Confirm:$false)
   }

   try
   {
      $AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop

      if ($AppRegSucces.Succes -ne $Succes) 
      {
         $null = (Set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string -Force -Confirm:$false)
   }
}

function fCreateShortcut
{
   ### Function creates shortcut

   param
   (
      [Parameter(Mandatory,HelpMessage = 'Add help message for user')]
      [string]$TargetFile,
      [string]$shortcutName,
      [string]$icon,
      [string]$ShortcutArguments,
      [string]$programmenu
   )
	
   $browser = $TargetFile
   $wdirCount = $browser.Split('\').Count
   $eraf = $browser.Split('\')[$wdirCount - 1]
   $workingdir = $browser.TrimEnd($eraf)
   $ShortcutFile = ('{0}\{1}.lnk' -f $programmenu, $shortcutName)
   $WScriptShell = (New-Object -ComObject WScript.Shell)
   $Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
   $Shortcut.TargetPath = $TargetFile
   $Shortcut.WorkingDirectory = $workingdir
   
   if ($icon)
   {
      $Shortcut.IconLocation = $icon
   }
   
   if ($ShortcutArguments)
   {
      $Shortcut.Arguments = $ShortcutArguments
   }
   $Shortcut.Save()
}
#endregion PowershellFuncties

# Setup Script Location
$null = (Set-Location -Path $PSScriptRoot)

# Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -PathType Leaf -ErrorAction SilentlyContinue))
{
   $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -Force -Confirm:$false)
}

# Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' | Select-Object -ExpandProperty Name | Where-Object -Property {
      ($_ -eq 'IntunePrepTool')
} -EQ -Value $null)
{
   $null = (New-Item -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' -Name 'IntunePrepTool' -ErrorAction SilentlyContinue -Force -Confirm:$false)
}

try
{
   $TypesSupported = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -ErrorAction Stop)

   if ($TypesSupported.TypesSupported -ne '7') 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -PropertyType DWORD -Force -Confirm:$false)
}

try
{
   $EventMessageFile = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -ErrorAction Stop)

   if ($EventMessageFile.EventMessageFile -ne ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir)) 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -PropertyType string -Force -Confirm:$false)
}

# New EventLog when needed.
try
{
   # Assigned, but never used again! Is $null the better option here?
   $checkEventLog = Get-EventLog -LogName 'IntunePrepTool' -Source 'IntunePrepTool' -ErrorAction Stop
}
catch
{
   $null = (New-EventLog -MessageResourceFile ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -LogName 'IntunePrepTool' -Source 'IntunePrepTool')
   [Diagnostics.EventLog]::CreateEventSource('IntunePrepTool', 'IntunePrepTool')
}

# Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
$null = (Start-Transcript -Path $logfile)

<#--Hieronder start Script ter installatie---
      Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
      Altijd met een -ErrorAction Stop erachter
#>

try
{
   Write-Host -Object 'Script will now copy ICO file'
   $null = (Copy-Item -Path ('{0}.ico' -f $Name) -Destination ('{0}\ico\{1}.ico' -f $logdir, $Name) -Force -Confirm:$false)
   Write-Host -Object 'Script will now create extra folder in startmenu (when needed)'

   if (!(Test-Path -Path $location -ErrorAction SilentlyContinue))
   {
      $null = (New-Item -ItemType Directory -Path $location -Force -Confirm:$false)
   }

   Write-Host -Object 'Script will now create shortcut'
   $null = (fCreateShortcut -TargetFile $browser -shortcutName $Name -ShortcutArguments $URL -icon ('{0}\ico\{1}.ico' -f $logdir, $Name) -programmenu $location)
   $excode = 0
}
catch
{
   $excode = 1
}


<#----Hieronder einde script voor installatie---#>
#Nu wordt de Transcript logging gestart
$null = (Stop-Transcript -ErrorAction SilentlyContinue)

#Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
#Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape('**********************')
$lastRun = ((Get-Content -Path $logfile -Raw -ErrorAction SilentlyContinue) -split ($split))[-3]

if ($lastRun.Length -gt 32600)
{
   $lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}

# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) 
{
   $warning = 'Error'
   $null = (fDetectionInRegistry -succes $false)
}
else 
{
   $warning = 'Information'
   $null = (fDetectionInRegistry -succes $true)
}

#End; Write Log file
if ($warning -like 'Information')
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Information', 0x3)
}
Else
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Error', 0x3)
}

if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs' -ErrorAction SilentlyContinue) 
{
   if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -PathType Leaf -ErrorAction SilentlyContinue)
   {
      $null = (Remove-Item -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
   }

   $null = (Copy-Item -Path 'c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx' -Destination 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
}
'@
   $weblink_uninstallFile = @'
<#	
      .NOTES
      ===========================================================================
      Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.218
      Created on:   	27/04/2023 13:14
      Created by:   	Rink Turksma
      Organization: 	
      Filename:     	uninstall.ps1
      ===========================================================================
      .DESCRIPTION
      Script genererated with:
      https://github.com/rink-turksma/IntunePrepTool
#>

$packagename = '!!packagename!!'
$Name = '!!Name!!'
$version = '!!Version!!'
$URL = '!!URL!!'
$location = '!!Location!!'
$browser = '!!Browser!!'
$ICOFile = '!!ICOFile!!'
#klant variabelen
$logdir = '!!logdir!!'
$RegisterDetectionroot = '!!RegisterDetectionroot!!'
#Dyn vars
$logfile = $(Join-Path -Path $logdir  -ChildPath ('{0}{1}.txt' -f $packagename, $version))
$regkeyRoot = ('HKLM:\Software\{0}' -f $RegisterDetectionroot)
$regkeyApp = ('{0}\{1}' -f $regkeyRoot, $packagename)
$excode = $null

# Create log direcotry if needed.
if (!(Test-Path -Path $logdir -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path $logdir -Force -Confirm:$false)
}

if (!(Test-Path -Path ('{0}\dll' -f $logdir) -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\dll' -f $logdir) -Force -Confirm:$false)
}

# Create ICO direcotry if needed.
if (!(Test-Path -Path $logdir\ico -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\ico' -f $logdir) -Force -Confirm:$false)
}

# Create registry root if needed
if (!(Test-Path -Path $regkeyRoot -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regkeyRoot -ItemType Key -Force -Confirm:$false)
}

# Creates application Key in registry
if (!(Test-Path -Path $regkeyApp -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regkeyApp -ItemType Key -Force -Confirm:$false)
}

#region Powershell Functions
function fDetectionInRegistry
{
   ### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
   ### Uiteindelijk heb je dan bijvoorbeeld:
   #### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
   ### Met een Versie waarde en een [BOOL]Succes waarde
   ### Gebruik: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
   param
   (
      [Parameter(Mandatory)]
      [bool]$Succes
   )
	
   try
   {
      $AppRegVersie = (Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop)

      if ($AppRegVersie.Versie -ne $version) 
      {
         $null = (Set-ItemProperty -Path $regkeyApp -Name Versie -Value $version -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regkeyApp -Name Versie -Value $version -PropertyType Dword -Force -Confirm:$false)
   }

   try
   {
      $AppRegSucces = Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop

      if ($AppRegSucces.Succes -ne $Succes) 
      {
         $null = (Set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType Dword -Force -Confirm:$false)
   }
}
function fCreateShortcut
{
   ### Function creates shortcut
	
   param
   (
      [Parameter(Mandatory)]
      [string]$TargetFile,
      [string]$shortcutName,
      [string]$icon,
      [string]$ShortcutArguments,
      [string]$programmenu
   )

   $browser = $TargetFile
   $wdirCount = $browser.Split('\').Count
   $eraf = $browser.Split('\')[$wdirCount - 1]
   $workingdir = $browser.TrimEnd($eraf)
   $ShortcutFile = ('{0}\{1}.lnk' -f $programmenu, $shortcutName)
   $WScriptShell = (New-Object -ComObject WScript.Shell)
   $Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
   $Shortcut.TargetPath = $TargetFile
   $Shortcut.WorkingDirectory = $workingdir

   if ($icon)
   {
      $Shortcut.IconLocation = $icon
   }

   if ($ShortcutArguments)
   {
      $Shortcut.Arguments = $ShortcutArguments
   }

   $Shortcut.Save()
}
#endregion Powershell Functies

# Setup Script Location
$null = (Set-Location -Path $PSScriptRoot)

# Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -PathType Leaf -ErrorAction SilentlyContinue))
{
   $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -Confirm:$false)
}

# Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' | Select-Object -ExpandProperty Name | Where-Object -Property {
      ($_ -eq 'IntunePrepTool')
} -EQ -Value $null)
{
   $null = (New-Item -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' -Name 'IntunePrepTool' -ErrorAction SilentlyContinue -Force -Confirm:$false)
}

try
{
   $TypesSupported = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -ErrorAction Stop)
      
   if ($TypesSupported.TypesSupported -ne '7') 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -PropertyType DWORD -Force -Confirm:$false)
}
try
{
   $EventMessageFile = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -ErrorAction Stop)
      
   if ($EventMessageFile.EventMessageFile -ne ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir)) 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -PropertyType string -Force -Confirm:$false)
}

# New EventLog when needed.
try
{
   # Assigned, bur never used.
   $checkEventLog = (Get-EventLog -LogName 'IntunePrepTool' -Source 'IntunePrepTool' -ErrorAction Stop)
}
catch
{
   $null = (New-EventLog -MessageResourceFile ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -LogName 'IntunePrepTool' -Source 'IntunePrepTool')
   [Diagnostics.EventLog]::CreateEventSource('IntunePrepTool', 'IntunePrepTool')
}

# Start Transcript.  Dit gaat opgeslagen onder de  $logdir. Zal daar in txt file beschikbaar zijn. En in de eventviewer.
$null = (Start-Transcript -Path $logfile)

<#--Hieronder start Script ter installatie---
      Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
      Altijd met een -ErrorAction Stop erachter
#>
try
{
   Write-Host -Object 'Script will remove ICO file and Lnk file'
   $null = (Remove-Item -Path ('{0}\ico\{1}.ico' -f $logdir, $Name) -Confirm:$false -Force)
   $null = (Remove-Item -Path ('{0}\{1}.lnk' -f $location, $Name) -Confirm:$false -Force)
   $excode = 0
}
catch
{
   $excode = 1
}

<#----Hieronder einde script voor installatie---#>
# Nu wordt de Transcript logging gestart
$null = (Stop-Transcript -ErrorAction SilentlyContinue)

# Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
# Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape('**********************')
$lastRun = ((Get-Content -Path $logfile -Raw) -split ($split))[-3]

if ($lastRun.Length -gt 32600)
{
   $lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) 
{
   $warning = 'Error'
   $null = (fDetectionInRegistry -succes $false)
}
else 
{
   $warning = 'Information'
   $null = (Remove-Item -Path $regkeyApp -Force -Confirm:$false)
}
#End; Write Log file
if ($warning -like 'Information')
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Information', 0x3)
}
Else
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Error', 0x3)
}
if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs' -ErrorAction SilentlyContinue) 
{
   if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -PathType Leaf -ErrorAction SilentlyContinue) 
   {
      $null = (Remove-Item -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
   } 

   $null = (Copy-Item -Path 'c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx' -Destination 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
}
'@
   
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $weblinkName = $weblink_Name.Text
   $weblinkUrl = $weblink_url_textbox1.Text
   $weblinkLocation = $weblink_location_textbox1.Text
   $weblinkBrowser = $weblink_browser_textbox1.Text
   $weblinkVersion = $weblink_version_textbox1.Text
   $weblinkPackageName = $weblink_packagename.Text
   $weblinkICOFile = ('{0}.ico' -f $weblinkName)
   $logdir = $config_logfoldertarget
   $RegisterDetectionroot = 'Intune_' + $config_customername
   $weblink_installFile = $weblink_installFile.Replace('!!packagename!!', $weblinkPackageName)
   $weblink_installFile = $weblink_installFile.Replace('!!Name!!', $weblinkName)
   $weblink_installFile = $weblink_installFile.Replace('!!Version!!', $weblinkVersion)
   $weblink_installFile = $weblink_installFile.Replace('!!URL!!', $weblinkUrl)
   $weblink_installFile = $weblink_installFile.Replace('!!Location!!', $weblinkLocation)
   $weblink_installFile = $weblink_installFile.Replace('!!Browser!!', $weblinkBrowser)
   $weblink_installFile = $weblink_installFile.Replace('!!ICOFile!!', $weblinkICOFile)
   $weblink_installFile = $weblink_installFile.Replace('!!logdir!!', $logdir)
   $weblink_installFile = $weblink_installFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
   $weblink_uninstallFile = $weblink_uninstallFile.Replace('!!packagename', $weblinkPackageName)
   $weblink_uninstallFile = $weblink_uninstallFile.Replace('!!Name!!', $weblinkName)
   $weblink_uninstallFile = $weblink_uninstallFile.Replace('!!Version!!', $weblinkVersion)
   $weblink_uninstallFile = $weblink_uninstallFile.Replace('!!URL!!', $weblinkUrl)
   $weblink_uninstallFile = $weblink_uninstallFile.Replace('!!Location!!', $weblinkLocation)
   $weblink_uninstallFile = $weblink_uninstallFile.Replace('!!Browser!!', $weblinkBrowser)
   $weblink_uninstallFile = $weblink_uninstallFile.Replace('!!ICOFile!!', $weblinkICOFile)
   $weblink_uninstallFile = $weblink_uninstallFile.Replace('!!logdir!!', $logdir)
   $weblink_uninstallFile = $weblink_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
   $null = ($weblink_installFile | Out-File -FilePath ('{0}\{1}\{2}\source\install.ps1' -f $config_packagefolder, $weblinkPackageName, $weblinkVersion) -Force -Confirm:$false)
   $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\{1}\{2}\source\IntunePrepTool_msgfile.dll' -f $config_packagefolder, $weblinkPackageName, $weblinkVersion) -Confirm:$false -Force)
   $null = ($weblink_uninstallFile | Out-File -FilePath ('{0}\{1}\{2}\source\uninstall.ps1' -f $config_packagefolder, $weblinkPackageName, $weblinkVersion) -Force -Confirm:$false)
   $weblink_output_textbox1.AppendText("Install.ps1 and uninstall.ps1 created `r`n")
   $weblink_output_textbox1.AppendText("You can now test install and uninstall `r`n")
   $weblink_output_textbox1.AppendText("You can save changes in script if needed `r`n")
   $weblink_output_textbox1.AppendText("Then create Intunewin file`r`n")
   $weblink_test_install_button1.Visible = $true
   $weblink_test_install_button1.Enabled = $true
   $weblink_test_uninstall_button1.Visible = $true
   $weblink_test_uninstall_button1.Enabled = $true
   $weblink_create_intunewin_button1.Visible = $true
   $weblink_create_intunewin_button1.Enabled = $true
}
$weblink_create_packagedir_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $weblinkName = $weblink_packagename.Text
   $weblinkUrl = $weblink_url_textbox1.Text
   $weblinkLocation = $weblink_location_textbox1.Text
   $weblinkBrowser = $weblink_browser_textbox1.Text
   $weblinkVersion = $weblink_version_textbox1.Text
   
   if (!(Test-Path -Path ('{0}\{1}\{2}\source' -f $config_packagefolder, $weblinkName, $weblinkVersion) -ErrorAction SilentlyContinue))
   {
      $null = (New-Item -ItemType Directory -Path ('{0}\{1}\{2}\source' -f $config_packagefolder, $weblinkName, $weblinkVersion) -Force -Confirm:$false)
   }
   
   if (!(Test-Path -Path ('{0}\{1}\{2}\output' -f $config_packagefolder, $weblinkName, $weblinkVersion) -ErrorAction SilentlyContinue))
   {
      $null = (New-Item -ItemType Directory -Path ('{0}\{1}\{2}\output' -f $config_packagefolder, $weblinkName, $weblinkVersion) -Force -Confirm:$false)
   }
   
   $weblink_output_textbox1.Text = "`nNew package direcotory created: `r`n"
   $weblink_output_textbox1.AppendText("$config_packagefolder\$weblinkName\$weblinkVersion\")
   $weblink_output_textbox1.AppendText(" `r`n")
   $weblink_output_textbox1.AppendText("Now Upload *.ICO file `r`n")
   $weblink_ico_button1.Enabled = $true
   $weblink_ico_button1.Visible = $true
}

$weblink_Name_TextChanged = {
   if ($config_listbox.SelectedItem -eq $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
   }
}

$weblink_test_uninstall_button1_Click = {
   if ([Windows.Forms.MessageBox]::Show('Do you want to test uninstallation using Powershell_ISE?. ', 'Test', [Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
   {
      $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
      $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
      $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
      $weblinkName = $weblink_Name.Text
      $weblinkVersion = $weblink_version_textbox1.Text
      $weblinkPackageName = $weblink_packagename.Text
      & "$env:PSHome\powershell_ise.exe" -file "$config_packagefolder\$weblinkPackageName\$weblinkVersion\source\uninstall.ps1"
   }
}

$helpbutton1_Click = {
   $null = (Start-Process -FilePath 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' -ArgumentList 'https://github.com/rink-turksma/IntunePrepTool')
}

$winget_create_scripts_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $DisplayName = $winget_displayname_textbox1.text
   
   if ($DisplayName -like $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please fill the Package name textbox', 'Please choose Package name first')
   }
   else
   {
      $vid = $versie_textbox2.Text
      
      if ($vid -like $null)
      {
         [void][Windows.Forms.MessageBox]::Show('Please fill the Package version textbox', 'Please choose Package version first')
      }
      else
      {
         $wid = $winget_WingetID_textbox1.text
         $DisplayName = $winget_displayname_textbox1.text
         $fid = $config_packagefolder
         
         if ($winget_locale_checkbox1.Checked -eq $true)
         {
            $wlo = $Winget_locale_textbox.text
         }
         else
         {
            $wlo = $null
            
         }
         
         if ($winget_version_checkbox.Checked -eq $true)
         {
            $wve = $winget_version_textbox1.text
         }
         else
         {
            $wve = $null
            
         }
         
         $WinGetID = $wid
         $regApp1 = $DisplayName
         $versie = $vid
         $logdir = $config_logfoldertarget
         $RegisterDetectionroot = 'Intune_' + $config_customername
         $outputDirectory = $fid
         $installFile = @'
<#	
      .NOTES
      ===========================================================================
      Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
      Created on:   	16-5-2023 15:20
      Created by:   	Rink Turksma
      Organization: 	
      Filename:      Winget_install_uninstall.ps1
      ===========================================================================
      .DESCRIPTION
      Parameters will be provided from IntunePrepTool
#>
# Variables will be provided from IntunePrepTool
$WinGetID = '!!WinGetID!!'
$DisplayName = '!!DisplayName!!'
$logdir = '!!logdir!!'
$RegisterDetectionroot = '!!RegisterDetectionroot!!'
$versie = '!!versie!!'
$locale = '!!locale!!'
$localeSelected = '!!localeSelected!!'
$versionWinget = '!!versionWinget!!'
$versionWingetSelected = '!!versionSelected!!'
# Dyn vars
$regApp1 = $DisplayName
$logfile = $(Join-Path -Path $logdir  -ChildPath ('{0}{1}.txt' -f $DisplayName, $versie))
$regkeyRoot = ('HKLM:\Software\{0}' -f $RegisterDetectionroot)
$regkeyApp = ('{0}\{1}' -f $regkeyRoot, $regApp1)
$excode = $null

# Creates logdirectory if needed.
if (!(Test-Path -Path $logdir -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path $logdir -Force -Confirm:$false)
}

# Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path ('{0}\dll' -f $logdir) -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\dll' -f $logdir) -Force -Confirm:$false)
}

# Creates root for detection in Registry
if (!(Test-Path -Path $regkeyRoot -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regkeyRoot -ItemType Key -Force -Confirm:$false)
}

# Create registry application key.
if (!(Test-Path -Path $regkeyApp -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regkeyApp -ItemType Key -Force -Confirm:$false)
}

#region PowershellFunctions
function fDetectionInRegistry
{
   ### Functie zorgt voor naar succesvolle of onsuccesvolle uitvoering..
   ### Uiteindelijk heb je dan bijvoorbeeld:
   #### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
   ### Met een Versie waarde en een [BOOL]Succes waarde
   ### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
   param
   (
      [Parameter(Mandatory,HelpMessage = 'Add help message for user')]
      [bool]$Succes
   )
	
   try
   {
      $AppRegVersie = Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop

      if ($AppRegVersie.Versie -ne $versie) 
      {
         $null = (Set-ItemProperty -Path $regkeyApp -Name Versie -Value $versie -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regkeyApp -Name Versie -Value $versie -PropertyType string -Force -Confirm:$false)
   }
   try
   {
      $AppRegSucces = (Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop)

      if ($AppRegSucces.Succes -ne $Succes) 
      {
         $null = (Set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string -Force -Confirm:$false)
   }
}
#endregion PowershellFunctions

# Setup Script Location
$null = (Set-Location -Path $PSScriptRoot)

# Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -PathType Leaf -ErrorAction SilentlyContinue))
{
   $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -Force -Confirm:$false)
}

# Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' | Select-Object -ExpandProperty Name | Where-Object -Property {
      ($_ -eq 'IntunePrepTool')
} -EQ -Value $null)
{
   $null = (New-Item -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' -Name 'IntunePrepTool' -ErrorAction SilentlyContinue -Force -Confirm:$false)
}

try
{
   $TypesSupported = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -ErrorAction Stop)
               
   if ($TypesSupported.TypesSupported -ne '7') 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -PropertyType DWORD -Force -Confirm:$false)
}
try
{
   $EventMessageFile = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -ErrorAction Stop)

   if ($EventMessageFile.EventMessageFile -ne ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir)) 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -PropertyType string -Force -Confirm:$false)
}

# New EventLog when needed.
try
{
   # Assigned, never used? Still neeeded? Use $null instead?
   $checkEventLog = (Get-EventLog -LogName 'IntunePrepTool' -Source 'IntunePrepTool' -ErrorAction Stop)
}
catch
{
   $null = (New-EventLog -MessageResourceFile ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -LogName 'IntunePrepTool' -Source 'IntunePrepTool')
   [Diagnostics.EventLog]::CreateEventSource('IntunePrepTool', 'IntunePrepTool')
}

# Start Transcript.  Will be saved under  $logdir.
$null = (Start-Transcript -Path $logfile)
Write-Host -Object 'Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed.' -ForegroundColor Green

if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client -ErrorAction SilentlyContinue) 
{
   $null = (Import-Module -Name Microsoft.WinGet.Client -Force -NoClobber)
}
else 
{
   $null = (Install-Module -Name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$false -Repository PSGallery -AllowClobber)
   $null = (Import-Module -Name Microsoft.WinGet.Client -Force -NoClobber)
}

<#--Hieronder start Script ter installatie---
      Hier kan dus 1 van de functies gedeclareerd hierboven gebruikt worden.
      Altijd met een -ErrorAction Stop erachter
#>
# BUG: This is bad, we install a 3rd party module, but use the BIN! And global installed BIN is not even checked.
$winget_exe = (Resolve-Path -Path 'C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe' -ErrorAction Stop)

if ($winget_exe.count -gt 1)
{
   $winget_exe = $winget_exe[-1].Path
}

if (!$winget_exe) 
{
   Write-Error -Message 'Winget not installed' -Exception $excode -Message = -ErrorRecord 1
}
else 
{
   $excode = 0
}

try
{
   $install = '!!WingetCommand!!'

   if ($install -like '!!doe*')
   {
      if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $false))
      {
         & $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine
         <#
               try
               {
               #install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
			
               }
               catch
               {
			
               }
         #>
      }

      if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $false))
      {
         & $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --locale $locale

         <#
               try
               {
               install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -ErrorAction Stop
               }
               catch
               {
			
			
               }
         #>
      }

      if (($localeSelected -eq $false) -and ($versionWingetSelected -eq $true))
      {
         & $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget
         <#
               try
               {
               install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
			
               }
               catch
               {
			
               }
         #>
      }
	
      if (($localeSelected -eq $true) -and ($versionWingetSelected -eq $true))
      {
         & $winget_exe install -e --id $WinGetID --accept-package-agreements --accept-source-agreements -h --scope=machine --version $versionWinget --locale $locale
         <#
               try
               {
               install-wingetPackage -Scope System -Id $WinGetID -Force -confirm:$false -Version $versionWinget -ErrorAction Stop
               }
               catch
               {
			
               }
         #>
      }
   }
   else
   {
      & $winget_exe uninstall --id $WinGetID -h
   }
   #$excode = 0;
}
catch
{
   [Management.Automation.ErrorRecord]$e = $_
   $info = [PSCustomObject]@{
      Exception = $e.Exception.Message
      Reason    = $e.CategoryInfo.Reason
      Target    = $e.CategoryInfo.TargetName
      Script    = $e.InvocationInfo.ScriptName
      Line      = $e.InvocationInfo.ScriptLineNumber
      Column    = $e.InvocationInfo.OffsetInLine
   }
   $info | Write-Verbose
}

if ($install -like '!!doe*')
{
   try
   {
      # Searches for startmenu items created the last 10 minutes
      $startmenuItems = (Get-ChildItem -Path 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs' -Recurse -Include *.lnk | Sort-Object -Property LastWriteTime -ErrorAction Stop | Where-Object -FilterScript {
            $_.LastWriteTime -ge (Get-Date).AddMinutes(-10)
      }).VersionInfo.FileName
      foreach ($startmenuI in $startmenuItems)
      {
         Write-Host -Object "`r`n"
         Write-Host -Object 'The last 10 minutes a startmenu *.lnk file was created.' -ForegroundColor Yellow
         Write-Host -Object "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
         Write-Host -Object "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
         Write-Host -Object "`r`n"
      }
   }
   catch
   {
      Write-Host -Object 'Error looking for *.lnk files in startmenu' -ForegroundColor Yellow
   }
   try
   {
      # Searches for Desktop items created the last 10 minutes
      $startmenuItems = ((Get-ChildItem -Path 'C:\Users\Public\Desktop' -Recurse -Include *.lnk | Sort-Object -Property LastWriteTime -ErrorAction Stop | Where-Object -FilterScript {
               ($_.LastWriteTime -ge (Get-Date).AddMinutes(-10))
      }).VersionInfo.FileName)

      foreach ($startmenuI in $startmenuItems)
      {
         Write-Host -Object "`r`n"
         Write-Host -Object 'The last 10 minutes a Desktop *.lnk file was created.' -ForegroundColor Yellow
         Write-Host -Object "To remove this item in this package please add the following to your install.ps1 under the comment 'Place extra actions here:'" -ForegroundColor Yellow
         Write-Host -Object "remove-item `"$startmenuI`" -confirm:`$false"` -ForegroundColor Green
         Write-Host -Object "`r`n"
      }
   }
   catch
   {
      Write-Host -Object 'Error looking for *.lnk files on the Desktop' -ForegroundColor Yellow
   }
}
#### Place extra actions here:

<#----Hieronder einde script voor installatie---#>

# Nu wordt de Transcript logging gestart
$null = (Stop-Transcript -ErrorAction SilentlyContinue)

# Na die commando wordt dit dus automatisch opgeslagen in de $logdir locatie
# Hier is wat om de log zo te splitsen zodat we enkel de laatste run hebben.
$split = [regex]::Escape('**********************')
$lastRun = ((Get-Content -Path $logfile -Raw) -split ($split))[-3]

if ($lastRun.Length -gt 32600)
{
   $lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
                  
# In de try / catch in de uitvoering hebben we $excode op 0 of op 1 gezet
# Op basis hiervan wordt de Log in de Event viewer op Error of op Informational gezet.
# Daarnaast wordt de eerder gedeclareerde functie fDetectionInRegistry ingezet die de detectiemethodiek in het register plaats met of een succesvolle melding van applicatie of onsuccesvol
if ($excode -eq 1) 
{
   $warning = 'Error'
}
else
{
   $warning = 'Information'
     
   if ($install -like '!!doe*') 
   {
      $null = (fDetectionInRegistry -succes $true)
   }
   else
   {
      $null = (Remove-Item -Path $regkeyApp -Force -Confirm:$false)
   }
}
#End; Write Log file

if ($warning -like 'Information')
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Information', 0x3)
}
Else
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Error', 0x3)
}

if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs' -ErrorAction SilentlyContinue) 
{
   if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -PathType Leaf -ErrorAction SilentlyContinue) 
   {
      $null = (Remove-Item -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
   }

   $null = (Copy-Item -Path 'c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx' -Destination 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
}
'@
         $installfile = $installfile.Replace('!!WinGetID!!', $WinGetID)
         $installfile = $installfile.Replace('!!DisplayName!!', $DisplayName)
         $installfile = $installfile.Replace('!!logdir!!', $logdir)
         $installfile = $installfile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
         $installfile = $installfile.Replace('!!versie!!', $versie)
         
         if ($wlo -ne $null)
         {
            $installfile = $installfile.Replace('!!locale!!', $wlo)
            $installfile = $installfile.Replace('!!localeSelected!!', $true)
         }
         else
         {
            $installfile = $installfile.Replace('!!localeSelected!!', $false)
         }
         
         if ($wve -ne $null)
         {
            $installfile = $installfile.Replace('!!versionWinget!!', $wve)
            $installfile = $installfile.Replace('!!versionSelected!!', $true)
         }
         else
         {
            $installfile = $installfile.Replace('!!versionSelected!!', $false)
         }
         
         if (!(Test-Path -Path ('{0}\{1}\{2}\source' -f $outputDirectory, $wingetID, $versie) -ErrorAction SilentlyContinue))
         {
            
            $null = (New-Item -ItemType Directory -Path ('{0}\{1}\{2}\source' -f $outputDirectory, $wingetID, $versie) -Force -Confirm:$false)
         }
         
         if (!(Test-Path -Path ('{0}\{1}\{2}\output' -f $outputDirectory, $wingetID, $versie) -ErrorAction SilentlyContinue))
         {
            
            $null = (New-Item -ItemType Directory -Path ('{0}\{1}\{2}\output' -f $outputDirectory, $wingetID, $versie) -Force -Confirm:$false)
         }
         
         $installfile = $installfile.Replace('!!WingetCommand!!', '!!doeinstall!!')
         $installFile | Out-File -FilePath ('{0}\{1}\{2}\source\install.ps1' -f $outputDirectory, $wingetID, $versie) -Force
         $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\{1}\{2}\source\IntunePrepTool_msgfile.dll' -f $outputDirectory, $wingetID, $versie) -Confirm:$false -Force)
         $installfile = $installfile.Replace('!!doeinstall!!', 'geeninstall')
         $null = ($installFile | Out-File -FilePath ('{0}\{1}\{2}\source\uninstall.ps1' -f $outputDirectory, $wingetID, $versie) -Force)
         $winget_output_textbox3.AppendText("`r`n")
         $winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\install.ps1 created")
         $winget_output_textbox3.AppendText("`r`n")
         $winget_output_textbox3.AppendText("$outputDirectory\$wingetID\$versie\source\uninstall.ps1 created")
         $winget_output_textbox3.AppendText("`r`n")
         $winget_output_textbox3.AppendText("You can test using Powershell ISE (button in GUI) or start the creation of intunewinfile`r`n")
         $winget_test_install_button1.Enabled = $true
         $winget_test_install_button1.Visible = $true
         $winget_uninstall_test_button.Enabled = $true
         $winget_uninstall_test_button.Visible = $true
         $winget_maakPackage_button1.Enabled = $true
         $winget_maakPackage_button1.Visible = $true
      }
   }
}

$winget_test_install_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $wid = $winget_WingetID_textbox1.text
   $vid = $versie_textbox2.Text
   $DisplayName = $winget_displayname_textbox1.text
   $wingetversie = $versie_textbox2.text
   $wingetid = $winget_WingetID_textbox1.text
   
   if ([Windows.Forms.MessageBox]::Show('Do you want to test installation?... ', 'Test', [Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
   {
      $voorIntall = (Get-ChildItem -Path 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs')
      & "$env:PSHome\powershell_ise.exe" -file "$config_packagefolder\$wingetid\$wingetversie\source\install.ps1"
   }
   
}

$winget_uninstall_test_button_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $wid = $winget_WingetID_textbox1.text
   $vid = $versie_textbox2.Text
   $DisplayName = $winget_displayname_textbox1.text
   $wingetversie = $versie_textbox2.text
   $wingetid = $winget_WingetID_textbox1.text
   
   if ([Windows.Forms.MessageBox]::Show('Do you want to test uninstallation?... ', 'Test', [Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
   {
      & "$env:PSHome\powershell_ise.exe" -file "$config_packagefolder\$wingetid\$wingetversie\source\uninstall.ps1"
   }
}

$winget_show_version_button1_Click = {
   $winget_show_string = $winget_WingetID_textbox1.text
   $winget_show_versions = winget.exe show $winget_show_string --versions --accept-source-agreements
   $winget_output_textbox3.Text = "Search results: `r`n"
   
   foreach ($twi in $winget_show_versions)
   {
      $winget_output_textbox3.AppendText("$twi `r`n")
   }
}
$wsearch_s_button1_Click = {
   ## - [ Section to initialize DataTable objects] - ##
   ## - Create DataTable:
   $table = (New-Object -TypeName System.Data.DataTable)
   ## - Defining DataTable object columns and rows properties:
   # - Column1 = "ID".
   $column = (New-Object -TypeName System.Data.DataColumn)
   $column.DataType = [type]::GetType('System.String')
   $column.ColumnName = 'ID'
   $table.Columns.Add($column)
   # - Column2 = "Name".
   $column = (New-Object -TypeName System.Data.DataColumn)
   $column.DataType = [type]::GetType('System.String')
   $column.ColumnName = 'Name'
   $table.Columns.Add($column)
   $wsearchstring = $wsearch_s_textbox1.text
   $wsearch__winget_search_output = winget.exe search $wsearchstring --accept-source-agreements
   
   foreach ($wsearch_l in $wsearch__winget_search_output)
   {
      if ($wsearch_l -like 'Name*')
      {
         $wsearch_IdStart = $wsearch_l.IndexOf('Id')
         $wsearch_VersionStart = $wsearch_l.IndexOf('Version')
         $wsearch_MatchStart = $wsearch_l.IndexOf('Match')
         $wsearch_SourceStart = $wsearch_l.IndexOf('Source')
      }
      
      if (($wsearch_l -notlike 'Name*') -and ($wsearch_l -notlike '---*') -and ($wsearch_l -notlike '   -*'))
      {
         $row = $table.NewRow()
         
         $row['Name'] = $wsearch_l.substring(0, $wsearch_IdStart)
         $split = $wsearch_VersionStart - $wsearch_IdStart
         $row['ID'] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [StringSplitOptions]::RemoveEmptyEntries) -join ''
         $table.Rows.Add($row)
         
         ## - Save changes to the table:
         $table.AcceptChanges()
         
         ## - Display custom data created:
         $wsearch_datagridview1.DataSource = $table
         
      }
   }
}

Write-Host $wsearch_datagridview1

$cunfig_folder_pacakaging_button1_Click = {
   if ($config_packagefolder_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
   {
      $config_packagefolder_textbox.Text = $config_packagefolder_folderbrowsermoderndialog1.SelectedPath
   }
}

$config_logfolder_target_button1_Click = {
   if ($config_logfolder_target_folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
   {
      $config_logfoldertarger_textbox.Text = $config_logfolder_target_folderbrowsermoderndialog1.SelectedPath
   }
}

$upload_logo_button2_Click = {
   $upload_logo_openfiledialog1.ShowDialog()
   [string]$logo_org_path = $upload_logo_openfiledialog1.FileNames
   [string]$config_csv_path = $config_csv_openfiledialog1.FileNames
   $ConfigCSVImport = (Import-Csv -Path $config_csv_path)
   $itwnf = $ConfigCSVImport.IntuneWinFile
   $filepath = $config_csv_path.TrimEnd('config.csv')
   $null = (Copy-Item -Path $logo_org_path -Destination ('{0}\logo.png' -f $filepath) -Force -Confirm:$false)
}

$powershell_Empty_Scheduled_Task_radiobutton_MouseHover = {
   $hover_textbox1.Text = 'Basic template: Creates install.ps1 and uninstall.ps1. With detection method in registry for Intune. And logging to the in Config defined log target'
}

$powershell_scheduledtask_radiobutton_MouseHover = {
   $hover_textbox1.Text = 'Template scheduled task: Creates install.ps1 that creates scheduled task to run Powershell script. Uninstall.ps1 cleans up the scheduled task'
}

$powershell_package_name_textbox1_MouseHover = {
   $hover_textbox1.Text = 'Package Name (String)'
}

$powershell_package_version_textbox1_MouseHover = {
   $hover_textbox1.Text = 'Package Version (String)'
}

$powershell_create_package_dir_button1_MouseHover = {
   $hover_textbox1.Text = 'Creates package directory based on the chosen package folder (Config) and Package Name & Version'
}

$powershell_open_package_directory_button1_MouseHover = {
   $hover_textbox1.Text = 'Open Package\source directory; Here you can place additional files when needed.'
}

$config_listbox_MouseHover = {
   $hover_textbox1.Text = 'Select a customer / tenant'
}

$config_customername_textbox_MouseHover = {
   $hover_textbox1.Text = 'Customer name'
}

$config_logfoldertarger_textbox_MouseHover = {
   $hover_textbox1.Text = 'Log folder target. Location is used for Powershell transcript logging used by the packages; Also used for MSIEXEC logging when using an MSI source'
}

$config_packagefolder_textbox_MouseHover = {
   $hover_textbox1.Text = "Package folder. Must be a local folder. For example: when you create a package with Package Name: 'IntunePrepTool' with Package Version '1.0.3.5', and your package folder is c:\sources\gotomars. The folder created for this package = c:\sources\gotomars\IntunePrepTool\1.0.3.5\"
}

$config_tenanturl_textbox_MouseHover = {
   $hover_textbox1.Text = 'Tenant url is used for the upload function'
}

$helpbutton1_MouseHover = {
   $hover_textbox1.Text = 'Opens https://github.com/rink-turksma/IntunePrepTool in Edge; If you need more information.'
}

$config_delete_button1_MouseHover = {
   $hover_textbox1.Text = "Deletes selected customer. (Customer list is stored in CSV file: 'C:\Program Files\IntunePrepTool\config_customerinfo.csv')"
}

$config_new_button_MouseHover = {
   $hover_textbox1.Text = "Click here to create new customer. Click save when done. (Customer list is stored in CSV file: 'C:\Program Files\IntunePrepTool\config_customerinfo.csv')"
}

$config_save_button_MouseHover = {
   $hover_textbox1.Text = "Save to append new customer to list. (Customer list is stored in CSV file: 'C:\Program Files\IntunePrepTool\config_customerinfo.csv')"
}

$config_check_updates_button1_Click = {
   $config_check_updates = @'
winget upgrade rink-turksma.IntunePrepTool
'@
   if (!(Test-Path -Path 'C:\Program Files\IntunePrepTool\' -PathType Container -ErrorAction SilentlyContinue))
   {
      [void][Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
   }
   else
   {
      if (!(Test-Path -Path 'C:\Program Files\IntunePrepTool\wingetupdate.ps1' -PathType Leaf -ErrorAction SilentlyContinue))
      {
         $null = ($config_check_updates | Out-File -FilePath 'C:\Program Files\IntunePrepTool\wingetupdate.ps1' -Force -Confirm:$false)
      }
      
      & "$env:PSHome\powershell_ise.exe" -file 'C:\Program Files\IntunePrepTool\wingetupdate.ps1'
   }
   
}

$config_check_updates_button1_MouseHover = {
   $hover_textbox1.Text = "Click to open Powershell ISE; Run script to upgrade IntunePrepTool using Winget; When you get the message: 'No applicable upgrade found.' You're already up to date. "
}

$winget_WingetID_textbox1_MouseHover = {
   $hover_textbox1.Text = 'Exact Winget ID here; You can search for the Winget ID using Tabpage Tools'
}

$winget_checkurl_button1_MouseHover = {
   $hover_textbox1.Text = 'Shows download URL in Popup window for chosen WingetID'
}

$winget_show_version_button1_MouseHover = {
   $hover_textbox1.Text = 'Shows available versions for chosen WingetID; Output in textbox on the right side'
}

$powershell_package_name_textbox1_TextChanged = {
   if ($config_listbox.SelectedItem -eq $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
   }
}

$winget_displayname_textbox1_MouseHover = {
   $hover_textbox1.Text = 'Package name (string)'
}

$versie_textbox2_MouseHover = {
   $hover_textbox1.Text = 'Package version (string)'
}

$winget_locale_checkbox1_MouseHover = {
   $hover_textbox1.Text = "'Winget Show' (Also available in tabpage Tools) can be used to find out if the chosen package is available in other languages. Check if you want to specify Locale. Like 'en-US' ; "
}

$config_listbox_SelectedValueChanged = {
   $hover_textbox1.Text + $config_listbox.SelectedItem
}

$winget_version_checkbox_MouseHover = {
   $hover_textbox1.Text = "Check checkbox to select specify version. When you don't the latest version is used."
}

$winget_test_install_button1_MouseHover = {
   $hover_textbox1.Text = "When youre test and edit the installation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_uninstall_test_button_MouseHover = {
   $hover_textbox1.Text = "When youre test and edit the uninstallation in Powershell_ISE directly. When you're done click save and close Powershell_ISE"
}

$winget_maakPackage_button1_MouseHover = {
   $hover_textbox1.Text = "Create Intunewin file; don't forget to upload logo after creating Intunewinfile if you wan't to use the upload option."
}

$msi_buttonOpenMSIFile_MouseHover = {
   $hover_textbox1.Text = 'Open *.msi file to use for this package.'
}

$msi_packagenaam_textbox1_MouseHover = {
   $hover_textbox1.Text = 'Package name (string).'
}

$msi_versie_textbox1_MouseHover = {
   $hover_textbox1.Text = 'Package version (string).'
}

$msi_buttonCreatePackageDirecto_MouseHover = {
   $hover_textbox1.Text = 'After selecting MSI, Package name and package version, click Create package directory; The MSI file will be copied to the generated to the package directory'
}

$msi_OpenSourceDir_button1_MouseHover = {
   $hover_textbox1.Text = 'Click Open source directory to open the source directory for your package.You can add extra files when needed.'
}

$msi_install_par_textbox3_MouseHover = {
   $hover_textbox1.Text = 'MSIEXEC install parameters here; after creating package directory, a basic install string is already visible. Edit when needed. Leave the logging options as is. '
}

$msi_button1CreateInstallScript_MouseHover = {
   $hover_textbox1.Text = 'Click create Install script to create the install.ps1 and i.cmd file; install.ps1 will provide detection method and logging; i.cmd is just the above filled install parameters in as batch file;  '
}

$msi_test_install_button1_MouseHover = {
   $hover_textbox1.Text = 'Click Test install to test your installation. Powershell_ISE will read the MSIEXEC log file and will show you a possible uninstall string. That you can use for uninstall script. Also when shorcuts are created the install.ps1 will give you the option to remove it.'
}

$msi_uninstall_par_textbox1_MouseHover = {
   $hover_textbox1.Text = 'Paste the suggested uninstall string from the install.ps1 here. Then click create uninstall script'
}

$msi_button3CreateUninstallScri_MouseHover = {
   $hover_textbox1.Text = 'Create uninstall script'
}

$msi_button4TestUninstallPowers_MouseHover = {
   $hover_textbox1.Text = 'Test uninstall using Powershell_ISE; You can edit the uninstall.ps1 directly. If you need to change the u.cmd file. Please click Open source directory and edit. '
}

$msi_button5CreateIntunewinFile_MouseHover = {
   $hover_textbox1.Text = 'Create intunewin package. This can take a while, depending on the size of your package. Application (STA) will not respond during creation of Intunewin'
}

$msi_buttonUploadLogoPNG_MouseHover = {
   $hover_textbox1.Text = 'When you plan to use Upload function. Please chose PNG file first. Used in Company portal'
}

$winget_remediations_createscripts_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $winget_remediations_name = $winget_remediations_name_textbox1.Text
   
   if ($winget_remediations_name -like $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected')
   }
   else
   {
      $winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
      
      if ($winget_remediations_wingetid -like $null)
      {
         [void][Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected')
      }
      else
      {
         $remediate_winget_version = $remediate_winget_version_textbox1.Text
         
         if ($remediate_winget_version -like $null)
         {
            [void][Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected')
         }
         else
         {
            $remediate_detectFile = @'
$WingetID = '!!wingetid!!'
$Name = '!!name!!'
$Version = '!!version!!'
$LogFolderTarget = '!!logfoldertarget!!'
$trancriptlocation = ('{0}\{1}{2}-remediationsDetection.txt' -f $LogFolderTarget, $Name, $Version)

# Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
   New-Item -ItemType Directory -Path $LogFolderTarget
}

$null = (Start-Transcript -Path $trancriptlocation -Append)

$Date = Get-Date
Write-Host -Object $Date
Write-Host -Object ('Detection of {0}' -f $WingetID)
Write-Host -Object ('Detection name : {0}' -f $Name)
Write-Host -Object ('Detection version: {0}' -f $Version)
$winget_exe = Resolve-Path -Path 'C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe'

if ($winget_exe.count -gt 1)
{
   $winget_exe = $winget_exe[-1].Path
}

$null = (Stop-Transcript -ErrorAction SilentlyContinue)

exit [int] (& $winget_exe list --id $WingetID | Select-String -Pattern '\bVersion\s+Available\b' -Quiet)
'@
            $remediate_remediateFile = @'
$WingetID = '!!wingetid!!'
$Name = '!!name!!'
$Version = '!!version!!'
$LogFolderTarget = '!!logfoldertarget!!'
$trancriptlocation = ('{0}\{1}{2}-remediationsRemediate.txt' -f $LogFolderTarget, $name, $version)

# Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget -ErrorAction SilentlyContinue))
{
	
   $null = (New-Item -ItemType Directory -Path $LogFolderTarget -Force -Confirm:$false)
}

$null = (Start-Transcript -Path $trancriptlocation -append)
$Date = get-date
write-host $date
write-host ('Upgrade of {0}' -f $WingetID)
write-host ('Detection name : {0}' -f $Name)
write-host ('Detection version: {0}' -f $version)
$winget_exe = Resolve-Path -Path 'C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe'

if ($winget_exe.count -gt 1)
{
   $winget_exe = $winget_exe[-1].Path
}

$null = (Stop-Transcript -ErrorAction SilentlyContinue)

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
'@
            $remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
            $remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
            $remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
            $remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
            $remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
            $remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
            $remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
            $remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
            
            if (!(Test-Path -Path ('{0}\{1}\{2}\source' -f $config_packagefolder, $winget_remediations_name, $remediate_winget_version) -ErrorAction SilentlyContinue))
            {
               $null = (New-Item -ItemType Directory -Path ('{0}\{1}\{2}\source' -f $config_packagefolder, $winget_remediations_name, $remediate_winget_version) -Force -Confirm:$false)
            }
            
            $null = ($remediate_detectFile | Out-File -FilePath ('{0}\{1}\{2}\source\detect.ps1' -f $config_packagefolder, $winget_remediations_name, $remediate_winget_version) -Force -Encoding utf8)
            $null = ($remediate_remediateFile | Out-File -FilePath ('{0}\{1}\{2}\source\remediate.ps1' -f $config_packagefolder, $winget_remediations_name, $remediate_winget_version) -Force -Encoding utf8)
            $remadiations_winget_textbox2.Text = 'Created detection.ps1 and remediate.ps1'
            $remadiations_winget_textbox2.AppendText("`r`n")
            $remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
            $remadiations_winget_textbox2.AppendText("`r`n")
            $remadiations_winget_textbox2.AppendText('Upload not yet available for Remediations.. For now use the Intune Admin Portal')
            $remadiations_winget_textbox2.AppendText("`r`n")
            $remadiations_winget_textbox2.AppendText('Please reopen IntunePrepTool to create more Remediations scripts')
         }
      }
   }
   
   $remediations_winget_open_button1.Enabled = $true
   $remediations_winget_open_button1.Visible = $true
}

$configToolStripMenuItem_Click = {
   $download_tabcontrol1.Enabled = $false
   $download_tabcontrol1.Visible = $False
   $download_tabcontrol1.Dock = 'None'
   $tools_uninstallstring_tabcontrol1.Dock = 'none'
   $tools_uninstallstring_tabcontrol1.Enabled = $false
   $tools_uninstallstring_tabcontrol1.Visible = $false
   $tools_winget_searchtabcontrol1.Dock = 'None'
   $tools_winget_searchtabcontrol1.Enabled = $false
   $tools_winget_searchtabcontrol1.Visible = $false
   $upload_intunewin_tabcontrol2.Dock = 'None'
   $upload_intunewin_tabcontrol2.Enabled = $false
   $upload_intunewin_tabcontrol2.Visible = $false
   $package_ScheduledTask_tabcontrol2.Dock = 'None'
   $package_ScheduledTask_tabcontrol2.Enabled = $false
   $package_ScheduledTask_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Dock = 'None'
   $package_weblink_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Dock = 'None'
   $Remediations_winget_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Enabled = $false
   $package_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Dock = 'None'
   $package_msi_tabcontrol2.Enabled = $false
   $package_msi_tabcontrol2.Visible = $false
   $package_msi_tabcontrol2.Dock = 'None'
   $package_exe_tabcontrol2.Enabled = $false
   $package_exe_tabcontrol2.Visible = $false
   $package_exe_tabcontrol2.Dock = 'None'
   $config_tabcontrol2.Enabled = $true
   $config_tabcontrol2.Visible = $true
   $config_tabcontrol2.Dock = 'Fill'
}

$wingetToolStripMenuItem_Click = {
   $download_tabcontrol1.Enabled = $false
   $download_tabcontrol1.Visible = $False
   $download_tabcontrol1.Dock = 'None'
   $tools_uninstallstring_tabcontrol1.Dock = 'none'
   $tools_uninstallstring_tabcontrol1.Enabled = $false
   $tools_uninstallstring_tabcontrol1.Visible = $false
   $tools_winget_searchtabcontrol1.Dock = 'None'
   $tools_winget_searchtabcontrol1.Enabled = $false
   $tools_winget_searchtabcontrol1.Visible = $false
   $upload_intunewin_tabcontrol2.Dock = 'None'
   $upload_intunewin_tabcontrol2.Enabled = $false
   $upload_intunewin_tabcontrol2.Visible = $false
   $package_ScheduledTask_tabcontrol2.Dock = 'None'
   $package_ScheduledTask_tabcontrol2.Enabled = $false
   $package_ScheduledTask_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Dock = 'None'
   $package_weblink_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Dock = 'None'
   $Remediations_winget_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Visible = $false
   $config_tabcontrol2.Enabled = $false
   $config_tabcontrol2.Visible = $false
   $config_tabcontrol2.Dock = 'None'
   $package_msi_tabcontrol2.Enabled = $false
   $package_msi_tabcontrol2.Visible = $false
   $package_msi_tabcontrol2.Dock = 'None'
   $package_exe_tabcontrol2.Enabled = $false
   $package_exe_tabcontrol2.Visible = $false
   $package_exe_tabcontrol2.Dock = 'None'
   $package_winget_tabcontrol2.Enabled = $true
   $package_winget_tabcontrol2.Visible = $true
   $package_winget_tabcontrol2.Dock = 'Fill'
}
$scheduledTaskToolStripMenuItem_Click = {
   $download_tabcontrol1.Enabled = $false
   $download_tabcontrol1.Visible = $False
   $download_tabcontrol1.Dock = 'None'
   $tools_uninstallstring_tabcontrol1.Dock = 'none'
   $tools_uninstallstring_tabcontrol1.Enabled = $false
   $tools_uninstallstring_tabcontrol1.Visible = $false
   $tools_winget_searchtabcontrol1.Dock = 'None'
   $tools_winget_searchtabcontrol1.Enabled = $false
   $tools_winget_searchtabcontrol1.Visible = $false
   $upload_intunewin_tabcontrol2.Dock = 'None'
   $upload_intunewin_tabcontrol2.Enabled = $false
   $upload_intunewin_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Dock = 'None'
   $package_weblink_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Dock = 'None'
   $Remediations_winget_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Enabled = $false
   $package_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Dock = 'None'
   $config_tabcontrol2.Enabled = $false
   $config_tabcontrol2.Visible = $false
   $config_tabcontrol2.Dock = 'None'
   $package_msi_tabcontrol2.Enabled = $false
   $package_msi_tabcontrol2.Visible = $false
   $package_msi_tabcontrol2.Dock = 'None'
   $package_exe_tabcontrol2.Enabled = $false
   $package_exe_tabcontrol2.Visible = $false
   $package_exe_tabcontrol2.Dock = 'None'
   
   $package_ScheduledTask_tabcontrol2.Dock = 'Fill'
   $package_ScheduledTask_tabcontrol2.Enabled = $true
   $package_ScheduledTask_tabcontrol2.Visible = $true
}

$mSIToolStripMenuItem_Click = {
   $download_tabcontrol1.Enabled = $false
   $download_tabcontrol1.Visible = $False
   $download_tabcontrol1.Dock = 'None'
   $tools_uninstallstring_tabcontrol1.Dock = 'none'
   $tools_uninstallstring_tabcontrol1.Enabled = $false
   $tools_uninstallstring_tabcontrol1.Visible = $false
   $tools_winget_searchtabcontrol1.Dock = 'None'
   $tools_winget_searchtabcontrol1.Enabled = $false
   $tools_winget_searchtabcontrol1.Visible = $false
   $upload_intunewin_tabcontrol2.Dock = 'None'
   $upload_intunewin_tabcontrol2.Enabled = $false
   $upload_intunewin_tabcontrol2.Visible = $false
   $package_ScheduledTask_tabcontrol2.Dock = 'None'
   $package_ScheduledTask_tabcontrol2.Enabled = $false
   $package_ScheduledTask_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Dock = 'None'
   $package_weblink_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Dock = 'None'
   $Remediations_winget_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Enabled = $false
   $package_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Dock = 'None'
   $config_tabcontrol2.Enabled = $false
   $config_tabcontrol2.Visible = $false
   $config_tabcontrol2.Dock = 'None'
   $package_exe_tabcontrol2.Enabled = $false
   $package_exe_tabcontrol2.Visible = $false
   $package_exe_tabcontrol2.Dock = 'None'
   $package_msi_tabcontrol2.Enabled = $true
   $package_msi_tabcontrol2.Visible = $true
   $package_msi_tabcontrol2.Dock = 'Fill'
}

$eXEToolStripMenuItem_Click = {
   $download_tabcontrol1.Enabled = $false
   $download_tabcontrol1.Visible = $False
   $download_tabcontrol1.Dock = 'None'
   $tools_uninstallstring_tabcontrol1.Dock = 'none'
   $tools_uninstallstring_tabcontrol1.Enabled = $false
   $tools_uninstallstring_tabcontrol1.Visible = $false
   $tools_winget_searchtabcontrol1.Dock = 'None'
   $tools_winget_searchtabcontrol1.Enabled = $false
   $tools_winget_searchtabcontrol1.Visible = $false
   $upload_intunewin_tabcontrol2.Dock = 'None'
   $upload_intunewin_tabcontrol2.Enabled = $false
   $upload_intunewin_tabcontrol2.Visible = $false
   $package_ScheduledTask_tabcontrol2.Dock = 'None'
   $package_ScheduledTask_tabcontrol2.Enabled = $false
   $package_ScheduledTask_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Dock = 'None'
   $package_weblink_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Dock = 'None'
   $Remediations_winget_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Enabled = $false
   $package_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Dock = 'None'
   $config_tabcontrol2.Enabled = $false
   $config_tabcontrol2.Visible = $false
   $config_tabcontrol2.Dock = 'None'
   $package_msi_tabcontrol2.Enabled = $false
   $package_msi_tabcontrol2.Visible = $false
   $package_msi_tabcontrol2.Dock = 'None'
   $package_exe_tabcontrol2.Enabled = $true
   $package_exe_tabcontrol2.Visible = $true
   $package_exe_tabcontrol2.Dock = 'Fill'
}

$wingetUpdateToolStripMenuItem_Click = {
   $download_tabcontrol1.Enabled = $false
   $download_tabcontrol1.Visible = $False
   $download_tabcontrol1.Dock = 'None'
   $tools_uninstallstring_tabcontrol1.Dock = 'none'
   $tools_uninstallstring_tabcontrol1.Enabled = $false
   $tools_uninstallstring_tabcontrol1.Visible = $false
   $tools_winget_searchtabcontrol1.Dock = 'None'
   $tools_winget_searchtabcontrol1.Enabled = $false
   $tools_winget_searchtabcontrol1.Visible = $false
   $upload_intunewin_tabcontrol2.Dock = 'None'
   $upload_intunewin_tabcontrol2.Enabled = $false
   $upload_intunewin_tabcontrol2.Visible = $false
   $package_ScheduledTask_tabcontrol2.Dock = 'None'
   $package_ScheduledTask_tabcontrol2.Enabled = $false
   $package_ScheduledTask_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Dock = 'None'
   $package_weblink_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Enabled = $false
   $package_winget_tabcontrol2.Enabled = $false
   $package_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Dock = 'None'
   $config_tabcontrol2.Enabled = $false
   $config_tabcontrol2.Visible = $false
   $config_tabcontrol2.Dock = 'None'
   $package_msi_tabcontrol2.Enabled = $false
   $package_msi_tabcontrol2.Visible = $false
   $package_msi_tabcontrol2.Dock = 'None'
   $package_exe_tabcontrol2.Enabled = $false
   $package_exe_tabcontrol2.Visible = $false
   $package_exe_tabcontrol2.Dock = 'None'
   $Remediations_winget_tabcontrol2.Dock = 'Fill'
   $Remediations_winget_tabcontrol2.Enabled = $true
   $Remediations_winget_tabcontrol2.Visible = $true
}

$weblinkToolStripMenuItem_Click = {
   $download_tabcontrol1.Enabled = $false
   $download_tabcontrol1.Visible = $False
   $download_tabcontrol1.Dock = 'None'
   $tools_uninstallstring_tabcontrol1.Dock = 'none'
   $tools_uninstallstring_tabcontrol1.Enabled = $false
   $tools_uninstallstring_tabcontrol1.Visible = $false
   $tools_winget_searchtabcontrol1.Dock = 'None'
   $tools_winget_searchtabcontrol1.Enabled = $false
   $tools_winget_searchtabcontrol1.Visible = $false
   $upload_intunewin_tabcontrol2.Dock = 'None'
   $upload_intunewin_tabcontrol2.Enabled = $false
   $upload_intunewin_tabcontrol2.Visible = $false
   $package_ScheduledTask_tabcontrol2.Dock = 'None'
   $package_ScheduledTask_tabcontrol2.Enabled = $false
   $package_ScheduledTask_tabcontrol2.Visible = $false
   $Remediations_winget_tabcontrol2.Dock = 'None'
   $Remediations_winget_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Enabled = $false
   $package_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Dock = 'None'
   $config_tabcontrol2.Enabled = $false
   $config_tabcontrol2.Visible = $false
   $config_tabcontrol2.Dock = 'None'
   $package_msi_tabcontrol2.Enabled = $false
   $package_msi_tabcontrol2.Visible = $false
   $package_msi_tabcontrol2.Dock = 'None'
   $package_exe_tabcontrol2.Enabled = $false
   $package_exe_tabcontrol2.Visible = $false
   $package_exe_tabcontrol2.Dock = 'None'
   $package_weblink_tabcontrol2.Dock = 'Fill'
   $package_weblink_tabcontrol2.Visible = $true
   $package_weblink_tabcontrol2.Enabled = $true
}

$intunewinToolStripMenuItem_Click = {
   $download_tabcontrol1.Enabled = $false
   $download_tabcontrol1.Visible = $False
   $download_tabcontrol1.Dock = 'None'
   $tools_uninstallstring_tabcontrol1.Dock = 'none'
   $tools_uninstallstring_tabcontrol1.Enabled = $false
   $tools_uninstallstring_tabcontrol1.Visible = $false
   $tools_winget_searchtabcontrol1.Dock = 'None'
   $tools_winget_searchtabcontrol1.Enabled = $false
   $tools_winget_searchtabcontrol1.Visible = $false
   $package_ScheduledTask_tabcontrol2.Dock = 'None'
   $package_ScheduledTask_tabcontrol2.Enabled = $false
   $package_ScheduledTask_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Dock = 'None'
   $package_weblink_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Dock = 'None'
   $Remediations_winget_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Enabled = $false
   $package_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Dock = 'None'
   $config_tabcontrol2.Enabled = $false
   $config_tabcontrol2.Visible = $false
   $config_tabcontrol2.Dock = 'None'
   $package_msi_tabcontrol2.Enabled = $false
   $package_msi_tabcontrol2.Visible = $false
   $package_msi_tabcontrol2.Dock = 'None'
   $package_exe_tabcontrol2.Enabled = $false
   $package_exe_tabcontrol2.Visible = $false
   $package_exe_tabcontrol2.Dock = 'None'
   $upload_intunewin_tabcontrol2.Dock = 'Fill'
   $upload_intunewin_tabcontrol2.Enabled = $true
   $upload_intunewin_tabcontrol2.Visible = $true
}

$wingetSearchShowVersionToolStripMenuItem_Click = {
   $download_tabcontrol1.Enabled = $false
   $download_tabcontrol1.Visible = $False
   $download_tabcontrol1.Dock = 'None'
   $tools_uninstallstring_tabcontrol1.Dock = 'none'
   $tools_uninstallstring_tabcontrol1.Enabled = $false
   $tools_uninstallstring_tabcontrol1.Visible = $false
   $upload_intunewin_tabcontrol2.Dock = 'None'
   $upload_intunewin_tabcontrol2.Enabled = $false
   $upload_intunewin_tabcontrol2.Visible = $false
   $package_ScheduledTask_tabcontrol2.Dock = 'None'
   $package_ScheduledTask_tabcontrol2.Enabled = $false
   $package_ScheduledTask_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Dock = 'None'
   $package_weblink_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Dock = 'None'
   $Remediations_winget_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Enabled = $false
   $package_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Dock = 'None'
   $config_tabcontrol2.Enabled = $false
   $config_tabcontrol2.Visible = $false
   $config_tabcontrol2.Dock = 'None'
   $package_msi_tabcontrol2.Enabled = $false
   $package_msi_tabcontrol2.Visible = $false
   $package_msi_tabcontrol2.Dock = 'None'
   $package_exe_tabcontrol2.Enabled = $false
   $package_exe_tabcontrol2.Visible = $false
   $package_exe_tabcontrol2.Dock = 'None'
   $tools_winget_searchtabcontrol1.Dock = 'Fill'
   $tools_winget_searchtabcontrol1.Enabled = $true
   $tools_winget_searchtabcontrol1.Visible = $true
}

$findUninstallStringsToolStripMenuItem_Click = {
   $download_tabcontrol1.Enabled = $false
   $download_tabcontrol1.Visible = $False
   $download_tabcontrol1.Dock = 'None'
   $tools_winget_searchtabcontrol1.Dock = 'None'
   $tools_winget_searchtabcontrol1.Enabled = $false
   $tools_winget_searchtabcontrol1.Visible = $false
   $upload_intunewin_tabcontrol2.Dock = 'None'
   $upload_intunewin_tabcontrol2.Enabled = $false
   $upload_intunewin_tabcontrol2.Visible = $false
   $package_ScheduledTask_tabcontrol2.Dock = 'None'
   $package_ScheduledTask_tabcontrol2.Enabled = $false
   $package_ScheduledTask_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Dock = 'None'
   $package_weblink_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Dock = 'None'
   $Remediations_winget_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Enabled = $false
   $package_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Dock = 'None'
   $config_tabcontrol2.Enabled = $false
   $config_tabcontrol2.Visible = $false
   $config_tabcontrol2.Dock = 'None'
   $package_msi_tabcontrol2.Enabled = $false
   $package_msi_tabcontrol2.Visible = $false
   $package_msi_tabcontrol2.Dock = 'None'
   $package_exe_tabcontrol2.Enabled = $false
   $package_exe_tabcontrol2.Visible = $false
   $package_exe_tabcontrol2.Dock = 'None'
   $tools_uninstallstring_tabcontrol1.Dock = 'Fill'
   $tools_uninstallstring_tabcontrol1.Enabled = $true
   $tools_uninstallstring_tabcontrol1.Visible = $true
}

$sourceFromWingetToolStripMenuItem_Click = {
   $download_tabcontrol1.Enabled = $true
   $download_tabcontrol1.Visible = $true
   $download_tabcontrol1.Dock = 'Fill'
   $tools_winget_searchtabcontrol1.Dock = 'None'
   $tools_winget_searchtabcontrol1.Enabled = $false
   $tools_winget_searchtabcontrol1.Visible = $false
   $upload_intunewin_tabcontrol2.Dock = 'None'
   $upload_intunewin_tabcontrol2.Enabled = $false
   $upload_intunewin_tabcontrol2.Visible = $false
   $package_ScheduledTask_tabcontrol2.Dock = 'None'
   $package_ScheduledTask_tabcontrol2.Enabled = $false
   $package_ScheduledTask_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Dock = 'None'
   $package_weblink_tabcontrol2.Visible = $false
   $package_weblink_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Dock = 'None'
   $Remediations_winget_tabcontrol2.Enabled = $false
   $Remediations_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Enabled = $false
   $package_winget_tabcontrol2.Visible = $false
   $package_winget_tabcontrol2.Dock = 'None'
   $config_tabcontrol2.Enabled = $false
   $config_tabcontrol2.Visible = $false
   $config_tabcontrol2.Dock = 'None'
   $package_msi_tabcontrol2.Enabled = $false
   $package_msi_tabcontrol2.Visible = $false
   $package_msi_tabcontrol2.Dock = 'None'
   $package_exe_tabcontrol2.Enabled = $false
   $package_exe_tabcontrol2.Visible = $false
   $package_exe_tabcontrol2.Dock = 'None'
   $tools_uninstallstring_tabcontrol1.Dock = 'None'
   $tools_uninstallstring_tabcontrol1.Enabled = $false
   $tools_uninstallstring_tabcontrol1.Visible = $false
}

$weblink_packagename_TextChanged = {
   if ($config_listbox.SelectedItem -eq $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
   }
}

$remediate_winget_version_textbox1_TextChanged = {
   if ($config_listbox.SelectedItem -eq $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
   }
}

$winget_remediations_name_textbox1_TextChanged = {
   if ($config_listbox.SelectedItem -eq $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
   }
}

$winget_remediations_wingetid_textbox1_TextChanged = {
   if ($config_listbox.SelectedItem -eq $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
   }
}

$remediations_winget_upload_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $winget_remediations_name = $winget_remediations_name_textbox1.Text
   
   if ($winget_remediations_name -like $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please fill the Name textbox', 'No Name selected')
   }
   else
   {
      $winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
      
      if ($winget_remediations_wingetid -like $null)
      {
         [void][Windows.Forms.MessageBox]::Show('Please fill the WingetID textbox', 'No WingetID selected')
      }
      else
      {
         $remediate_winget_version = $remediate_winget_version_textbox1.Text
         
         if ($remediate_winget_version -like $null)
         {
            [void][Windows.Forms.MessageBox]::Show('Please fill the version textbox', 'No version selected')
         }
         else
         {
            $remediate_detectFile = @'
$WingetID = '!!wingetid!!'
$Name = '!!name!!'
$Version = '!!version!!'
$LogFolderTarget = '!!logfoldertarget!!'
$trancriptlocation = ('{0}\{1}{2}-remediationsDetection.txt' -f $LogFolderTarget, $Name, $Version)

# Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
   $null = (New-Item -ItemType Directory -Path $LogFolderTarget -Force -Confirm:$false)
}

$null = (Start-Transcript -Path $trancriptlocation -Append)
$Date = Get-Date
Write-Host -Object $Date
Write-Host -Object ('Detection of {0}' -f $WingetID)
Write-Host -Object ('Detection name : {0}' -f $Name)
Write-Host -Object ('Detection version: {0}' -f $Version)
$winget_exe = Resolve-Path -Path 'C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_x64__8wekyb3d8bbwe\winget.exe'

if ($winget_exe.count -gt 1)
{
   $winget_exe = $winget_exe[-1].Path
}

$null = (Stop-Transcript -ErrorAction SilentlyContinue)

exit [int] (& $winget_exe list --id $WingetID | Select-String -Pattern '\bVersion\s+Available\b' -Quiet)
'@
            $remediate_remediateFile = @'
$WingetID = '!!wingetid!!'
$Name = '!!name!!'
$Version = '!!version!!'
$LogFolderTarget = '!!logfoldertarget!!'
$trancriptlocation = ('{0}\{1}{2}-remediationsRemediate.txt' -f $LogFolderTarget, $Name, $Version)

# Creates logdirectory if needed.
if (!(Test-Path -Path $LogFolderTarget))
{
   $null = (New-Item -ItemType Directory -Path $LogFolderTarget -Force -Confirm:$false)
}

$null = (Start-Transcript -Path $trancriptlocation -Append)
$Date = Get-Date
Write-Host -Object $Date
Write-Host -Object ('Upgrade of {0}' -f $WingetID)
Write-Host -Object ('Detection name : {0}' -f $Name)
Write-Host -Object ('Detection version: {0}' -f $Version)
$winget_exe = (Resolve-Path -Path 'C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*_*__8wekyb3d8bbwe\winget.exe')

if ($winget_exe.count -gt 1)
{
   $winget_exe = $winget_exe[-1].Path
}

$null = (Stop-Transcript -ErrorAction SilentlyContinue)

& $winget_exe upgrade --id $WingetID --accept-package-agreements --accept-source-agreements -h
'@
            
            $remediate_detectFile = $remediate_detectFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
            $remediate_detectFile = $remediate_detectFile.Replace('!!name!!', $winget_remediations_name)
            $remediate_detectFile = $remediate_detectFile.Replace('!!version!!', $remediate_winget_version)
            $remediate_detectFile = $remediate_detectFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
            $remediate_remediateFile = $remediate_remediateFile.Replace('!!wingetid!!', "$winget_remediations_wingetid")
            $remediate_remediateFile = $remediate_remediateFile.Replace('!!name!!', $winget_remediations_name)
            $remediate_remediateFile = $remediate_remediateFile.Replace('!!version!!', $remediate_winget_version)
            $remediate_remediateFile = $remediate_remediateFile.Replace('!!logfoldertarget!!', $config_logfoldertarget)
            
            if (!(Test-Path -Path ('{0}\{1}\{2}\source' -f $config_packagefolder, $winget_remediations_name, $remediate_winget_version) -ErrorAction SilentlyContinue))
            {
               $null = (New-Item -ItemType Directory -Path ('{0}\{1}\{2}\source' -f $config_packagefolder, $winget_remediations_name, $remediate_winget_version) -Force -Confirm:$false)
            }
            
            $null = ($remediate_detectFile | Out-File -FilePath ('{0}\{1}\{2}\source\detect.ps1' -f $config_packagefolder, $winget_remediations_name, $remediate_winget_version) -Force -Encoding utf8 -Confirm:$false)
            $null = ($remediate_remediateFile | Out-File -FilePath ('{0}\{1}\{2}\source\remediate.ps1' -f $config_packagefolder, $winget_remediations_name, $remediate_winget_version) -Force -Encoding utf8 -Confirm:$false)
            $remadiations_winget_textbox2.Text = 'Created detection.ps1 and remediate.ps1'
            $remadiations_winget_textbox2.AppendText("`r`n")
            $remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\source\")
            $remadiations_winget_textbox2.AppendText("`r`n")
            $encoding = [Text.Encoding]::UTF8
            $bytes = $encoding.GetBytes($remediate_detectFile)
            $Encoded_remediate_detectFile = [Convert]::ToBase64String($bytes)
            $Bytes2 = $encoding.GetBytes($remediate_remediateFile)
            $Encoded_remediate_remediateFile = [Convert]::ToBase64String($Bytes2)
            $UploadRemediationsFile = @'
<#	
      .NOTES
      ===========================================================================
      Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
      Created on:   	6/5/2023 3:38 PM
      Created by:   	Rink Turksma
      Organization: 	
      Filename:     	upload.ps1
      ===========================================================================
      .DESCRIPTION
      Part of IntunePrepTool
      https://github.com/rink-turksma/IntunePrepTool
      Upload Remediations to Intune
#>

Write-Host -Object 'Script will install MSAL.PS powershell module from the Powershell Galery if needed.' -ForegroundColor Green

# TODO: MSAL.PS is now depricated!
if (Get-Module -ListAvailable -Name MSAL.PS -ErrorAction SilentlyContinue) 
{
   $null = (Import-Module -Name MSAL.PS -Force -NoClobber)
}
else 
{
   $null = (Install-Module -Name MSAL.PS -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -Repository PSGallery -AllowClobber)
   $null = (Import-Module -Name MSAL.PS -Force -NoClobber)
}

$displayName = '!!displayName!!'
$publisher = '!!publisher!!'
$detectionScriptContent = '!!detectionScriptContent!!'
$remediationScriptContent = '!!remediationScriptContent!!'
$tenantID = '!!tenantid!!'
$ClientID = 'd1ddf0e4-d672-4dae-b554-9d5bdfd93547'
$RedirectUri = 'urn:ietf:wg:oauth:2.0:oob'
$MsalToken = (Get-MsalToken -TenantId $tenantID -ClientId $ClientID -Scopes 'https://graph.microsoft.com/.default' -RedirectUri $RedirectUri)
$body = @"
{"displayName":"$displayName","description":"Uploaded by IntunePrepTool","publisher":"$publisher","runAs32Bit":false,"runAsAccount":"system","enforceSignatureCheck":false,"detectionScriptContent":"$detectionScriptContent","remediationScriptContent":"$remediationScriptContent","roleScopeTagIds":["0"]}
"@
$uri = 'https://graph.microsoft.com/beta/deviceManagement/deviceHealthScripts'
$createdPolicy = (Invoke-RestMethod -Uri $uri -Method POST -Body $body -Headers @{
      Authorization = $MsalToken.CreateAuthorizationHeader()
} -ContentType 'application/json')

Write-Host -Object ('Remediation policy created successfully with ID: {0}' -f $createdPolicy.id) -ForegroundColor Green
Write-Host -Object 'Please assign and schedule with MS Intune Admin console' -ForegroundColor Green
'@
            $displayName = $winget_remediations_name_textbox1.Text
            $UploadRemediationsFile = $UploadRemediationsFile.Replace('!!publisher!!', $config_customername)
            $UploadRemediationsFile = $UploadRemediationsFile.Replace('!!displayName!!', $displayName)
            $UploadRemediationsFile = $UploadRemediationsFile.Replace('!!detectionScriptContent!!', $Encoded_remediate_detectFile)
            $UploadRemediationsFile = $UploadRemediationsFile.Replace('!!remediationScriptContent!!', $Encoded_remediate_remediateFile)
            $tenatURL = $upload_tenantURL_textbox.text
            $UploadRemediationsFile = $UploadRemediationsFile.Replace('!!tenantid!!', $tenatURL)
            
            if (!(Test-Path -Path ('{0}\{1}\{2}\output' -f $config_packagefolder, $winget_remediations_name, $remediate_winget_version) -ErrorAction SilentlyContinue))
            {
               $null = (New-Item -ItemType Directory -Path ('{0}\{1}\{2}\output' -f $config_packagefolder, $winget_remediations_name, $remediate_winget_version) -Force -Confirm:$false)
            }
            
            $null = ($UploadRemediationsFile | Out-File -FilePath ('{0}\{1}\{2}\output\upload.ps1' -f $config_packagefolder, $winget_remediations_name, $remediate_winget_version) -Force -Confirm:$false)
            $remadiations_winget_textbox2.AppendText('Created Upload.ps1')
            $remadiations_winget_textbox2.AppendText("`r`n")
            $remadiations_winget_textbox2.AppendText("$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\")
            $remadiations_winget_textbox2.AppendText("`r`n")
            $remadiations_winget_textbox2.AppendText('After uploading; Please go to Intune Management Portal and assign devices or users. And add a schedule')
            
            if ([Windows.Forms.MessageBox]::Show('Do you want to upload using Powershell_ISE now?', 'upload.ps1 created', [Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
            {
               & "$env:PSHome\powershell_ise.exe" -file "$config_packagefolder\$winget_remediations_name\$remediate_winget_version\output\upload.ps1"
            }
         }
      }
   }
   
   $remediations_winget_open_button1.Enabled = $true
   $remediations_winget_open_button1.Visible = $true
}

$remediations_winget_open_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $winget_remediations_name = $winget_remediations_name_textbox1.Text
   $winget_remediations_wingetid = $winget_remediations_wingetid_textbox1.Text
   $remediate_winget_version = $remediate_winget_version_textbox1.Text
   $null = (Invoke-Item -Path ('{0}\{1}\{2}' -f $config_packagefolder, $winget_remediations_name, $remediate_winget_version))
}

$powershell_scheduledtask_radiobutton_CheckedChanged = {
   if ($powershell_scheduledtask_radiobutton.Checked -eq $true)
   {
      $package_scheduled_task_WingetID_textbox.Enabled = $true
      $package_scheduled_task_WingetID_textbox.Visible = $true
      $package_scheduled_task_WingetID_label3.Enabled = $true
      $package_scheduled_task_WingetID_label3.Visible = $true
      $package_ScheduledTask_create_scripts_button1.Enabled = $true
      $package_ScheduledTask_create_scripts_button1.Visible = $true
   }
   else
   {
      $package_scheduled_task_WingetID_textbox.Enabled = $false
      $package_scheduled_task_WingetID_textbox.Visible = $false
      $package_scheduled_task_WingetID_label3.Enabled = $false
      $package_scheduled_task_WingetID_label3.Visible = $false
   }
}

$powershell_Empty_Scheduled_Task_radiobutton_CheckedChanged = {
   $package_ScheduledTask_create_scripts_button1.Enabled = $true
   $package_ScheduledTask_create_scripts_button1.Visible = $true
}

$package_scheduledtasK_option_weekly_checkbox1_CheckedChanged = {
   if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
   {
      $package_scheduledtask_combobox1.Enabled = $true
      $package_scheduledtask_combobox1.Visible = $true
      $package_scheduledtask_time_combobox1.Enabled = $true
      $package_scheduledtask_time_combobox1.Visible = $true
      $package_scheduledtask_am_radiobutton1.Enabled = $true
      $package_scheduledtask_am_radiobutton1.Visible = $true
      $package_scheduledtask_pm_radiobutton.Enabled = $true
      $package_scheduledtask_pm_radiobutton.Visible = $true
   }
   else
   {
      $package_scheduledtask_combobox1.Enabled = $false
      $package_scheduledtask_combobox1.Visible = $false
      $package_scheduledtask_time_combobox1.Enabled = $false
      $package_scheduledtask_time_combobox1.Visible = $false
      $package_scheduledtask_am_radiobutton1.Enabled = $false
      $package_scheduledtask_am_radiobutton1.Visible = $false
      $package_scheduledtask_pm_radiobutton.Enabled = $false
      $package_scheduledtask_pm_radiobutton.Visible = $false
   }
}

$powershell_create_package_dir_button1_Click = {
   if ($config_listbox.SelectedItem -eq $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
   }
   else
   {
      if ($powershell_package_name_textbox1.Text -like $null)
      {
         [void][Windows.Forms.MessageBox]::Show('You need to fill the package name textbox', 'Select Package Name')
      }
      else
      {
         if ($powershell_package_version_textbox1.Text -like $null)
         {
            [void][Windows.Forms.MessageBox]::Show('You need to fill the package version textbox', 'Select Package Version')
         }
         else
         {
            $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
            $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
            $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
            $package_scheduledTask_name = $powershell_package_name_textbox1.Text
            $package_scheduledTask_version = $powershell_package_version_textbox1.text
            
            if (!(Test-Path -Path ('{0}\{1}\{2}\source' -f $config_packagefolder, $package_scheduledTask_name, $package_scheduledTask_version) -ErrorAction SilentlyContinue))
            {
               $null = (New-Item -ItemType Directory -Path ('{0}\{1}\{2}\source' -f $config_packagefolder, $package_scheduledTask_name, $package_scheduledTask_version) -Force -Confirm:$false)
            }
            
            if (!(Test-Path -Path ('{0}\{1}\{2}\output' -f $config_packagefolder, $package_scheduledTask_name, $package_scheduledTask_version) -ErrorAction SilentlyContinue))
            {
               $null = (New-Item -ItemType Directory -Path ('{0}\{1}\{2}\output' -f $config_packagefolder, $package_scheduledTask_name, $package_scheduledTask_version) -Force -Confirm:$false)
            }
            
            $package_ScheduledTask_output_textbox1.Text = "`nNew package direcotory created: `r`n"
            $package_ScheduledTask_output_textbox1.AppendText("$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\")
            $package_ScheduledTask_output_textbox1.AppendText(" `r`n")
            $powershell_open_package_directory_button1.Enabled = $true
            $powershell_open_package_directory_button1.Visible = $true
            $package_ScheduledTask_create_scripts_button1.Enabled = $true
            $package_ScheduledTask_create_scripts_button1.Visible = $true
         }
      }
   }
}

$powershell_open_package_directory_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $package_scheduledTask_name = $powershell_package_name_textbox1.Text
   $package_scheduledTask_version = $powershell_package_version_textbox1.text
   $null = (Invoke-Item -Path ('{0}\{1}\{2}\' -f $config_packagefolder, $package_scheduledTask_name, $package_scheduledTask_version))
}

$package_ScheduledTask_create_scripts_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $package_scheduledTask_name = $powershell_package_name_textbox1.Text
   $package_scheduledTask_version = $powershell_package_version_textbox1.text
   $package_scheduledtask_system_panel3.Visible = $true
   $package_scheduledtask_system_panel3.Enabled = $true
   $ScheduledTaskFile = @'
<#	
      .NOTES
      ===========================================================================
      Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
      Created on:   	10/24/2023
      Created by:   	Rink Turksma
      Organization: 	https://github.com/rink-turksma/IntunePrepTool
      Filename:     	"!!ps1name!!"
      ===========================================================================
      .DESCRIPTION
      Please place your script between:
      "Place your Powershell code here" and "End of your Powershell script"
      When done. Save script and close Powershell_ISE
#>
# App Params
$package_scheduledTask_name  = '!!package_scheduledTask_name!!'
$package_scheduledTask_version = '!!package_scheduledTask_version!!'
#Customer vars
$logdir = '!!logdir!!'
# Dyn vars
$logfile = $(Join-Path -Path $logdir  -ChildPath ('{0} {1}.txt' -f $package_scheduledTask_name, $package_scheduledTask_version))
# TODO: Check the variable $RegisterDetectionroot
$regkeyRoot = ('HKLM:\Software\{0}' -f $RegisterDetectionroot)
$regkeyApp = ('{0}\{1}' -f $regkeyRoot, $package_scheduledTask_name)
$excode = $null

# create log directory in programdata when needed.
if (!(Test-Path -Path $logdir -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path $logdir -Force -Confirm:$false)
}

# Creates dll directory in logdir when needed.
if (!(Test-Path -Path ('{0}\dll' -f $logdir) -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\dll' -f $logdir) -Force -Confirm:$false)
}

# Creates scheduledTasks directory in logdir when needed.
if (!(Test-Path -Path ('{0}\scheduledTasks' -f $logdir) -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\scheduledTasks' -f $logdir) -Force -Confirm:$false)
}

# Create registry key when needed.
if (!(Test-Path -Path $regkeyRoot -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regkeyRoot -ItemType Key -Force -Confirm:$false)
}

# Creates application key in registry when needed
if (!(Test-Path -Path $regkeyApp -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regkeyApp -ItemType Key -Force -Confirm:$false)
}

# Setup Script Location
$null = (Set-Location -Path $PSScriptRoot)

# Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -PathType Leaf -ErrorAction SilentlyContinue))
{
   $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -Force -Confirm:$false)
}

# Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' | Select-Object -ExpandProperty Name | Where-Object -Property {
      ($_ -eq 'IntunePrepTool' )
} -EQ -Value $null)
{
   $null = (New-Item -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' -Name 'IntunePrepTool' -ErrorAction SilentlyContinue -Force -Confirm:$false)
}

try
{
   $TypesSupported = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -ErrorAction Stop)

   if ($TypesSupported.TypesSupported -ne '7') 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -PropertyType DWORD -Force -Confirm:$false)
}
try
{
   $EventMessageFile = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -ErrorAction Stop)

   if ($EventMessageFile.EventMessageFile -ne ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir)) 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -PropertyType string -Force -Confirm:$false)
}

# New EventLog when needed.
try
{
   # Assigned, but not used anywhere? So we need it? Where? Use $null instead?
   $checkEventLog = (Get-EventLog -LogName 'IntunePrepTool' -Source 'IntunePrepTool' -ErrorAction Stop)
}
catch
{
   $null = (New-EventLog -MessageResourceFile ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -LogName 'IntunePrepTool' -Source 'IntunePrepTool')
   [Diagnostics.EventLog]::CreateEventSource('IntunePrepTool', 'IntunePrepTool')
}

# Start Transcript.  This is saved in $logdir. Also used in EventViewer
$null = (Start-Transcript -Path $logfile)
  
<# Place your Powershell code here#>

<# End of your Powershell script#>

$null = (Stop-Transcript -ErrorAction SilentlyContinue)

$split = [regex]::Escape('**********************')
$lastRun = ((Get-Content -Path $logfile -Raw) -split ($split))[-3]

if ($lastRun.Length -gt 30000)
{
   $lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}

if ($excode -eq 1) 
{
   $warning = 'Error'
}
else 
{
   $warning = 'Information'
}

if ($warning -like 'Information')
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Information', 0x3)
}
Else
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Error', 0x3)
}

if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs' -ErrorAction SilentlyContinue)
{
   if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -PathType Leaf -ErrorAction SilentlyContinue) 
   {
      $null = (Remove-Item -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
   }

   $null = (Copy-Item -Path 'c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx' -Destination 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
}
'@
   $logdir = ('{0}\scheduledTasks' -f $config_logfoldertarget)
   $ScheduledTaskFile = $ScheduledTaskFile.Replace('!!ps1name!!', "scheduledTask_$package_scheduledTask_name.ps1")
   $ScheduledTaskFile = $ScheduledTaskFile.Replace('!!package_scheduledTask_name!!', $package_scheduledTask_name)
   $ScheduledTaskFile = $ScheduledTaskFile.Replace('!!package_scheduledTask_version!!', $package_scheduledTask_version)
   $ScheduledTaskFile = $ScheduledTaskFile.Replace('!!logdir!!', $logdir)
   $null = ($ScheduledTaskFile | Out-File -FilePath ('{0}\{1}\{2}\source\scheduledTask_{3}.ps1' -f $config_packagefolder, $package_scheduledTask_name, $package_scheduledTask_version) -Force -Confirm:$false -ErrorAction SilentlyContinue)
   $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\{1}\{2}\source\IntunePrepTool_msgfile.dll' -f $config_packagefolder, $package_scheduledTask_name, $package_scheduledTask_version) -Confirm:$false -Force)
   $package_ScheduledTask_output_textbox1.AppendText('Template script to be scheduled created')
   $package_ScheduledTask_output_textbox1.AppendText(" `r`n")
   $package_ScheduledTask_output_textbox1.AppendText("Please add your Powershell code between 'Place your Powershell code here' and 'End of your Powershell script'")
   $package_ScheduledTask_output_textbox1.AppendText(" `r`n")
   $package_ScheduledTask_output_textbox1.AppendText('Save when done')
   $package_scheduledTask_Edit_script_button1.Enabled = $true
   $package_scheduledTask_Edit_script_button1.Visible = $true
   $package_scheduledtasK_option_startup_checkbox1.Enabled = $true
   $package_scheduledtasK_option_startup_checkbox1.Visible = $true
   $package_scheduledtasK_option_weekly_checkbox1.Enabled = $true
   $package_scheduledtasK_option_weekly_checkbox1.Visible = $true
   $package_scheduled_task_createIntunewin_scripts_button1.Enabled = $true
   $package_scheduled_task_createIntunewin_scripts_button1.Visible = $true
}

$package_scheduledTask_Edit_script_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $package_scheduledTask_name = $powershell_package_name_textbox1.Text
   $package_scheduledTask_version = $powershell_package_version_textbox1.text
   [void][Windows.Forms.MessageBox]::Show('Powershell_ISE will open now. Please place powershell code between "Place your Powershell code here" and "End of your Powershell script"; Save when done', 'Powershell_ISE') # Casting the method to [void] suppresses the output. 
   & "$env:PSHome\powershell_ise.exe" "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\scheduledTask_$package_scheduledTask_name.ps1"
}

$package_scheduled_task_createIntunewin_scripts_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $package_scheduledTask_name = $powershell_package_name_textbox1.Text
   $package_scheduledTask_version = $powershell_package_version_textbox1.text
   
   if (($package_scheduledtasK_option_startup_checkbox1.Checked -eq $false) -and ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $false))
   {
      [void][Windows.Forms.MessageBox]::Show('Weekly or at startup', 'Please select at least one option when to run') # Casting the method to [void] suppresses the output. 
   }
   else
   {
      $package_scheduledTask_Edit_script_test_install_button1.Enabled = $true
      $package_scheduledTask_Edit_script_test_install_button1.Visible = $true
      $package_scheduledTask_Edit_script_test_uninstall_button1.Enabled = $true
      $package_scheduledTask_Edit_script_test_uninstall_button1.Visible = $true
      $package_scheduledTask_Edit_script_createIntuneWin_button1.Visible = $true
      $package_scheduledTask_Edit_script_createIntuneWin_button1.Enabled = $true
      $ScheduledTaskInstall = @'
<#	
      .NOTES
      ===========================================================================
      Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.232
      Created on:   	10/24/2023
      Created by:   	Rink Turksma
      Organization: 	https://github.com/rink-turksma/IntunePrepTool
      Filename:     	install.ps1
      ===========================================================================
      .DESCRIPTION
      Parameters will be filled by IntunePrepTool.
      When needed you can edit the creation of the scheduled task below
#>
# App Parameters
$appName = '!!AppName!!'
$version = '!!Version!!'
$psFile = '!!psFile!!'
$StartupTask = '!!StartupTask!!'
$WeeklyTask = '!!WeeklyTask!!'
$WeeklyTaskDay = '!!WeeklyTaskDay!!' 
$WeeklyTaskHour = '!!WeeklyTaskHour!!'
$WeeklyTaskAMPM = '!!WeeklyTaskAMPM!!'
$registerDetectionRoot = '!!registerDetectionRoot!!'
# Customer variables
$logDir = '!!LogDir!!'
# Dynamic variables
$logFile = $(Join-Path -Path $logDir  -ChildPath ('{0}{1}.txt' -f $appName, $version))
$msiLogFileName = $appName + $version + 'MSI'
$msiLogFile = $(Join-Path -Path $logDir  -ChildPath ('{0}.txt' -f $msiLogFileName))
$regKeyRoot = ('HKLM:\Software\{0}' -f $registerDetectionRoot)
$regKeyApp = ('{0}\{1}' -f $regKeyRoot, $appName)
$exeCode = $null

# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logDir -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path $logDir -Force -Confirm:$false)
}

if (!(Test-Path -Path ('{0}\dll' -f $logDir) -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\dll' -f $logDir) -Force -Confirm:$false)
}

if (!(Test-Path -Path ('{0}\scheduledTasks' -f $logDir) -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\scheduledTasks' -f $logDir) -Force -Confirm:$false)
}

# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regKeyRoot -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regKeyRoot -ItemType Key -Force -Confirm:$false)
}

# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regKeyApp -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regKeyApp -ItemType Key -Force -Confirm:$false)
}
function fDetectionInRegistry
{
   ### Function responsible for successful or unsuccessful execution.
   ### Ultimately, you will have, for example:
   ### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
   ### With a Version value and a [BOOL]Success value
   ### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
   param
   (
      [Parameter(Mandatory,HelpMessage = 'Add help message for user')]
      [bool]$Succes
   )
	
   try
   {
      $AppRegVersie = Get-ItemProperty -Path $regKeyApp -Name Versie -ErrorAction Stop

      if ($AppRegVersie.Versie -ne $version) 
      {
         $null = (Set-ItemProperty -Path $regKeyApp -Name Versie -Value $version -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regKeyApp -Name Versie -Value $version -PropertyType string -Force -Confirm:$false)
   }

   try
   {
      $AppRegSucces = (Get-ItemProperty -Path $regKeyApp -Name Succes -ErrorAction Stop)

      if ($AppRegSucces.Succes -ne $Succes) 
      {
         $null = (Set-ItemProperty -Path $regKeyApp -Name Succes -Value $Succes -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regKeyApp -Name Succes -Value $Succes -PropertyType string -Force -Confirm:$false)
   }
}

# Setup Script Location
Set-Location -Path $PSScriptRoot

# Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -PathType Leaf -ErrorAction SilentlyContinue))
{
   $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -Force -Confirm:$false)
}

# Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' | Select-Object -ExpandProperty Name | Where-Object -Property {
      ($_ -eq 'IntunePrepTool' )
} -EQ -Value $null)
{
   $null = (New-Item -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' -Name 'IntunePrepTool' -ErrorAction SilentlyContinue -Force -Confirm:$false)
}

try
{
   $TypesSupported = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -ErrorAction Stop)

   if ($TypesSupported.TypesSupported -ne '7') 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -PropertyType DWORD -Force -Confirm:$false)
}

try
{
   $EventMessageFile = $null = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -ErrorAction Stop)

   if ($EventMessageFile.EventMessageFile -ne ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir)) 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -PropertyType string -Force -Confirm:$false)
}

# New EventLog when needed.
try
{
   #TODO: Assigned, unused? Use $null instead?
   $checkEventLog = (Get-EventLog -LogName 'IntunePrepTool' -Source 'IntunePrepTool' -ErrorAction Stop)
}
catch
{
   $null = (New-EventLog -MessageResourceFile ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -LogName 'IntunePrepTool' -Source 'IntunePrepTool')
   [Diagnostics.EventLog]::CreateEventSource('IntunePrepTool', 'IntunePrepTool')
}

$null = (Start-Transcript -Path $logFile)
# Start; Write Log file
Write-Host -Object 'Script will copy the powershell script to be scheduled now' -ForegroundColor Green

if ( Test-Path -Path ('{0}\scheduledTasks\scheduledTask_{1}.ps1' -f $logDir, $appName) -PathType Leaf -ErrorAction SilentlyContinue) 
{
   $null = (Remove-Item -Path ('{0}\scheduledTasks\scheduledTask_{1}.ps1' -f $logDir, $appName) -Force -Confirm:$false)
}

Write-Host -Object 'Script will copy the powershell script to be scheduled now' -ForegroundColor Green
$null = (Copy-Item -Path $psFile -Destination ('{0}\scheduledTasks\scheduledTask_{1}.ps1' -f $logDir, $appName) -Force -Confirm:$false)

# Below the code to set the permissions on the scripts folder
Write-Host -Object ('Script will setup NTFS filepermissions for the directory {0}\scheduledTasks' -f $logDir) -ForegroundColor Green

#region 3d5f4a6gch7
# Below the code to set the permissions on the scripts folder
Write-Host -Object ('Script will setup NTFS filepermissions for the directory {0}\scheduledTasks' -f $logDir) -ForegroundColor Green
$Acl = (Get-Acl -Path ('{0}\scheduledTasks' -f $logDir))
$Ar = (New-Object -TypeName System.Security.AccessControl.FileSystemAccessRule -ArgumentList ('Administrators', 'Modify', 'Allow'))
$System = (New-Object -TypeName System.Security.Principal.NTAccount -ArgumentList ('SYSTEM'))
$Ar2 = (New-Object -TypeName System.Security.AccessControl.FileSystemAccessRule -ArgumentList ($System, 'Modify', 'Allow'))
$Acl.SetAccessRule($Ar)
$Acl.SetAccessRule($Ar2)
$null = (Set-Acl -Path ('{0}\scheduledTasks' -f $logDir) -AclObject $Acl -Confirm:$false)
#endregion: 3d5f4a6gch7

try
{
   Write-Host -Object ('Scheduled Task created for {0}' -f $psFile) -ForegroundColor Green
   # Creates the scheduled task
   $action = (New-ScheduledTaskAction -Execute 'powershell.exe' -Argument ("-NoProfile -WindowStyle Hidden -Command `"& '{0}\scheduledTasks\scheduledTask_{1}.ps1'`"" -f $logDir, $appName))

   if ($StartupTask -eq $true) 
   {
      $trigger1 = (New-ScheduledTaskTrigger -AtStartup -RandomDelay 00:00:30)
   }
   else 
   {
      $trigger1 = $null
   }

   if ($WeeklyTask -eq $true) 
   {
      $trigger2 = (New-ScheduledTaskTrigger -Weekly -DaysOfWeek $WeeklyTaskDay -At $WeeklyTaskHour$WeeklyTaskAMPM)
   }
   else 
   {
      $trigger2 = $null
   }

   if (($trigger1 -eq $null) -and ($trigger2 -ne $null)) 
   {
      $triggers = @($trigger2)
   }

   if (($trigger1 -ne $null) -and ($trigger2 -eq $null)) 
   {
      $triggers = @($trigger1)
   }

   if (($trigger1 -ne $null) -and ($trigger2 -ne $null)) 
   {
      $triggers = @($trigger1, $trigger2)
   }

   $principal = (New-ScheduledTaskPrincipal -UserId 'SYSTEM' -LogonType ServiceAccount -RunLevel Highest)
   $null = (Register-ScheduledTask -Action $action -Trigger $triggers -Principal $principal -TaskName $appName -Description ('Scheduled Task for {0}' -f $appName) -Force -ErrorAction Stop)
   Write-Host -Object ('Scheduled Task created for {0}' -f $psFile) -ForegroundColor Green

   $excode = 0
}
catch
{
   Write-Host -Object 'Error creating scheduled task' -ForegroundColor Yellow
   Write-Host -Object 'installation failed' -ForegroundColor Red -BackgroundColor Blue
   Write-Host -Object ('Error message: {0}' -f $_.Exception.Message) -ForegroundColor Red -BackgroundColor Blue
   $excode = 1
}

$null = (Stop-Transcript -ErrorAction SilentlyContinue)
$split = [regex]::Escape('**********************')
$lastRun = ((Get-Content -Path $logFile -Raw) -split ($split))[-3]

if ($lastRun.Length -gt 32600)
{
   $lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}

# In the try/catch block in the execution, we set $excode to 0 or 1.
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
if ($excode -eq 1) 
{
   $warning = 'Error'
}
else 
{
   $warning = 'Information'
   $null = (fDetectionInRegistry -succes $true)
}
#End; Write Log file

if ($warning -like 'Information')
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Information', 0x3)
}
Else
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Error', 0x3)
}

if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs' -ErrorAction SilentlyContinue) 
{
   if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -PathType Leaf -ErrorAction SilentlyContinue) 
   {
      $null = (Remove-Item -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
   }
                             
   $null = (Copy-Item -Path 'c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx' -Destination 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
}
'@
      
      $ScheduledTaskUnInstall = @'
<#	
      .NOTES
      ===========================================================================
      Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.232
      Created on:   	10/24/2023
      Created by:   	Rink Turksma
      Organization: 	https://github.com/rink-turksma/IntunePrepTool
      Filename:     	uninstall.ps1
      ===========================================================================
      .DESCRIPTION
      Parameters will be filled by IntunePrepTool.
      When needed you can edit the deletion of the scheduled task below
#>
# App Parameters
$appName = '!!AppName!!'
$version = '!!Version!!'
$psFile = '!!psFile!!'
$StartupTask = '!!StartupTask!!'
$WeeklyTask = '!!WeeklyTask!!'
$WeeklyTaskDay = '!!WeeklyTaskDay!!' 
$WeeklyTaskHour = '!!WeeklyTaskHour!!'
$WeeklyTaskAMPM = '!!WeeklyTaskAMPM!!'
$registerDetectionRoot = '!!registerDetectionRoot!!'

# Customer variables
$logDir = '!!LogDir!!'
# Dynamic variables
$logFile = $(Join-Path -Path $logDir  -ChildPath ('{0}{1}.txt' -f $appName, $version))
$msiLogFileName = $appName + $version + 'MSI'
$msiLogFile = $(Join-Path -Path $logDir  -ChildPath ('{0}.txt' -f $msiLogFileName))
$regKeyRoot = ('HKLM:\Software\{0}' -f $registerDetectionRoot)
$regKeyApp = ('{0}\{1}' -f $regKeyRoot, $appName)
$exeCode = $null

# Create log directory in programdata if it doesn't exist.
if (!(Test-Path -Path $logDir -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path $logDir -Force -Confirm:$false)
}

if (!(Test-Path -Path ('{0}\dll' -f $logDir) -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\dll' -f $logDir) -Force -Confirm:$false)
}

if (!(Test-Path -Path ('{0}\scheduledTasks' -f $logDir) -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\scheduledTasks' -f $logDir) -Force -Confirm:$false)
}

# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regKeyRoot -ErrorAction SilentlyContinue))
{
   $null =( New-Item $regKeyRoot -ItemType Key -Force -Confirm:$false)
}

# Creates the application key in the Registry Root if it does not exist
if (!(Test-Path -Path $regKeyApp -ErrorAction SilentlyContinue))
{
   $null = (New-Item $regKeyApp -ItemType Key -Force -Confirm:$false)
}
function fDetectionInRegistry
{
   ### Function responsible for successful or unsuccessful execution.
   ### Ultimately, you will have, for example:
   ### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
   ### With a Version value and a [BOOL]Success value
   ### Usage: fDetectionInRegistry -success $False or fDetectionInRegistry -success $true
   param
   (
      [Parameter(Mandatory,HelpMessage = 'Add help message for user')]
      [bool]$Succes
   )
	
   try
   {
      $AppRegVersie = (Get-ItemProperty -Path $regKeyApp -Name Versie -ErrorAction Stop)

      if ($AppRegVersie.Versie -ne $version) 
      {
         $null = (Set-ItemProperty -Path $regKeyApp -Name Versie -Value $version -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regKeyApp -Name Versie -Value $version -PropertyType string -Force -Confirm:$false)
   }

   try
   {
      $AppRegSucces = (Get-ItemProperty -Path $regKeyApp -Name Succes -ErrorAction Stop)

      if ($AppRegSucces.Succes -ne $Succes) 
      {
         $null = (Set-ItemProperty -Path $regKeyApp -Name Succes -Value $Succes -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regKeyApp -Name Succes -Value $Succes -PropertyType string -Force -Confirm:$false)
   }
}

# Setup Script Location
$null = (Set-Location $PSScriptRoot)

# Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -PathType Leaf -ErrorAction SilentlyContinue))
{
   $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -Force -Confirm:$false)
}

# Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' | Select-Object -ExpandProperty Name | Where-Object -Property {
      ($_ -eq 'IntunePrepTool')
} -EQ -Value $null)
{
   $null = (New-Item -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' -Name 'IntunePrepTool' -ErrorAction SilentlyContinue -Force -Confirm:$false)
}

try
{
   $TypesSupported = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -ErrorAction Stop)

   if ($TypesSupported.TypesSupported -ne '7') 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -PropertyType DWORD -Force -Confirm:$false)
}

try
{
   $EventMessageFile = Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -ErrorAction Stop

   if ($EventMessageFile.EventMessageFile -ne ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir)) 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -PropertyType string -Force -Confirm:$false)
}
           
# New EventLog when needed.
try
{
   $checkEventLog = (Get-EventLog -LogName 'IntunePrepTool' -Source 'IntunePrepTool' -ErrorAction Stop)
}
catch
{
   $null = (New-EventLog -MessageResourceFile ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -LogName 'IntunePrepTool' -Source 'IntunePrepTool')
   [Diagnostics.EventLog]::CreateEventSource('IntunePrepTool', 'IntunePrepTool')
}
            
$null = (Start-Transcript -Path $logFile)
# Start; Write Log file
Write-Host -Object 'Script will delete the powershell script used by the task' -ForegroundColor Green

if ( Test-Path ('{0}\scheduledTasks\scheduledTask_{1}.ps1' -f $logDir, $appName) -PathType Leaf -ErrorAction SilentlyContinue) 
{
   $null = (Remove-Item ('{0}\scheduledTasks\scheduledTask_{1}.ps1' -f $logDir, $appName) -Force -Confirm:$false)
} 

try
{
   # Script deletes the scheduled task here
   Write-Host -Object 'Script will delete the scheduled task' -ForegroundColor Green
   $null = (Unregister-ScheduledTask -TaskName $appName -Confirm:$false -ErrorAction Stop)
   Write-Host -Object 'Scheduled Task deleted' -ForegroundColor Green
   $excode = 0
}
catch
{
   Write-Host -Object 'Error with deleting scheduled task' -ForegroundColor Yellow
   Write-Host -Object 'Uninstallation failed' -ForegroundColor Red -BackgroundColor Blue
   Write-Host -Object ('Error message: {0}' -f $_.Exception.Message) -ForegroundColor Red -BackgroundColor Blue
   $excode = 1
}

$null = (Stop-Transcript -ErrorAction SilentlyContinue)

$split = [regex]::Escape('**********************')
$lastRun = ((Get-Content $logFile -Raw) -split ($split))[-3]

if ($lastRun.Length -gt 32600)
{
   $lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
# In the try/catch block in the execution, we set $excode to 0 or 1.
                  
# Based on this, the Log in the Event Viewer is set to either Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful or unsuccessful application message.
                    
if ($excode -eq 1) 
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Error', 0x3)  
}
else 
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Information', 0x3)
   $null = (Remove-Item $regKeyApp -Force -Confirm:$false)
}

if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs' -ErrorAction SilentlyContinue) 
{
   if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -PathType Leaf -ErrorAction SilentlyContinue)
   {
      $null = (Remove-Item -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
   } 
                       
   $null = (Copy-Item -Path 'c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx' -Destination 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
}
'@
      
      $RegisterDetectionroot = 'Intune_' + $config_customername
      $ScheduledTaskInstall = $ScheduledTaskInstall.Replace('!!registerDetectionRoot!!', $RegisterDetectionroot)
      $psfile = ('scheduledTask_{0}.ps1' -f $package_scheduledTask_name)
      $ScheduledTaskInstall = $ScheduledTaskInstall.Replace('!!AppName!!', $package_scheduledTask_name)
      $ScheduledTaskInstall = $ScheduledTaskInstall.Replace('!!Version!!', $package_scheduledTask_version)
      $ScheduledTaskInstall = $ScheduledTaskInstall.Replace('!!psFile!!', $psfile)
      $ScheduledTaskInstall = $ScheduledTaskInstall.Replace('!!LogDir!!', $config_logfoldertarget)
      
      if ($package_scheduledtasK_option_startup_checkbox1.Checked -eq $true)
      {
         $ScheduledTaskInstall = $ScheduledTaskInstall.Replace('!!StartupTask!!', $true)
      }
      else
      {
         $ScheduledTaskInstall = $ScheduledTaskInstall.Replace('!!StartupTask!!', $false)
      }
      
      if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
      {
         $ScheduledTaskInstall = $ScheduledTaskInstall.Replace('!!WeeklyTask!!', $true)
         $WeeklyTaskDay = $package_scheduledtask_combobox1.Text
         $ScheduledTaskInstall = $ScheduledTaskInstall.Replace('!!WeeklyTaskDay!!', $WeeklyTaskDay)
         $weeklyTaskHour = $package_scheduledtask_time_combobox1.Text
         $ScheduledTaskInstall = $ScheduledTaskInstall.Replace('!!WeeklyTaskHour!!', $weeklyTaskHour)
         
         if ($package_scheduledtask_am_radiobutton1.Checked -eq $true)
         {
            $WeeklyTaskAMPM = 'AM'
         }
         else
         {
            $WeeklyTaskAMPM = 'PM'
         }
         
         $ScheduledTaskInstall = $ScheduledTaskInstall.Replace('!!WeeklyTaskAMPM!!', $WeeklyTaskAMPM)
      }
      else
      {
         $ScheduledTaskInstall = $ScheduledTaskInstall.Replace('!!WeeklyTask!!', $false)
      }
      
      $null = ($ScheduledTaskInstall | Out-File -FilePath ('{0}\{1}\{2}\source\install.ps1' -f $config_packagefolder, $package_scheduledTask_name, $package_scheduledTask_version) -Force -Confirm:$false)
      $psfile = ('scheduledTask_{0}.ps1' -f $package_scheduledTask_name)
      $ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace('!!AppName!!', $package_scheduledTask_name)
      $ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace('!!Version!!', $package_scheduledTask_version)
      $ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace('!!psFile!!', $psfile)
      $ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace('!!LogDir!!', $config_logfoldertarget)
      $RegisterDetectionroot = 'Intune_' + $config_customername
      $ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace('!!registerDetectionRoot!!', $RegisterDetectionroot)
      
      if ($package_scheduledtasK_option_startup_checkbox1.Checked -eq $true)
      {
         $ScheduledTaskInstall = $ScheduledTaskInstall.Replace('!!StartupTask!!', $true)
      }
      else
      {
         $ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace('!!StartupTask!!', $false)
      }
      
      if ($package_scheduledtasK_option_weekly_checkbox1.Checked -eq $true)
      {
         $ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace('!!WeeklyTask!!', $true)
         $WeeklyTaskDay = $package_scheduledtask_combobox1.Text
         $ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace('!!WeeklyTaskDay!!', $WeeklyTaskDay)
         $weeklyTaskHour = $package_scheduledtask_time_combobox1.Text
         $ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace('!!WeeklyTaskHour!!', $weeklyTaskHour)
         
         if ($package_scheduledtask_am_radiobutton1.Checked -eq $true)
         {
            $WeeklyTaskAMPM = 'AM'
         }
         else
         {
            $WeeklyTaskAMPM = 'PM'
         }
         
         $ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace('!!WeeklyTaskAMPM!!', $WeeklyTaskAMPM)
      }
      else
      {
         $ScheduledTaskUnInstall = $ScheduledTaskUnInstall.Replace('!!WeeklyTask!!', $false)
      }
      
      $null = ($ScheduledTaskUnInstall | Out-File -FilePath ('{0}\{1}\{2}\source\uninstall.ps1' -f $config_packagefolder, $package_scheduledTask_name, $package_scheduledTask_version) -Force -Confirm:$false)
      $package_ScheduledTask_output_textbox1.AppendText(" `r`n")
      $package_ScheduledTask_output_textbox1.AppendText("Install and uninstall.ps1 created'")
      $package_ScheduledTask_output_textbox1.AppendText(" `r`n")
      $package_ScheduledTask_output_textbox1.AppendText('Please test. When ready click on create Intunewin file')
   }
}

$config_InstallRequriedPSmodules_Click = {
   $config_install_required_ps_modules = @'
Write-Host -Object 'Script will install Microsoft.WinGet.Client powershell module from the Powershell Galery if needed.' -ForegroundColor Green

if (Get-Module -ListAvailable -Name Microsoft.WinGet.Client -ErrorAction SilentlyContinue) 
{
   $null = (Import-Module -Name Microsoft.WinGet.Client -Force -NoClobber)
   Write-Host -Object 'Powershell module already installed' -ForegroundColor Green
}
else 
{
   $null = (Install-Module -Name Microsoft.WinGet.Client -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -AllowClobber -Repository PSGallery)
   $null = (Import-Module -Name Microsoft.WinGet.Client -Force -NoClobber)
   Write-Host -Object 'Installed Powershell module' -ForegroundColor Green
}

Write-Host -Object 'Script will install Evergreen powershell module from the Powershell Galery if needed.' -ForegroundColor Green

if (Get-Module -ListAvailable -Name Evergreen -ErrorAction SilentlyContinue) 
{
   $null = (Import-Module -Name Evergreen -Force -NoClobber)
   Write-Host -Object 'Powershell module already installed' -ForegroundColor Green
}
else 
{
   $null = (Install-Module -Name Evergreen -Scope AllUsers -Force -SkipPublisherCheck -Confirm:$False -AllowClobber -Repository PSGallery)
   $null = (Import-Module -Name Evergreen -Force -NoClobber)
   Write-Host -Object 'Installed Powershell module' -ForegroundColor Green
}
'@
   
   if (!(Test-Path -Path 'C:\Program Files\IntunePrepTool\' -PathType Container -ErrorAction SilentlyContinue))
   {
      [void][Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
   }
   else
   {
      if (!(Test-Path -Path 'C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1' -PathType Leaf -ErrorAction SilentlyContinue))
      {
         $null = ($config_install_required_ps_modules | Out-File -FilePath 'C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1' -Force -Confirm:$false)
      }
      else
      {
         $null = (Remove-Item -Path 'C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1' -Confirm:$false -Force)
         $config_install_required_ps_modules | Out-File -FilePath 'C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1'
      }
      
      & "$env:PSHome\powershell_ise.exe" -file 'C:\Program Files\IntunePrepTool\wingetinstallpsmodules.ps1'
   }
}

$config_downloadFolderBrowse_Click = {
   if ($config_download_folderbrowsermoderndialog2.ShowDialog() -eq 'OK')
   {
      $config_download_folder_textbox3.Text = $config_download_folderbrowsermoderndialog2.SelectedPath
   }
}

$download_winget_search_button1_Click = {
   $downloadWingetSearchText = $download_winget_search_textbox5.Text
   $downloadwingetsearch = winget.exe search --name $downloadWingetSearchText --accept-source-agreements
   $downloadwingetsearch = winget.exe search --name $downloadWingetSearchText --accept-source-agreements
   $download_winget_output_textbox3.Text = $null
   $download_winget_listbox1.Items.Clear()
   $download_winget_version_listbox1.Items.Clear()
   $table_download_winget = (New-Object -TypeName System.Data.DataTable)
   $column_download_winget = (New-Object -TypeName System.Data.DataColumn)
   $column_download_winget.DataType = [type]::GetType('System.String')
   $column_download_winget.ColumnName = 'ID'
   $table_download_winget.Columns.Add($column_download_winget)
   $column_download_winget = (New-Object -TypeName System.Data.DataColumn)
   $column_download_winget.DataType = [type]::GetType('System.String')
   $column_download_winget.ColumnName = 'Name'
   $table_download_winget.Columns.Add($column_download_winget)
   
   foreach ($wsearch_l in $downloadwingetsearch)
   {
      if ($wsearch_l -like 'Name*')
      {
         $wsearch_IdStart = $wsearch_l.IndexOf('Id')
         $wsearch_VersionStart = $wsearch_l.IndexOf('Version')
         $wsearch_MatchStart = $wsearch_l.IndexOf('Match')
         $wsearch_SourceStart = $wsearch_l.IndexOf('Source')
      }
      
      if (($wsearch_l -notlike 'Name*') -and ($wsearch_l -notlike '---*') -and ($wsearch_l -notlike '   -*'))
      {
         $row_download_winget = $table_download_winget.NewRow()
         
         $download_winget_extraStrip = $wsearch_l.substring(0, $wsearch_IdStart)
         $download_winget_extraStrip = $download_winget_extraStrip.TrimEnd()
         $row_download_winget['Name'] = $download_winget_extraStrip
         $split = $wsearch_VersionStart - $wsearch_IdStart
         $row_download_winget['ID'] = $wsearch_l.substring($wsearch_IdStart, $split).Split('', [StringSplitOptions]::RemoveEmptyEntries) -join ''
         
         if ($row_download_winget['ID'] -notlike $null)
         {
            $table_download_winget.Rows.Add($row_download_winget)
            $download_winget_listboxInput = ($row_download_winget | Select-Object -Property Name, ID | ConvertTo-Csv -NoTypeInformation | Select-Object -skip 1)
            $download_winget_listbox1.Items.Add($download_winget_listboxInput)
         }
         
         ## - Save changes to the table:
         $table_download_winget.AcceptChanges()
         #$download_datagridview1.DataSource = $table_download_winget
         #$download_winget_listboxInput = $table_download_winget | Select Name, ID | ConvertTo-Csv -NoTypeInformation | select -skip 1
         #$download_winget_listbox1.DataSource = $download_winget_listboxInput
      }
   }
}

$download_winget_search_textbox5_TextChanged = {
   if ($config_listbox.SelectedItem -eq $null)
   {
      [void][Windows.Forms.MessageBox]::Show('Please select Customer in the Config Tab page.', 'Select Customer first')
   }
}

$download_winget_listbox1_SelectedIndexChanged = {
   $download_winget_version_listbox1.Items.Clear()
   $winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
   $winget_download_selected_id = $winget_download_selected_id.ToString()
   $winget_download_selected_id = $winget_download_selected_id.Split(',')[1]
   $winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
   $downloadwingetsearchversionselected = winget.exe show --id $winget_download_selected_id --versions --accept-source-agreements
   $downloadwingetsearchversionselected = winget.exe show --id $winget_download_selected_id --versions --accept-source-agreements
   
   foreach ($wsearch_55 in $downloadwingetsearchversionselected)
   {
      if (($wsearch_55 -notlike 'Found*') -and ($wsearch_55 -notlike '*-*') -and ($wsearch_55 -notlike '*Version*') -and ($wsearch_55 -notlike $null) -and ($wsearch_55 -notlike '* *'))
      {
         $download_winget_version_listbox1.Items.Add($wsearch_55)
      }
   }
}

$download_winget_version_listbox1_SelectedIndexChanged = {
   
   $download_winget_download_and_add_button1.Visible = $true
   $download_winget_download_and_add_button1.Enabled = $true
}

$download_winget_download_and_add_button1_Click = {
   $download_winget_explorer_button1.Enabled = $true
   $download_winget_explorer_button1.Visible = $true
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $config_downloadpath = (Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script)
   $download_winget_path = ('{0}\winget' -f $config_downloadpath)
   $winget_download_selected_id = $download_winget_listbox1.SelectedItem #| Select ID #| ConvertTo-Csv -NoTypeInformation | select -skip 1
   $winget_download_selected_id = $winget_download_selected_id.ToString()
   $winget_download_selected_id = $winget_download_selected_id.Split(',')[1]
   $winget_download_selected_id = $winget_download_selected_id.Split('"')[1].Split('"')[0]
   
   if (!(Test-Path -Path $download_winget_path -ErrorAction SilentlyContinue))
   {
      $null = (New-Item -ItemType Directory -Path $download_winget_path -Force -Confirm:$false)
   }
   
   #$downloadWingetToLib = winget download --download-directory $download_winget_path --id $winget_download_selected_id --accept-package-agreements --accept-source-agreements
   #$download_winget_output_textbox3.Text = $downloadWingetToLib
   #$config_downloadpath
   #Write-Host $download_winget_version_listbox1.SelectedItem
   $download_winget_selectedversion = $download_winget_version_listbox1.SelectedItem
   $download_winget_package = @'
winget download --download-directory !!@download_winget_path@!! --id !!@winget_download_selected_id@!! --accept-package-agreements --accept-source-agreements --version !!@download_winget_selectedversion@!!
'@
   $download_winget_package = $download_winget_package.Replace('!!@winget_download_selected_id@!!', $winget_download_selected_id)
   $download_winget_package = $download_winget_package.Replace('!!@download_winget_selectedversion@!!', $download_winget_selectedversion)
   $download_winget_package = $download_winget_package.Replace('!!@download_winget_path@!!', $download_winget_path)
   
   if (!(Test-Path -Path 'C:\Program Files\IntunePrepTool\' -PathType Container -ErrorAction SilentlyContinue))
   {
      [void][Windows.Forms.MessageBox]::Show('Please use winget to install IntunePrepTool: "winget install rink-turksma.IntunePrepTool" or use MSI file from Github (Releases) ', 'IntunePrep Tool install location not found')
   }
   else
   {
      if (!(Test-Path -Path 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1' -PathType Leaf -ErrorAction SilentlyContinue))
      {
         $null = ($download_winget_package | Out-File -FilePath 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1' -Force -Confirm:$false)
      }
      else
      {
         $null = (Remove-Item -Path 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1' -Confirm:$false -Force)
         $null = ($download_winget_package | Out-File -FilePath 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1' -Force -Confirm:$false)
      }
      
      & "$env:PSHome\powershell_ise.exe" 'C:\windows\temp\intunepreptoolWingetDownloadToLib.ps1'
   }
   
}

$download_winget_explorer_button1_Click = {
   $config_downloadpath = Get-Variable -Name 'config_downloadpath' -ValueOnly -Scope Script
   $download_winget_path = ('{0}\winget' -f $config_downloadpath)
   Invoke-PSUExplorer -Path $download_winget_path
}

$exe_maak_uninstall_script_button1_Click = {
   $exe_maak_intuneWIN_button1.Enabled = $true
   $exe_maak_intuneWIN_button1.Visible = $true
   $exe_maak_uninstall_script_button1.Enabled = $true
   $exe_maak_uninstall_script_button1.Visible = $true
   $exe_uploadlogo_button1.Enabled = $true
   $exe_uploadlogo_button1.Visible = $true
   $exe_uninstallFile = @'
<#	
      .NOTES
      ===========================================================================
      Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
      Created on:   	21-5-2023 18:04
      Created by:   	Rink Turksma
      Organization: 	
      Filename:     	uninstall.ps1
      ===========================================================================
      .DESCRIPTION
      Parameters will be filled by IntunePrepTool.
#>
# App Parameters
$appName = '!!AppName!!'
$version = '!!version!!'
$exeFile = '!!EXEFile!!'
$exeParameters = '!!EXEPARMS!!' ##Check EXE PARAMETERS.. 
# Customer variables
$logDir = '!!logdir!!'
$registerDetectionRoot = '!!RegisterDetectionroot!!'
# Dynamic variables
$logFile = $(Join-Path -Path $logDir  -ChildPath ('{0}{1}.txt' -f $appName, $version))
$msiLogFileName = $appName + $version + 'MSI'
$msiLogFile = $(Join-Path -Path $logDir  -ChildPath ('{0}.txt' -f $msiLogFileName))
$regKeyRoot = ('HKLM:\Software\{0}' -f $registerDetectionRoot)
$regKeyApp = ('{0}\{1}' -f $regKeyRoot, $appName)
$exeCode = $null

# Create log directory in programdata if it does not exist.
if (!(Test-Path -Path $logDir -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path $logDir -Force -Confirm:$false)
}
           
if (!(Test-Path -Path ('{0}\dll' -f $logDir) -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\dll' -f $logDir) -Force -Confirm:$false)
}
            
# Creates the Registry Root directory if it does not exist
if (!(Test-Path -Path $regKeyRoot -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regKeyRoot -ItemType Key -Force -Confirm:$false)
}
              
# Creates the application Key in the Registry Root.
if (!(Test-Path -Path $regKeyApp -ErrorAction SilentlyContinue))
{
   $null = (New-Item -Path $regKeyApp -ItemType Key -Force -Confirm:$false)
}

function fDetectionInRegistry
{
   ### Function ensures successful or unsuccessful execution..
   ### Eventually you will have, for example:
   #### HKEY_LOCAL_MACHINE\SOFTWARE\Intune_Customer\Test
   ### With Versie value en een [BOOL]Succes waarde
   ### Usage: fDetectionInRegistry -succes $False of fDetectionInRegistry -succes $true
   param
   (
      [Parameter(Mandatory,HelpMessage = 'Add help message for user')]
      [bool]$Succes
   )
	
   try
   {
      $AppRegVersie = (Get-ItemProperty -Path $regKeyApp -Name Versie -ErrorAction Stop)

      if ($AppRegVersie.Versie -ne $version) 
      {
         $null = (Set-ItemProperty -Path $regKeyApp -Name Versie -Value $version -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regKeyApp -Name Versie -Value $version -PropertyType string -Force -Confirm:$false)
   }

   try
   {
      $AppRegSucces = (Get-ItemProperty -Path $regKeyApp -Name Succes -ErrorAction Stop)

      if ($AppRegSucces.Succes -ne $Succes) 
      {
         $null = (Set-ItemProperty -Path $regKeyApp -Name Succes -Value $Succes -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regKeyApp -Name Succes -Value $Succes -PropertyType string -Force -Confirm:$false)
   }
}

# Setup Script Location
$null = (Set-Location -Path $PSScriptRoot)
                       
# Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -PathType Leaf -ErrorAction SilentlyContinue))
{
   $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -Force -Confirm:$false)
}
                 
# Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' | Select-Object -ExpandProperty Name | Where-Object -Property {
      ($_ -eq 'IntunePrepTool' )
} -EQ -Value $null)
{
   $null = (New-Item -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' -Name 'IntunePrepTool' -ErrorAction SilentlyContinue -Force -Confirm:$false)
}

try
{
   $TypesSupported = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -ErrorAction Stop)
                     
   if ($TypesSupported.TypesSupported -ne '7') 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -PropertyType DWORD -Force -Confirm:$false)
}
                  
try
{
   $EventMessageFile = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -ErrorAction Stop)
                  
   if ($EventMessageFile.EventMessageFile -ne ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir)) 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -PropertyType string -Force -Confirm:$false)
}
                  
# New EventLog when needed.
try
{
   # Variable is assigned, but never used.
   $checkEventLog = (Get-EventLog -LogName 'IntunePrepTool' -Source 'IntunePrepTool' -ErrorAction Stop)
}
catch
{
   $null = (New-EventLog -MessageResourceFile ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logDir) -LogName 'IntunePrepTool' -Source 'IntunePrepTool')
   [Diagnostics.EventLog]::CreateEventSource('IntunePrepTool', 'IntunePrepTool')
}

# Start Transcript.  
# The code you provided is a comment in PowerShell. It indicates that the following code block is related to a transcript that will be saved in a text file under the $logdir directory and will also be available in the event viewer.
$null = (Start-Transcript -Path $logFile)
#Start; Write Log file
                    
try
{
   $null = (Start-Process -FilePath $exeFile -ArgumentList $exeParameters -ErrorAction Stop -Wait)
   Write-Host -Object 'Uninstall completed' -ForegroundColor Green
   $excode = 0
}
catch
{
   Write-Host -Object ('Error executing {0} with parameter {1}' -f $exeFile, $exeParameters) -ForegroundColor Yellow
   Write-Host -Object 'Uinstallation failed' -ForegroundColor Red -BackgroundColor Blue
   Write-Host -Object ('Error message: {0}' -f $_.Exception.Message) -ForegroundColor Red -BackgroundColor Blue
   $excode = 1
}

### Place extra actions here:

<#----Below is the end of the installation script---#>
  
# Now the Transcript logging is started
$null = (Stop-Transcript -ErrorAction SilentlyContinue)
   
# After this command, the log is automatically saved in the $logdir location
# Here is a way to split the log so that we only have the last run.
$split = [regex]::Escape('**********************')
$lastRun = ((Get-Content -Path $logFile -Raw) -split ($split))[-3]
     
if ($lastRun.Length -gt 32600)
{
   $lastRun = $lastRun.Substring(0, 32600) + "`n`n****OUTPUT TRUNCATED****"
}
      
# In the try / catch block in the execution, we set $excode to 0 or 1
# Based on this, the Log in the Event viewer is set to Error or Informational.
# Additionally, the previously declared function fDetectionInRegistry is used to place the detection methodology in the registry with either a successful application message or an unsuccessful one.
if ($excode -eq 1) 
{
   $warning = 'Error'
}
else 
{
   $warning = 'Information'
   $null = (Remove-Item -Path $regKeyApp -Force -Confirm:$false)
}
# End; Write Log file
        
if ($warning -like 'Information')
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Information', 0x3)
}
Else
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Error', 0x3)
}
         
if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs' -ErrorAction SilentlyContinue) 
{
   if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -PathType Leaf -ErrorAction SilentlyContinue) 
   {
      $null = (Remove-Item -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
   }
                         
   $null = (Copy-Item -Path 'c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx' -Destination 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
}
'@
   
   $msi_uninstallFile = @'
<#	
      .NOTES
      ===========================================================================
      Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.221
      Created on:   	21-5-2023 17:57
      Created by:   	Rink Turksma
      Organization: 	
      Filename:     	uninstall.ps1
      ===========================================================================
      .DESCRIPTION
      Parameters will be filled by IntunePrepTool.
#>

$appNaam = '!!AppNaam!!'
$versie = '!!versie!!'
<#

      #$MSIbestand = "!!MSIBestand!!"
      #$MSIparameters = "!!MSIPARMS!!"
      Please see u.cmd for MSI parameters used by this script.

#>
$logdir = '!!logdir!!'
$RegisterDetectionroot = '!!RegisterDetectionroot!!'
#Dyn vars
$logfile = $(Join-Path -Path $logdir  -ChildPath ('{0}{1}.txt' -f $appNaam, $versie))
$filenaamMSILog = $appNaam + $versie + 'MSI'
$logfileMSI = $(Join-Path -Path $logdir  -ChildPath ('{0}.txt' -f $filenaamMSILog))
$regkeyRoot = ('HKLM:\Software\{0}' -f $RegisterDetectionroot)
$regkeyApp = ('{0}\{1}' -f $regkeyRoot, $appNaam)
$excode = $null


# Creates Log directory if needed.
if (!(Test-Path -Path $logdir -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path $logdir -Force -Confirm:$false)
}

# Creates DLL directory if needed. (For Message Log Definitions, IntunePrepToo_msgfile.dll)
if (!(Test-Path -Path ('{0}\dll' -f $logdir) -ErrorAction SilentlyContinue))
{
   $null = (New-Item -ItemType Directory -Path ('{0}\dll' -f $logdir) -Force -Confirm:$false)
}
  
# Creates Registry Root if needed.
if (!(Test-Path -Path $regkeyRoot -ErrorAction SilentlyContinue))
{
   $null = ($null = New-Item -Path $regkeyRoot -ItemType Key -Force -Confirm:$false)
}
   
# Creates Registry App if needed.
if (!(Test-Path -Path $regkeyApp -ErrorAction SilentlyContinue))
{
   $null = ($null = New-Item -Path $regkeyApp -ItemType Key -Force -Confirm:$false)
}

#Function for Detection in Registry
function fDetectionInRegistry
{
   param
   (
      [Parameter(Mandatory,HelpMessage = 'Add help message for user')]
      [bool]$Succes
   )
	
   try
   {
      $AppRegVersie = (Get-ItemProperty -Path $regkeyApp -Name Versie -ErrorAction Stop)

      if ($AppRegVersie.Versie -ne $versie) 
      {
         $null = (Set-ItemProperty -Path $regkeyApp -Name Versie -Value $versie -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regkeyApp -Name Versie -Value $versie -PropertyType string -Force -Confirm:$false)
   }

   try
   {
      $AppRegSucces = (Get-ItemProperty -Path $regkeyApp -Name Succes -ErrorAction Stop)

      if ($AppRegSucces.Succes -ne $Succes) 
      {
         $null = (Set-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -Force -Confirm:$false)
      }
   }
   catch
   {
      $null = (New-ItemProperty -Path $regkeyApp -Name Succes -Value $Succes -PropertyType string -Force -Confirm:$false)
   }
}


# Setup Script Location
$null = (Set-Location -Path $PSScriptRoot)

# Copies IntunePrepTool_msgfile.dll For custom eventLog
if (!(Test-Path -Path ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -PathType Leaf -ErrorAction SilentlyContinue))
{
   $null = (Copy-Item -Path 'IntunePrepTool_msgfile.dll' -Destination ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -Force -Confirm:$false)
}

# Creates Registry IntunePrepTool for MSG file
if (Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' | Select-Object -ExpandProperty Name | Where-Object -Property {
      ($_ -eq 'IntunePrepTool')
} -EQ -Value $null)
{
   $null = (New-Item -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\' -Name 'IntunePrepTool' -ErrorAction SilentlyContinue -Force -Confirm:$false)
}

try
{
   $TypesSupported = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -ErrorAction Stop)

   if ($TypesSupported.TypesSupported -ne '7') 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name TypesSupported -Value '7' -PropertyType DWORD -Force -Confirm:$false)
}
      
try
{
   $EventMessageFile = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -ErrorAction Stop)

   if ($EventMessageFile.EventMessageFile -ne ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir)) 
   {
      $null = (Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -Force -Confirm:$false)
   }
}
catch
{
   $null = (New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\IntunePrepTool' -Name EventMessageFile -Value ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -PropertyType string -Force -Confirm:$false)
}

# New EventLog when needed.
try
{
   $null = (Get-EventLog -LogName 'IntunePrepTool' -Source 'IntunePrepTool' -ErrorAction Stop)
}
catch
{
   $null = (New-EventLog -MessageResourceFile ('{0}\dll\IntunePrepTool_msgfile.dll' -f $logdir) -LogName 'IntunePrepTool' -Source 'IntunePrepTool')
   [Diagnostics.EventLog]::CreateEventSource('IntunePrepTool', 'IntunePrepTool')
}

#region Script
Start-Transcript -Path $logfile

try
{
   $startPMSI = Start-Process -FilePath u.cmd -Wait -ErrorAction stop -WindowStyle Hidden
   Write-Host -Object $startPMSI
   Write-Host -Object 'Uninstall done!' -ForegroundColor Green
   Write-Host -Object 'Please check MSIEXEC log below' -ForegroundColor Green
   Write-Host -Object $logfileMSI -ForegroundColor Green
   $MSILOGS = (Get-Content -Path $logfileMSI )
   $MSILOGS
   Write-Host -Object 'See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes' -ForegroundColor Green
   $excode = 0
}
catch
{
   Write-Host 'Uninstall failed' --ForegroundColor Red -BackgroundColor Blue
   Write-Host -Object ('Error message: {0}' -f $_.Exception.Message) -ForegroundColor Red -BackgroundColor Blue
   Write-Host -Object 'See log file from MSI why this is not working.:' -ForegroundColor Red -BackgroundColor Blue
   Write-Host -Object $logfileMSI -ForegroundColor Red -BackgroundColor Blue
   $MSILOGS = (Get-Content -Path $logfileMSI )
   $MSILOGS
   Write-Host -Object 'See what this means: https://learn.microsoft.com/en-us/windows/win32/msi/error-codes' -ForegroundColor Red -BackgroundColor Blue
   $excode = 1
   $startPMSI
   $excode = 1
}
#endregion Script

$null = (Stop-Transcript -ErrorAction SilentlyContinue)

$split = [regex]::Escape('**********************')
$lastRun = ((Get-Content -Path $logfile -Raw) -split ($split))[-3]

if ($lastRun.Length -gt 30000)
{
   $lastRun = $lastRun.Substring(0, 30000) + ("`n`n MSIEXEC log complete: {0}" -f $logfileMSI)
}

if ($excode -eq 1) 
{
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Error', 0x3)
}
else 
{
   $null = (Remove-Item -Path $regkeyApp -Force -Confirm:$false)
   [Diagnostics.EventLog]::WriteEntry('IntunePrepTool', $lastRun, 'Information', 0x3)
}

# Copy IntunePrepTool.evtx to IntuneManagementExtension\Logs
if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs' -ErrorAction SilentlyContinue) 
{
   if (Test-Path -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -PathType Leaf -ErrorAction SilentlyContinue) 
   {
      $null = (Remove-Item -Path 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
   }

   $null = (Copy-Item -Path 'c:\windows\System32\Winevt\Logs\IntunePrepTool.evtx' -Destination 'C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntunePrepTool.evtx' -Force -Confirm:$false)
}
'@
   
   if ($exe_radiobutton3.Checked -eq $true)
   {
      $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
      $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
      $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
      $logdir = $config_logfoldertarget
      $RegisterDetectionroot = 'Intune_' + $config_customername
      $versie = $exe_versie_textbox1.text
      $appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
      $MSIPARSInput = '"' + $exe_msiexecuninstall.Text + '"'
      $msi_uninstallFile = $msi_uninstallFile.Replace('"!!AppNaam!!"', $appnaam)
      $msi_uninstallFile = $msi_uninstallFile.Replace('!!logdir!!', $logdir)
      $msi_uninstallFile = $msi_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
      $msi_uninstallFile = $msi_uninstallFile.Replace('!!versie!!', $versie)
      $msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIBestand!!"', $MSIbestand)
      $msi_uninstallFile = $msi_uninstallFile.Replace('"!!MSIPARMS!!"', $MSIPARSInput)
      
      try
      {
         $exepnaam = $exe_packagenaam_textbox1.text
         $exeversie = $exe_versie_textbox1.text
         $outputDirectory = $config_packagefolder
         $jjmsii = $exe_msiexecuninstall.text
         $null = ($jjmsii | Out-File -FilePath ('{0}\{1}\{2}\source\u.cmd' -f $outputDirectory, $exepnaam, $exeversie) -Encoding ascii -Force -ErrorAction Stop -Confirm:$false)
         $null = ($msi_uninstallFile | Out-File -FilePath ('{0}\{1}\{2}\source\uninstall.ps1' -f $outputDirectory, $exepnaam, $exeversie) -Force -ErrorAction Stop -Confirm:$false)
         $exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
         $exe_output_textbox1.AppendText("`nu.cmd created `r`n")
         $exe_output_textbox1.AppendText("`nTest and if needed. Save changes in Powershell_ISE directly `r`n")
      }
      catch
      {
         $exe_output_textbox1.AppendText("`nUninstall.ps1 NOT created `r`n")
      }
   }
   else
   {
      if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
      {
         $EXEbestand = $exe_uninstall_exe_path_textbox2.Text
         
      }
      else
      {
         $EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
      }
      
      $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
      $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
      $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
      $logdir = $config_logfoldertarget
      $RegisterDetectionroot = 'Intune_' + $config_customername
      $versie = $exe_versie_textbox1.text
      #$EXEbestand = '"' + $exe_openfiledialog1.SafeFileName + '"'
      $appnaam = '"' + $exe_packagenaam_textbox1.text + '"'
      $EXEPARSInput = $exe_parsUnInstall_textbox1.Text
      $exe_uninstallFile = $exe_uninstallFile.Replace('"!!AppName!!"', $appnaam)
      $exe_uninstallFile = $exe_uninstallFile.Replace('!!logdir!!', $logdir)
      $exe_uninstallFile = $exe_uninstallFile.Replace('!!RegisterDetectionroot!!', $RegisterDetectionroot)
      $exe_uninstallFile = $exe_uninstallFile.Replace('!!version!!', $versie)
      $exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEFile!!"', $EXEbestand)
      $exe_uninstallFile = $exe_uninstallFile.Replace('"!!EXEPARMS!!"', $EXEPARSInput)
      $exepnaam = $exe_packagenaam_textbox1.text
      $exeversie = $exe_versie_textbox1.text
      $outputDirectory = $config_packagefolder
      
      try
      {
         $exe_uninstallFile | Out-File -FilePath ('{0}\{1}\{2}\source\uninstall.ps1' -f $outputDirectory, $exepnaam, $exeversie) -Force -ErrorAction Stop
         $exe_output_textbox1.AppendText("`nUninstall.ps1 created `r`n")
      }
      catch
      {
         $exe_output_textbox1.AppendText("`nUbinstall.ps1 NIET created `r`n")
      }
   }
}

$exe_radiobutton3_CheckedChanged = {
   if ($exe_radiobuttonUninstallEXEPath.Checked -eq $true)
   {
      $exe_uninstall_exe_path_textbox2.Enabled = $true
      $exe_uninstall_exe_path_textbox2.Visible = $true
      $exe_msiexecuninstall.Enabled = $false
      $exe_msiexecuninstall.Visible = $false
      
   }
   
   if ($exe_radiobuttonGebruikZelfdeEXEAlsB.Checked -eq $true)
   {
      $exe_uninstall_exe_path_textbox2.Enabled = $false
      $exe_uninstall_exe_path_textbox2.Visible = $false
      $exe_msiexecuninstall.Enabled = $false
      $exe_msiexecuninstall.Visible = $false
      
   }
   
   if ($exe_radiobutton3.Checked -eq $true)
   {
      $exe_uninstall_exe_path_textbox2.Enabled = $false
      $exe_uninstall_exe_path_textbox2.Visible = $false
      $exe_parsUnInstall_textbox1.Enabled = $false
      $exe_parsUnInstall_textbox1.Visible = $false
      $exe_msiexecuninstall.Enabled = $true
      $exe_msiexecuninstall.Visible = $true
      $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
      $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
      $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
      $exepnaam = $exe_packagenaam_textbox1.text
      $exeversie = $exe_versie_textbox1.text
      $appNaam = $exepnaam
      $versie = $exeversie
      #$msi_openfiledialog1.SafeFileName
      #klant variabelen
      $logdir = $config_logfoldertarget
      $RegisterDetectionroot = 'Intune_' + $config_customername
      #Dyn vars
      $logfile = $(Join-Path -Path $logdir -ChildPath ('{0}{1}.txt' -f $appnaam, $versie))
      $filenaamMSILog = $appNaam + $versie + 'MSI'
      $logfileMSI = "$(Join-Path -Path $logdir -ChildPath ('{0}.txt' -f $filenaamMSILog))"
      $exe_msiexecuninstall.Text = "msiexec /qn, /l*v $logfileMSI /x{PlaceProductIDhere}"
   }
   
   $exe_labelVoorbeeldUninstall.Visible = $false
   $exe_labelVoorbeeldUninstall.Enabled = $false
   $exe_test_uninstall_button1.Enabled = $true
   $exe_test_uninstall_button1.Visible = $true
   $exe_maak_uninstall_script_button1.Enabled = $true
   $exe_maak_uninstall_script_button1.Visible = $true
}

$tools_uninstallstring_search_button1_Click = {
   $tools_uninstallstring_textbox2.Text = "Searching: `r`n"
   $InstallsUninstallString = (Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*' | Select-Object -Property DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object -Property InstallDate)
   $wattezoeken = $tools_uninstallstring_search_textbox3.Text
   $InstallsUninstallString = $InstallsUninstallString | where-object {
      ($_.DisplayName -contains $wattezoeken -or $_.DisplayName -match $wattezoeken)
   }
   
   foreach ($ius in $InstallsUninstallString)
   {
      $tools_uninstallstring_textbox2.AppendText("`r`n")
      $tools_uninstallstring_textbox2.AppendText('DisplayName: ' + $ius.DisplayName + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('DisplayVersion: ' + $ius.DisplayVersion + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('InstallDate: ' + $ius.InstallDate + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('Uninstallstring: ' + $ius.UninstallString + "`r`n")
   }
}

$buttonSearch32Bit_Click = {
   $tools_uninstallstring_textbox2.Text = "Searching: `r`n"
   $InstallsUninstallString = (Get-ItemProperty -Path 'HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*' | Select-Object -Property DisplayName, DisplayVersion, Publisher, InstallDate, UninstallString | Sort-Object -Property InstallDate)
   $wattezoeken = $tools_uninstallstring_search_textbox3.Text
   $InstallsUninstallString = $InstallsUninstallString | where-object {
      ($_.DisplayName -contains $wattezoeken -or $_.DisplayName -match $wattezoeken)
   }
   
   foreach ($ius in $InstallsUninstallString)
   {
      $tools_uninstallstring_textbox2.AppendText("`r`n")
      $tools_uninstallstring_textbox2.AppendText('DisplayName: ' + $ius.DisplayName + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('DisplayVersion: ' + $ius.DisplayVersion + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('InstallDate: ' + $ius.InstallDate + "`r`n")
      $tools_uninstallstring_textbox2.AppendText('Uninstallstring: ' + $ius.UninstallString + "`r`n")
   }
}

$package_scheduledTask_Edit_script_test_install_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $package_scheduledTask_name = $powershell_package_name_textbox1.Text
   $package_scheduledTask_version = $powershell_package_version_textbox1.text
   & "$env:PSHome\powershell_ise.exe" "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\install.ps1"
}

$package_scheduledTask_Edit_script_test_uninstall_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $package_scheduledTask_name = $powershell_package_name_textbox1.Text
   $package_scheduledTask_version = $powershell_package_version_textbox1.text
   & "$env:PSHome\powershell_ise.exe" "$config_packagefolder\$package_scheduledTask_name\$package_scheduledTask_version\source\uninstall.ps1"
}

$package_scheduledTask_Edit_script_createIntuneWin_button1_Click = {
   $null = (Set-Location -Path $PSScriptRoot)
   [void][Windows.Forms.MessageBox]::Show('The IntunePrepTool will not respond until packaging is ready. When creating large packages. Please wait', 'Press ok to continue') # Casting the method to [void] suppresses the output. 
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $msipnaam = $powershell_package_name_textbox1.Text
   $msiversie = $powershell_package_version_textbox1.text
   $outputDirectory = $config_packagefolder
   $RegisterDetectionroot = 'Intune_' + $config_customername
   $package_ScheduledTask_output_textbox1.Text = 'Creation of Intunewin file has started. Please wait.'
   & .\IntuneWinAppUtil.exe -c "$outputDirectory\$msipnaam\$msiversie\source\" -s "$outputDirectory\$msipnaam\$msiversie\source\install.ps1" -o "$outputDirectory\$msipnaam\$msiversie\output\" -q
   $null = (Rename-Item -Path ('{0}\{1}\{2}\output\install.intunewin' -f $outputDirectory, $msipnaam, $msiversie) -NewName ('{0}\{1}\{2}\output\{3}.intunewin' -f $outputDirectory, $msipnaam, $msiversie) -Force -Confirm:$false)
   $package_ScheduledTask_output_textbox1.AppendText("`nIntunewin file created: `r`n")
   $package_ScheduledTask_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\$msipnaam.intunewin")
   $package_ScheduledTask_output_textbox1.AppendText("`r`n")
   $package_ScheduledTask_output_textbox1.AppendText("Install command is: `r`n")
   $package_ScheduledTask_output_textbox1.AppendText("powershell -executionpolicy bypass -file install.ps1 `r`n")
   $package_ScheduledTask_output_textbox1.AppendText("un-install command is: `r`n")
   $package_ScheduledTask_output_textbox1.AppendText("powershell -executionpolicy bypass -file uninstall.ps1 `r`n")
   $package_ScheduledTask_output_textbox1.AppendText("Detection registry is: `r`n")
   $regkeyRoot = ('HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\{0}\' -f $RegisterDetectionroot)
   $regkeyApp = ('{0}{1}\' -f $regkeyRoot, $msipnaam)
   $regkeyApp
   $package_ScheduledTask_output_textbox1.AppendText("$regkeyApp `r`n")
   $package_ScheduledTask_output_textbox1.AppendText("Detection Method is: 'String Comparison' `r`n")
   $package_ScheduledTask_output_textbox1.AppendText("Detection Value is: 'Versie' `r`n")
   $package_ScheduledTask_output_textbox1.AppendText("Detection Operator is: 'Equals' `r`n")
   $package_ScheduledTask_output_textbox1.AppendText("Detection Value is: $msiversie `r`n")
   $package_ScheduledTask_output_textbox1.AppendText("Please reopen tool to make another Intunewin package `r`n")
   
   class CSNIntuneWinPackageConfig {
      [string]$IntuneWinFile
      [string]$DisplayName
      [string]$Publisher
      [string]$AppVersion
      [string]$reglocation
      [string]$regValue
      [string]$installCMD
      [string]$uninstallCMD
   }
   
   $CSNIntuneWinPackageConfig = $null
   
   $CSNIntuneWinPackageConfig += @([CSNIntuneWinPackageConfig]@{
         IntuneWinFile = ('{0}.intunewin' -f $msipnaam)
         DisplayName   = $msipnaam
         Publisher     = $config_customername
         AppVersion    = $msiversie
         
         reglocation   = $regkeyApp
         regValue      = 'Versie'
         installCMD    = 'powershell -executionpolicy bypass -file install.ps1'
         uninstallCMD  = 'powershell -executionpolicy bypass -file uninstall.ps1'
      })
   $null = ($CSNIntuneWinPackageConfig | Export-Csv -Path ('{0}\{1}\{2}\output\config.csv' -f $outputDirectory, $msipnaam, $msiversie) -NoTypeInformation)
   $config_csv_openfiledialog1.InitialDirectory = ('{0}\{1}\{2}\output\' -f $outputDirectory, $msipnaam, $msiversie)
   $package_ScheduledTask_output_textbox1.AppendText("Config.csv written to: `r`n")
   $package_ScheduledTask_output_textbox1.AppendText("$outputDirectory\$msipnaam\$msiversie\output\config.csv")
   $package_ScheduledTask_output_textbox1.AppendText("  `r`n")
   $package_scheduledTask_Edit_script_UploadLogo_button1.Enabled = $true
   $package_scheduledTask_Edit_script_UploadLogo_button1.Visible = $true
   $package_ScheduledTask_output_textbox1.AppendText("Firt use Upload Logo to upload *.png file. `r`n")
   $package_ScheduledTask_output_textbox1.AppendText("Then use this file in the upload tab to upload package to Intune. `r`n")
}

$package_scheduledTask_Edit_script_UploadLogo_button1_Click = {
   $config_packagefolder = (Get-Variable -Name 'config_packagefolder' -ValueOnly -Scope Script)
   $config_logfoldertarget = (Get-Variable -Name 'config_logfoldertarget' -ValueOnly -Scope Script)
   $config_customername = (Get-Variable -Name 'config_customername' -ValueOnly -Scope Script)
   $UploadLogo_openfiledialog1.ShowDialog()
   [string]$logo_org_path = $UploadLogo_openfiledialog1.FileNames
   $exepnaam = $powershell_package_name_textbox1.text
   $exeversie = $powershell_package_version_textbox1.text
   $outputDirectory = $config_packagefolder
   $null = (Copy-Item -Path $logo_org_path -Destination ('{0}\{1}\{2}\output\logo.png' -f $outputDirectory, $exepnaam, $exeversie) -ErrorAction Stop -Force -Confirm:$false)
   $exe_output_textbox1.AppendText("`r`n")
   $exe_output_textbox1.AppendText("Logo.PNG now available in Output Directory`r`n")
   if ([Windows.Forms.MessageBox]::Show("Click yes to open the upload screen. Then load the $outputDirectory\$exepnaam\$exeversie\output\config.csv file there", 'Upload Now?', [Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
   {
      $package_ScheduledTask_tabcontrol2.Enabled = $false
      $package_ScheduledTask_tabcontrol2.Visible = $false
      $upload_intunewin_tabcontrol2.Enabled = $true
      $upload_intunewin_tabcontrol2.Visible = $true
      $upload_intunewin_tabcontrol2.Dock = 'Fill'
   }
}

$reopenIntunePrepToolToolStripMenuItem_Click = {
   $ReloadIntunePrepTool = @'
	Set-Location "C:\Program Files\IntunePrepTool\"
	taskkill.exe /F /IM "IntunePrepTool.exe"
	& "C:\Program Files\IntunePrepTool\IntunePrepTool.exe"
'@
   if (Test-Path -Path 'c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1')
   {
      & "$env:PSHome\powershell.exe" -file 'c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1'
   }
   else
   {
      $null = ($ReloadIntunePrepTool | Out-File -FilePath 'c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1' -Confirm:$false -Force)
      Start-Sleep -Seconds 1
      & "$env:PSHome\powershell.exe" -file 'c:\Program Files\IntunePrepTool\IntunePrepToolReload.ps1'
   }
}

$download_winget_tab_Click = {
   #TODO: Place custom script here
}

$main_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
   #Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
   #TODO: Place custom script here
}

$button1_Click = {
   #TODO: Place custom script here
}

$tools_uninstallstring_search_textbox3_TextChanged = {
   #TODO: Place custom script here
}

$config_tabpage1_Click = {
   #TODO: Place custom script here
}

$config_panel_Paint = [System.Windows.Forms.PaintEventHandler]{
   #Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
   #TODO: Place custom script here
}

$config_download_folder_textbox3_TextChanged = {
   #TODO: Place custom script here
}

$config_tenanturl_textbox_TextChanged = {
   #TODO: Place custom script here
}

$config_customername_textbox_TextChanged = {
   #TODO: Place custom script here
}

$config_packagefolder_textbox_TextChanged = {
   #TODO: Place custom script here
}

$config_logfoldertarger_textbox_TextChanged = {
   #TODO: Place custom script here
}

$config_packagefolder_label_Click = {
   #TODO: Place custom script here
}

$upload_checkboxSetupAssignmentLikeP_CheckedChanged = {
   #TODO: Place custom script here
}

$upload_checkboxRequiredForAllDevice_CheckedChanged = {
   #TODO: Place custom script here
}

$Upload_beschikbaar_all_users_checkbox1_CheckedChanged = {
   #TODO: Place custom script here
}

$upload_tenantURL_textbox_TextChanged = {
   #TODO: Place custom script here
}

$upload_installCMD_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$upload_regValue_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$upload_reglocation_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$upload_AppVersion_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$upload_Publisher_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$upload_DisplayName_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$upload_IntuneWinFile_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$package_scheduledtask_time_combobox1_SelectedIndexChanged = {
   #TODO: Place custom script here
}

$package_scheduledtasK_option_startup_checkbox1_CheckedChanged = {
   #TODO: Place custom script here
}

$package_scheduledtask_am_radiobutton1_CheckedChanged = {
   #TODO: Place custom script here
}

$package_scheduledtask_pm_radiobutton_CheckedChanged = {
   #TODO: Place custom script here
}

$package_scheduledtask_combobox1_SelectedIndexChanged = {
   #TODO: Place custom script here
}

$package_ScheduledTask_output_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$powershell_package_version_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$Weblink_intunewin_tabpage6_Click = {
   #TODO: Place custom script here
}

$weblink_version_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$weblink_browser_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$weblink_location_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$weblink_output_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$weblink_url_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$remadiations_winget_textbox2_TextChanged = {
   #TODO: Place custom script here
}

$exe_intunewin_tabpage5_Click = {
   #TODO: Place custom script here
}

$exe_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
   #Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
   #TODO: Place custom script here
}

$exe_msiexecuninstall_TextChanged = {
   #TODO: Place custom script here
}

$exe_labelVoorbeeldUninstall_Click = {
   #TODO: Place custom script here
}

$exe_uninstall_exe_path_textbox2_TextChanged = {
   #TODO: Place custom script here
}

$exe_output_installparameters_Click = {
   #TODO: Place custom script here
}

$exe_output_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$exe_versie_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$exe_label1_Click = {
   #TODO: Place custom script here
}

$msi_output_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$msi_panel1_Paint = [System.Windows.Forms.PaintEventHandler]{
   #Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
   #TODO: Place custom script here
}

$msi_uninstall_par_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$msi_install_par_textbox3_TextChanged = {
   #TODO: Place custom script here
}

$labelInstallParametersadj_Click = {
   #TODO: Place custom script here
}

$msi_versie_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$msi_openmsi_label1_Click = {
   #TODO: Place custom script here
}

$msi_labelPackageName_Click = {
   #TODO: Place custom script here
}

$winget_output_textbox3_TextChanged = {
   #TODO: Place custom script here
}

$winget_displayname_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$Winget_locale_textbox_TextChanged = {
   #TODO: Place custom script here
}

$versie_textbox2_TextChanged = {
   #TODO: Place custom script here
}

$tools_winget_searchtabcontrol1_SelectedIndexChanged = {
   #TODO: Place custom script here
}

$tools_datagridview1_CellContentClick = [System.Windows.Forms.DataGridViewCellEventHandler]{
   #Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
   #TODO: Place custom script here
}

$tools_versions_winget_textbox_TextChanged = {
   #TODO: Place custom script here
}

$tools_show_winget_TextChanged = {
   #TODO: Place custom script here
}

$tools_search_winget_textbox_TextChanged = {
   #TODO: Place custom script here
}

$tools_Output_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$hover_textbox1_TextChanged = {
   #TODO: Place custom script here
}

$config_csv_openfiledialog1_FileOk = [System.ComponentModel.CancelEventHandler]{
   #Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
   #TODO: Place custom script here
}

$weblink_logo_openfiledialog1_FileOk = [System.ComponentModel.CancelEventHandler]{
   #Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
   #TODO: Place custom script here
}

$reloadToolStripMenuItem_Click = {
   #TODO: Place custom script here
}
]]></Code>
  <TV>0</TV>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>Renci.SshNet, Version=2016.0.0.0, Culture=neutral, PublicKeyToken=1cee9f8bde3db106|C:\Desktop\Renci.SshNet.dll</Assembly>
  </Assemblies>
</File>